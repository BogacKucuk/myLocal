package com.ykb.corebanking.tellerline.receiptbatch.service.impl;

import com.ykb.corebanking.tellerline.receiptbatch.dto.ReceiptParameterDefinitionDTO;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.List;

import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;

@ExtendWith(SpringExtension.class)
public class ReceiptExpenseJobParameterService_UpdatedTest {

    @InjectMocks
    private ReceiptExpenseJobParameterService service;

    @Mock
    private ReceiptParameterDefinitionService parameterDefinitionService;

    private static final String PERIOD_PARAMETER = "app.harmoni.glb.receiptbatch.expensejob.period";
    private static final String STATUS_LIST_PARAMETER = "app.harmoni.glb.receiptbatch.expensejob.statuslist";
    private static final String PARAMETER_OFF = "OFF";
    private static final String PARAMETER_ES = "ES";

    // ================================
    // Tests for getCurrentPeriod method
    // ================================
    
    @Test
    public void testGetCurrentPeriod_whenDtoIsNull() {
        // Eğer dto null ise if şartı sağlanmaz, önceki ayın tarihi döndürülür.
        when(parameterDefinitionService.getApplicationParameterByName(eq(PERIOD_PARAMETER)))
                .thenReturn(null);
        String result = service.getCurrentPeriod();
        String expected = LocalDate.now().minusMonths(1)
                .format(DateTimeFormatter.ofPattern("yyyyMM"));
        Assertions.assertEquals(expected, result);
    }
    
    @Test
    public void testGetCurrentPeriod_whenDtoValueIsNull() {
        // dto mevcut ancak değeri null ise if koşulunda "hasText" false döneceğinden,
        // önceki ayın tarihi döndürülür.
        ReceiptParameterDefinitionDTO dto = new ReceiptParameterDefinitionDTO();
        dto.setValue(null);
        when(parameterDefinitionService.getApplicationParameterByName(eq(PERIOD_PARAMETER)))
                .thenReturn(dto);
        String result = service.getCurrentPeriod();
        String expected = LocalDate.now().minusMonths(1)
                .format(DateTimeFormatter.ofPattern("yyyyMM"));
        Assertions.assertEquals(expected, result);
    }
    
    @Test
    public void testGetCurrentPeriod_whenDtoValueIsEmpty() {
        // dto mevcut, değeri boş string ("") ise, önceki ayın tarihi döndürülür.
        ReceiptParameterDefinitionDTO dto = new ReceiptParameterDefinitionDTO();
        dto.setValue("");
        when(parameterDefinitionService.getApplicationParameterByName(eq(PERIOD_PARAMETER)))
                .thenReturn(dto);
        String result = service.getCurrentPeriod();
        String expected = LocalDate.now().minusMonths(1)
                .format(DateTimeFormatter.ofPattern("yyyyMM"));
        Assertions.assertEquals(expected, result);
    }
    
    @Test
    public void testGetCurrentPeriod_whenDtoValueIsOff() {
        // dto mevcut, değeri "OFF" ise if koşulu sağlanmaz (negasyon ile kontrol ediliyor),
        // dolayısıyla önceki ayın tarihi döndürülür.
        ReceiptParameterDefinitionDTO dto = new ReceiptParameterDefinitionDTO();
        dto.setValue(PARAMETER_OFF);
        when(parameterDefinitionService.getApplicationParameterByName(eq(PERIOD_PARAMETER)))
                .thenReturn(dto);
        String result = service.getCurrentPeriod();
        String expected = LocalDate.now().minusMonths(1)
                .format(DateTimeFormatter.ofPattern("yyyyMM"));
        Assertions.assertEquals(expected, result);
    }
    
    @Test
    public void testGetCurrentPeriod_whenDtoHasValidValue() {
        // dto mevcut, değeri "OFF" dışında (örneğin "ABC") ise, direkt o değer döndürülür.
        ReceiptParameterDefinitionDTO dto = new ReceiptParameterDefinitionDTO();
        dto.setValue("ABC");
        when(parameterDefinitionService.getApplicationParameterByName(eq(PERIOD_PARAMETER)))
                .thenReturn(dto);
        String result = service.getCurrentPeriod();
        Assertions.assertEquals("ABC", result);
    }
    
    // ==================================
    // Tests for getCurrentStatusList method
    // ==================================
    
    @Test
    public void testGetCurrentStatusList_whenDtoIsNull() {
        // dto null ise, if koşuluna girilip yeni dto oluşturulur ve değeri "ES" set edilir.
        // Sonuçta "ES" değeri split edilerek ["ES"] listesi döndürülür.
        when(parameterDefinitionService.getApplicationParameterByName(eq(STATUS_LIST_PARAMETER)))
                .thenReturn(null);
        List<String> result = service.getCurrentStatusList();
        Assertions.assertEquals(Arrays.asList(PARAMETER_ES), result);
    }
    
    @Test
    public void testGetCurrentStatusList_whenDtoValueIsOff() {
        // dto mevcut, değeri "OFF" ise if koşuluna girer ve değeri "ES" set edilir.
        ReceiptParameterDefinitionDTO dto = new ReceiptParameterDefinitionDTO();
        dto.setValue(PARAMETER_OFF);
        when(parameterDefinitionService.getApplicationParameterByName(eq(STATUS_LIST_PARAMETER)))
                .thenReturn(dto);
        List<String> result = service.getCurrentStatusList();
        Assertions.assertEquals(Arrays.asList(PARAMETER_ES), result);
    }
    
    @Test
    public void testGetCurrentStatusList_whenDtoHasValidValue() {
        // dto mevcut, değeri "OFF" dışında (örneğin "APPROVED;PENDING") ise if'e girilmez,
        // ve split işlemi sonucunda ["APPROVED", "PENDING"] listesi döndürülür.
        ReceiptParameterDefinitionDTO dto = new ReceiptParameterDefinitionDTO();
        dto.setValue("APPROVED;PENDING");
        when(parameterDefinitionService.getApplicationParameterByName(eq(STATUS_LIST_PARAMETER)))
                .thenReturn(dto);
        List<String> result = service.getCurrentStatusList();
        Assertions.assertEquals(Arrays.asList("APPROVED", "PENDING"), result);
    }
    
    @Test
    public void testGetCurrentStatusList_whenDtoValueIsEmpty() {
        // dto mevcut, değeri boş string ("") ise if koşulu devreye girmez
        // ve split sonucu [""], yani tek boş elemanlı liste döndürülür.
        ReceiptParameterDefinitionDTO dto = new ReceiptParameterDefinitionDTO();
        dto.setValue("");
        when(parameterDefinitionService.getApplicationParameterByName(eq(STATUS_LIST_PARAMETER)))
                .thenReturn(dto);
        List<String> result = service.getCurrentStatusList();
        Assertions.assertEquals(Arrays.asList(""), result);
    }
    
    @Test
    public void testGetCurrentStatusList_whenDtoValueIsBlank() {
        // dto mevcut, değeri yalnızca boşluk karakterleri ise;
        // CoreStringUtils.hasText("   ") false döneceğinden if'e girilmez
        // ve split sonucu ["   "] (tek elemanlı liste) döndürülür.
        ReceiptParameterDefinitionDTO dto = new ReceiptParameterDefinitionDTO();
        dto.setValue("   ");
        when(parameterDefinitionService.getApplicationParameterByName(eq(STATUS_LIST_PARAMETER)))
                .thenReturn(dto);
        List<String> result = service.getCurrentStatusList();
        Assertions.assertEquals(Arrays.asList("   "), result);
    }
}
