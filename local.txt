***************************
APPLICATION FAILED TO START
***************************

Description:

The bean 'jobLauncher', defined in class path resource [org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration$SpringBootBatchConfiguration.class], could not be registered. A bean with that name has already been defined in file [C:\repo\safedepositbox-be\target\classes\com\ykb\corebanking\safedepositbox\safedepositboxbe\service\impl\JobLauncher.class] and overriding is disabled.

Action:

Consider renaming one of the beans or enabling overriding by setting spring.main.allow-bean-definition-overriding=true



package com.ykb.corebanking.safedepositbox.safedepositboxbe.service.impl;

import java.text.MessageFormat;
import java.util.Calendar;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ykb.corebanking.safedepositbox.safedepositboxbe.dto.JobDefinitionDTO;
import com.ykb.corebanking.safedepositbox.safedepositboxbe.exception.JobCouldNotBeLocatedException;
import com.ykb.corebanking.safedepositbox.safedepositboxbe.exception.JobDefinitionNotFoundException;
import com.ykb.corebanking.safedepositbox.safedepositboxbe.exception.JobException;
import com.ykb.corebanking.safedepositbox.safedepositboxbe.exception.JobValidationException;
import com.ykb.corebanking.safedepositbox.safedepositboxbe.mapper.IJobDefinitionMapper;
import com.ykb.corebanking.safedepositbox.safedepositboxbe.request.RequestJobLauncher;
import com.ykb.corebanking.safedepositbox.safedepositboxbe.request.RequestJobLocator;
import com.ykb.corebanking.safedepositbox.safedepositboxbe.request.RequestJobValidation;
import com.ykb.corebanking.safedepositbox.safedepositboxbe.response.ResponseJobExecutor;
import com.ykb.corebanking.safedepositbox.safedepositboxbe.response.ResponseJobLauncher;
import com.ykb.corebanking.safedepositbox.safedepositboxbe.response.ResponseJobLocator;
import com.ykb.corebanking.safedepositbox.safedepositboxbe.service.IJobExecutor;
import com.ykb.corebanking.safedepositbox.safedepositboxbe.service.IJobLauncher;
import com.ykb.corebanking.safedepositbox.safedepositboxbe.service.IJobLocator;
import com.ykb.corebanking.safedepositbox.safedepositboxbe.service.IJobValidationService;

import lombok.extern.slf4j.Slf4j;


@Service
@Slf4j
public class JobLauncher implements IJobLauncher {

    @Autowired
    private IJobLocator           jobLocator;

    @Autowired
    private IJobValidationService jobValidationService;

    @Override
    public ResponseJobLauncher launch(@Valid @NotNull RequestJobLauncher requestJobLauncer) throws JobException {
        ResponseJobLocator responseJobLocator = null;
        try {
            log.info(MessageFormat.format("Trying to find job with given name {0}.", requestJobLauncer.getName()));
            responseJobLocator = jobLocator.locate(RequestJobLocator.builder().name(requestJobLauncer.getName()).build());
            log.info("Job located.");
        } catch (JobCouldNotBeLocatedException jobCouldNotBeLocatedException) {
            log.info(MessageFormat.format("Job could not be located for {0}.", requestJobLauncer.getName()));
            throw new JobException(jobCouldNotBeLocatedException.getMessage());
        } catch (JobDefinitionNotFoundException e) {
            log.info(MessageFormat.format("Job definition not found for {0}.", requestJobLauncer.getName()));
            throw new JobException(e.getMessage());
        }
        JobDefinitionDTO jobDefinitionDTO = responseJobLocator.getJobDefinitionDTO();
        try {
            log.info("Started to validate job definition.");
            jobValidationService.validate(RequestJobValidation.builder().jobDefinitionDTO(jobDefinitionDTO).build());
            log.info("Job definition validated.");
        } catch (JobValidationException e) {
            log.info("Job definition is not valid. An exception thrown: " + e.getMessage());
            throw new JobException(e.getMessage());
        }
        IJobExecutor jobExecutor = responseJobLocator.getJobExecutor();
        log.info("Job is starting...");
        log.info("Job started.");
        ResponseJobExecutor response = jobExecutor.start(IJobDefinitionMapper.INSTANCE.toRequest(jobDefinitionDTO));
        log.info("Job ended without any exception... Successful.");
        return ResponseJobLauncher.builder().jobId(jobDefinitionDTO.getId()).jobStarted(Calendar.getInstance().getTime()).jobDefinition(jobDefinitionDTO).jobStatisticId(response.getJobStatisticId())
                .build();
    }

}
