package com.ykb.corebanking.safedepositbox.safedepositboxbe.batch.common.stats;

import lombok.Getter;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobParameter;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.StepExecution;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

/**
 * Bu sınıf, Job ve Step istatistiklerini tutar; 
 * job parametreleri, exception gibi bilgileri log için 
 * CommonJobExecutionStatistics tarafından kullanılır.
 */
@Getter
public class JobStatistics {

    private static final DateTimeFormatter DATE_TIME_FORMATTER =
            DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");

    private final String jobName;
    private final Long jobInstanceId;
    private final String jobStatus;
    private final String startTime;
    private final String endTime;
    private final String exitStatus;
    private final String failureExceptions;

    private final List<JobStatsParameter> parameters = new ArrayList<>();
    private final List<StepStatistics> stepStatistics = new ArrayList<>();

    public JobStatistics(JobExecution jobExecution) {
        this.jobName = jobExecution.getJobInstance().getJobName();
        this.jobInstanceId = jobExecution.getJobInstance().getId();
        this.jobStatus = jobExecution.getStatus().toString();

        // Tarihleri formatlıyoruz (LocalDateTime -> String).
        this.startTime = Optional.ofNullable(jobExecution.getStartTime())
                .orElse(LocalDateTime.MIN)
                .format(DATE_TIME_FORMATTER);

        this.endTime = Optional.ofNullable(jobExecution.getEndTime())
                .orElse(LocalDateTime.MIN)
                .format(DATE_TIME_FORMATTER);

        this.exitStatus = jobExecution.getExitStatus().toString();
        this.failureExceptions = printExceptions(jobExecution.getFailureExceptions());

        // Job parametrelerini alıp "JobStatsParameter" listesine ekliyoruz.
        JobParameters jobParams = jobExecution.getJobParameters();
        for (Map.Entry<String, JobParameter<?>> entry : jobParams.getParameters().entrySet()) {
            String key = entry.getKey();
            // getValue() -> Object, toString() / String.valueOf(...) ile alıyoruz.
            String val = String.valueOf(entry.getValue().getValue());
            this.parameters.add(new JobStatsParameter(key, val));
        }

        // Step bazında istatistik
        for (StepExecution stepExec : jobExecution.getStepExecutions()) {
            stepStatistics.add(new StepStatistics(stepExec));
        }
    }

    /**
     * Failure exception listesini String'e dönüştürme metodu
     * ByteArrayOutputStream + PrintWriter kullanıyor.
     */
    private static String printExceptions(List<Throwable> exceptions) {
        if (exceptions == null || exceptions.isEmpty()) {
            return "";
        }
        try (ByteArrayOutputStream bos = new ByteArrayOutputStream();
             PrintWriter pw = new PrintWriter(bos)) {
            for (Throwable t : exceptions) {
                t.printStackTrace(pw);
            }
            pw.flush();
            return bos.toString();
        } catch (IOException e) {
            return "";
        }
    }
}
