package com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.external;

import com.garantibbva.customerdossiermng.customerdocumentsbusiness.proto.DocumentScanGrpcServiceGrpc;
import com.garantibbva.customerdossiermng.customerdocumentsbusiness.proto.DocumentScanServiceProto.*;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.common.*;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.request.CreateDocumentDB2RequestDto;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.response.CreateDocumentDB2ResponseDto;
import com.garanti.ark.base.core.exception.BusinessException;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@DisplayName("DocumentServiceImpl - createDocumentDB2Record Tests")
class DocumentServiceImplCreateDocumentDB2RecordTest {

    @Mock
    private DocumentScanGrpcServiceGrpc.DocumentScanGrpcServiceBlockingStub documentScanGrpcServiceBlockingStub;

    @InjectMocks
    private DocumentServiceImpl documentService;

    @Test
    @DisplayName("createDocumentDB2Record - Başarılı senaryo")
    void givenValidRequest_whenCreateDocumentDB2Record_thenReturnSuccessResponse() {
        // Given
        CreateDocumentDB2RequestDto requestDto = CreateDocumentDB2RequestDto.builder()
                .referenceIdServerData(ReferenceIdServerDataDto.builder()
                        .userId("TEST_USER")
                        .referenceId("20240510104819081704")
                        .build())
                .idCardTxn(IdCardTxnDto.builder()
                        .txnId("00000000000000000000")
                        .sourceText("Hello")
                        .unitNum(0)
                        .productCode("")
                        .productId(" ")
                        .processId("MN000000045003398")
                        .processCode("GENELADRES")
                        .build())
                .groupList(GroupListDto.builder()
                        .groupListItems(List.of(
                                GroupListItemDto.builder()
                                        .idCardTxn(IdCardTxnDetailDto.builder()
                                                .documentId("20240110104819081704")
                                                .docPersonType("01")
                                                .build())
                                        .customerNum(45003398)
                                        .build()
                        ))
                        .build())
                .companyCode("GAR")
                .build();

        ProcessCreateGrpcResponse grpcResponse = ProcessCreateGrpcResponse.newBuilder()
                .setInstanceId("20240307135230397151")
                .setErrorComponent(ErrorComponent.newBuilder()
                        .setSeverityCode("I")
                        .setRollbackIndicator("")
                        .setOriginServId(1102)
                        .setContextString(ContextString.newBuilder()
                                .setContextLength(512)
                                .setContextValue("İşlem tamamlandı.")
                                .build())
                        .setReturnCode(1)
                        .setReasonCode(1)
                        .setChecksum("")
                        .build())
                .build();

        when(documentScanGrpcServiceBlockingStub.processCreate(any(ProcessCreateGrpcRequest.class)))
                .thenReturn(grpcResponse);

        // When
        CreateDocumentDB2ResponseDto response = documentService.createDocumentDB2Record(requestDto);

        // Then
        assertThat(response).isNotNull();
        assertThat(response.getInstanceId()).isEqualTo("20240307135230397151");
        assertThat(response.getErrorComponent()).isNotNull();
        assertThat(response.getErrorComponent().getReturnCode()).isEqualTo(1);
        assertThat(response.getErrorComponent().getReasonCode()).isEqualTo(1);
        assertThat(response.getErrorComponent().getSeverityCode()).isEqualTo("I");
        assertThat(response.getErrorComponent().getContextString()).isNotNull();
        assertThat(response.getErrorComponent().getContextString().getContextValue()).isEqualTo("İşlem tamamlandı.");

        verify(documentScanGrpcServiceBlockingStub, times(1))
                .processCreate(any(ProcessCreateGrpcRequest.class));
    }

    @Test
    @DisplayName("createDocumentDB2Record - ReturnCode -10 ise BusinessException fırlatmalı")
    void givenReturnCodeMinus10_whenCreateDocumentDB2Record_thenThrowBusinessException() {
        // Given
        CreateDocumentDB2RequestDto requestDto = CreateDocumentDB2RequestDto.builder()
                .referenceIdServerData(ReferenceIdServerDataDto.builder()
                        .userId("TEST_USER")
                        .referenceId("20240510104819081704")
                        .build())
                .idCardTxn(IdCardTxnDto.builder()
                        .txnId("00000000000000000000")
                        .sourceText("Hello")
                        .unitNum(0)
                        .productCode("")
                        .productId(" ")
                        .processId("MN000000045003398")
                        .processCode("GENELADRES")
                        .build())
                .groupList(GroupListDto.builder()
                        .groupListItems(List.of(
                                GroupListItemDto.builder()
                                        .idCardTxn(IdCardTxnDetailDto.builder()
                                                .documentId("20240110104819081704")
                                                .docPersonType("01")
                                                .build())
                                        .customerNum(45003398)
                                        .build()
                        ))
                        .build())
                .companyCode("GAR")
                .build();

        ProcessCreateGrpcResponse errorResponse = ProcessCreateGrpcResponse.newBuilder()
                .setInstanceId("20240307135230397152")
                .setErrorComponent(ErrorComponent.newBuilder()
                        .setSeverityCode("E")
                        .setRollbackIndicator("Y")
                        .setOriginServId(1102)
                        .setContextString(ContextString.newBuilder()
                                .setContextLength(512)
                                .setContextValue("Hata oluştu.")
                                .build())
                        .setReturnCode(-10)
                        .setReasonCode(0)
                        .setChecksum("")
                        .build())
                .build();

        when(documentScanGrpcServiceBlockingStub.processCreate(any(ProcessCreateGrpcRequest.class)))
                .thenReturn(errorResponse);

        // When & Then
        assertThatThrownBy(() -> documentService.createDocumentDB2Record(requestDto))
                .isInstanceOf(BusinessException.class);

        verify(documentScanGrpcServiceBlockingStub, times(1))
                .processCreate(any(ProcessCreateGrpcRequest.class));
    }

    @Test
    @DisplayName("createDocumentDB2Record - gRPC exception durumunda BusinessException fırlatmalı")
    void givenGrpcException_whenCreateDocumentDB2Record_thenThrowBusinessException() {
        // Given
        CreateDocumentDB2RequestDto requestDto = CreateDocumentDB2RequestDto.builder()
                .referenceIdServerData(ReferenceIdServerDataDto.builder()
                        .userId("TEST_USER")
                        .referenceId("20240510104819081704")
                        .build())
                .idCardTxn(IdCardTxnDto.builder()
                        .txnId("00000000000000000000")
                        .sourceText("Hello")
                        .unitNum(0)
                        .productCode("")
                        .productId(" ")
                        .processId("MN000000045003398")
                        .processCode("GENELADRES")
                        .build())
                .groupList(GroupListDto.builder()
                        .groupListItems(List.of(
                                GroupListItemDto.builder()
                                        .idCardTxn(IdCardTxnDetailDto.builder()
                                                .documentId("20240110104819081704")
                                                .docPersonType("01")
                                                .build())
                                        .customerNum(45003398)
                                        .build()
                        ))
                        .build())
                .companyCode("GAR")
                .build();

        when(documentScanGrpcServiceBlockingStub.processCreate(any(ProcessCreateGrpcRequest.class)))
                .thenThrow(new RuntimeException("gRPC connection error"));

        // When & Then
        assertThatThrownBy(() -> documentService.createDocumentDB2Record(requestDto))
                .isInstanceOf(BusinessException.class)
                .hasCauseInstanceOf(RuntimeException.class);

        verify(documentScanGrpcServiceBlockingStub, times(1))
                .processCreate(any(ProcessCreateGrpcRequest.class));
    }

    @Test
    @DisplayName("createDocumentDB2Record - Mapper doğru çalışmalı")
    void givenValidRequest_whenCreateDocumentDB2Record_thenMapperWorksCorrectly() {
        // Given
        CreateDocumentDB2RequestDto requestDto = CreateDocumentDB2RequestDto.builder()
                .referenceIdServerData(ReferenceIdServerDataDto.builder()
                        .userId("TEST_USER")
                        .referenceId("20240510104819081704")
                        .build())
                .idCardTxn(IdCardTxnDto.builder()
                        .txnId("00000000000000000000")
                        .sourceText("Hello")
                        .unitNum(0)
                        .productCode("")
                        .productId(" ")
                        .processId("MN000000045003398")
                        .processCode("GENELADRES")
                        .build())
                .groupList(GroupListDto.builder()
                        .groupListItems(List.of(
                                GroupListItemDto.builder()
                                        .idCardTxn(IdCardTxnDetailDto.builder()
                                                .documentId("20240110104819081704")
                                                .docPersonType("01")
                                                .build())
                                        .customerNum(45003398)
                                        .build()
                        ))
                        .build())
                .companyCode("GAR")
                .build();

        ProcessCreateGrpcResponse grpcResponse = ProcessCreateGrpcResponse.newBuilder()
                .setInstanceId("20240307135230397151")
                .setErrorComponent(ErrorComponent.newBuilder()
                        .setSeverityCode("I")
                        .setRollbackIndicator("")
                        .setOriginServId(1102)
                        .setContextString(ContextString.newBuilder()
                                .setContextLength(512)
                                .setContextValue("İşlem tamamlandı.")
                                .build())
                        .setReturnCode(1)
                        .setReasonCode(1)
                        .setChecksum("")
                        .build())
                .build();

        when(documentScanGrpcServiceBlockingStub.processCreate(any(ProcessCreateGrpcRequest.class)))
                .thenReturn(grpcResponse);

        // When
        documentService.createDocumentDB2Record(requestDto);

        // Then
        verify(documentScanGrpcServiceBlockingStub).processCreate(
                argThat(request ->
                        request.getReferenceIdServerData().getUserId().equals("TEST_USER") &&
                        request.getReferenceIdServerData().getReferenceId().equals("20240510104819081704") &&
                        request.getCompanyCode().equals("GAR") &&
                        request.getIdCardTxn().getProcessCode().equals("GENELADRES") &&
                        request.getGroupList().getGroupListItemsCount() == 1
                )
        );
    }

    @Test
    @DisplayName("createDocumentDB2Record - GroupList mapping doğrulaması")
    void givenRequestWithGroupList_whenCreateDocumentDB2Record_thenGroupListMappedCorrectly() {
        // Given
        CreateDocumentDB2RequestDto requestDto = CreateDocumentDB2RequestDto.builder()
                .referenceIdServerData(ReferenceIdServerDataDto.builder()
                        .userId("TEST_USER")
                        .referenceId("20240510104819081704")
                        .build())
                .idCardTxn(IdCardTxnDto.builder()
                        .txnId("00000000000000000000")
                        .sourceText("Hello")
                        .unitNum(0)
                        .productCode("")
                        .productId(" ")
                        .processId("MN000000045003398")
                        .processCode("GENELADRES")
                        .build())
                .groupList(GroupListDto.builder()
                        .groupListItems(List.of(
                                GroupListItemDto.builder()
                                        .idCardTxn(IdCardTxnDetailDto.builder()
                                                .documentId("20240110104819081704")
                                                .docPersonType("01")
                                                .build())
                                        .customerNum(45003398)
                                        .build()
                        ))
                        .build())
                .companyCode("GAR")
                .build();

        ProcessCreateGrpcResponse grpcResponse = ProcessCreateGrpcResponse.newBuilder()
                .setInstanceId("20240307135230397151")
                .setErrorComponent(ErrorComponent.newBuilder()
                        .setSeverityCode("I")
                        .setRollbackIndicator("")
                        .setOriginServId(1102)
                        .setContextString(ContextString.newBuilder()
                                .setContextLength(512)
                                .setContextValue("İşlem tamamlandı.")
                                .build())
                        .setReturnCode(1)
                        .setReasonCode(1)
                        .setChecksum("")
                        .build())
                .build();

        when(documentScanGrpcServiceBlockingStub.processCreate(any(ProcessCreateGrpcRequest.class)))
                .thenReturn(grpcResponse);

        // When
        documentService.createDocumentDB2Record(requestDto);

        // Then
        verify(documentScanGrpcServiceBlockingStub).processCreate(
                argThat(request -> {
                    boolean hasGroupList = request.hasGroupList();
                    boolean hasItems = request.getGroupList().getGroupListItemsCount() > 0;
                    boolean documentIdValid = request.getGroupList().getGroupListItems(0)
                            .getIdCardTxn().getDocumentId().equals("20240110104819081704");
                    boolean customerNumValid = request.getGroupList().getGroupListItems(0)
                            .getCustomerNum() == 45003398;

                    return hasGroupList && hasItems && documentIdValid && customerNumValid;
                })
        );
    }
}
