package com.ykb.corebanking.safedepositbox.safedepositboxbe.controller;

import com.ykb.corebanking.safedepositbox.safedepositboxbe.exception.AccountProvisionAccountToGLException;
import com.ykb.corebanking.safedepositbox.safedepositboxbe.request.RequestDebtPayment;
import com.ykb.corebanking.safedepositbox.safedepositboxbe.response.ResponseDebtPaymentProvision;
import com.ykb.corebanking.safedepositbox.safedepositboxbe.service.ISafeDepositBoxDebtPaymentService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;

@ExtendWith(SpringExtension.class)
class SafeDepositBoxDebtPaymentControllerTest {

    private SafeDepositBoxDebtPaymentController controller;
    private ISafeDepositBoxDebtPaymentService mockPaymentService;

    @BeforeEach
    void setUp() {
        // Service'i Mockito ile mockluyoruz
        mockPaymentService = Mockito.mock(ISafeDepositBoxDebtPaymentService.class);
        // Controller'ı gerçek nesne olarak oluşturup, mock service'i constructor'dan veriyoruz.
        controller = new SafeDepositBoxDebtPaymentController(mockPaymentService);
    }

    @Test
    void testPerformDebtPaymentSuccess() throws AccountProvisionAccountToGLException {
        // Arrange
        var request = new RequestDebtPayment();
        request.setTransactionId("TX123");

        var expectedProvision = new ResponseDebtPaymentProvision();
        expectedProvision.setIsSuccess(true);

        // Servis metodu çağrıldığında mock'tan bu yanıt dönsün
        Mockito.when(mockPaymentService.performDebtPayment(any(RequestDebtPayment.class)))
               .thenReturn(expectedProvision);

        // Act
        ResponseEntity<ResponseDebtPaymentProvision> responseEntity =
            controller.performDebtPayment(request);

        // Assert
        assertNotNull(responseEntity);
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertNotNull(responseEntity.getBody());
        assertTrue(responseEntity.getBody().getIsSuccess());
    }

    @Test
    void testPerformDebtPaymentThrowsException() throws AccountProvisionAccountToGLException {
        // Arrange
        var request = new RequestDebtPayment();
        Mockito.when(mockPaymentService.performDebtPayment(any(RequestDebtPayment.class)))
               .thenThrow(new AccountProvisionAccountToGLException("Provision error"));

        // Controller metodu, signature'da 'throws AccountProvisionAccountToGLException' bildirdiği için
        // servisten gelen istisnayı olduğu gibi re-throw yapar.
        assertThrows(AccountProvisionAccountToGLException.class, () -> {
            controller.performDebtPayment(request);
        });
    }
}
