package com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.external;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import com.garantibbva.depositprocessing.documentservicebusiness.proto.DocumentBusinessGrpcServiceGrpc.DocumentBusinessGrpcServiceBlockingStub;
import com.garantibbva.depositprocessing.documentservicebusiness.proto.DocumentServiceProto.CreatePdfV1GrpcRequest;
import com.garantibbva.depositprocessing.documentservicebusiness.proto.DocumentServiceProto.CreatePdfV1GrpcResponse;
import com.garantibbva.depositprocessing.documentservicebusiness.proto.DocumentServiceProto.CreatePdfV1GrpcResponse.CreatePdfV1Result;
import com.garantibbva.depositprocessing.documentservicebusiness.proto.DocumentServiceProto.GetPdfGrpcRequest;
import com.garantibbva.depositprocessing.documentservicebusiness.proto.DocumentServiceProto.GetPdfV1GrpcResponse;
import com.garantibbva.depositprocessing.documentservicebusiness.proto.DocumentServiceProto.GetPdfV1GrpcResponse.GetPdfV1Result;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.external.DocumentServiceImpl;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.request.CreateSinglePdfRequestDto;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.request.GetSinglePdfRequestDto;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.response.CreateSinglePdfResponseDto;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.response.GetPdfResponseDto;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
class DocumentServiceImplTest {

    @Mock
    private DocumentBusinessGrpcServiceBlockingStub stub;

    @InjectMocks
    private DocumentServiceImpl documentService;

    @Captor
    private ArgumentCaptor<CreatePdfV1GrpcRequest> createRequestCaptor;

    @Captor
    private ArgumentCaptor<GetPdfGrpcRequest> getRequestCaptor;

    @Test
    void testCreateSinglePdf() {
        // Given
        CreateSinglePdfRequestDto requestDto = CreateSinglePdfRequestDto.builder()
                .documentType("type")
                .documentStatus("status")
                .async("1")
                .userId("user")
                .authUserId("auth")
                .xmlData("<xml/>")
                .build();

        CreatePdfV1Result grpcResult = CreatePdfV1Result.newBuilder()
                .setReturnCode("00")
                .setReturnMsg("OK")
                .setDocumentId("DOC123")
                .build();

        CreatePdfV1GrpcResponse grpcResponse = CreatePdfV1GrpcResponse.newBuilder()
                .setCreatePdfV1Result(grpcResult)
                .build();

        when(stub.createSinglePdf(any(CreatePdfV1GrpcRequest.class))).thenReturn(grpcResponse);

        // When
        CreateSinglePdfResponseDto responseDto = documentService.createSinglePdf(requestDto);

        // Then
        verify(stub).createSinglePdf(createRequestCaptor.capture());
        assertEquals("00", responseDto.getReturnCode());
        assertEquals("OK", responseDto.getReturnMsg());
        assertEquals("DOC123", responseDto.getDocumentId());
    }

    @Test
    void testGetSinglePdf() {
        // Given
        GetSinglePdfRequestDto requestDto = GetSinglePdfRequestDto.builder()
                .documentId("DOC123")
                .userId("user")
                .authUserId("auth")
                .build();

        GetPdfV1Result grpcResult = GetPdfV1Result.newBuilder()
                .setReturnCode("00")
                .setReturnMsg("OK")
                .setPrintType("PT1")
                .setPaperTrayText("PTT")
                .setSecPaperTrayText("SPTT")
                .setPdfData("data")
                .build();

        GetPdfV1GrpcResponse grpcResponse = GetPdfV1GrpcResponse.newBuilder()
                .setGetPdfV1Result(grpcResult)
                .build();

        when(stub.getSinglePdf(any(GetPdfGrpcRequest.class))).thenReturn(grpcResponse);

        // When
        GetPdfResponseDto responseDto = documentService.getSinglePdf(requestDto);

        // Then
        verify(stub).getSinglePdf(getRequestCaptor.capture());
        assertEquals("00", responseDto.getReturnCode());
        assertEquals("OK", responseDto.getReturnMsg());
        assertEquals("PT1", responseDto.getPrintType());
        assertEquals("PTT", responseDto.getPaperTrayText());
        assertEquals("SPTT", responseDto.getSecPaperTrayText());
        assertEquals("data", responseDto.getPdfData());
    }
}
