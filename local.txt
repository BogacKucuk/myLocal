searchCashTrxnParameter ve deleteCashTrxnParameter eklendi.

package com.ykb.corebanking.vault.money.deposit.withdraw.bff.service.impl;

import com.ykb.corebanking.vault.money.deposit.withdraw.bff.request.RequestCashTrxnDeleteParameter;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.request.RequestCashTrxnSearchParameter;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.response.ResponseCashTrxnSearchParameter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import com.ykb.architecture.micro.error.exception.MicroException;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.client.CashTrxnParameterClient;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.dto.CashTrxnParameterDTO;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.exception.CashTrxnParameterException;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.request.RequestCashTrxnInfoParameter;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.response.ResponseCashTrxnInfoParameter;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.service.ICashTrxnParameterService;

@Service
public class CashTrxnParameterService implements ICashTrxnParameterService {

    @Autowired
    CashTrxnParameterClient client;

    @Override
    public CashTrxnParameterDTO getCashTrxnInfoParameterWithCache(String parameterName) {
        return client.getCashTrxnInfoParameterWithCache(parameterName);
    }

    @Override
    public CashTrxnParameterDTO getCashTrxnSystemParameterWithCache(String parameterName) {
        return client.getCashTrxnSystemParameterWithCache(parameterName);
    }

    @Override
    public String getCashTrxnSystemParameterValue(String parameterName) throws MicroException {
        if(StringUtils.hasText(parameterName)) {
            RequestCashTrxnInfoParameter requestCashTrxnInfoParameter = new RequestCashTrxnInfoParameter();
            requestCashTrxnInfoParameter.setParameterName(parameterName);
            ResponseCashTrxnInfoParameter responseCashTrxnInfoParameter = client.getCashTrxnSystemParameter(requestCashTrxnInfoParameter);
            if (responseCashTrxnInfoParameter != null && responseCashTrxnInfoParameter.getCashTrxnParameterDTO() != null) {
                return responseCashTrxnInfoParameter.getCashTrxnParameterDTO().getValue();
            } else {
                throw new CashTrxnParameterException(CashTrxnParameterException.UNEXPECTED_EXCEPTION);
            }
        }
        else {
            throw new CashTrxnParameterException(CashTrxnParameterException.INVALID_PARAMETER_NAME);
        }
    }

    @Override
    public ResponseCashTrxnSearchParameter searchCashTrxnParameter(RequestCashTrxnSearchParameter request) {
        return client.searchCashTrxnParameter(request);
    }

    @Override
    public void deleteCashTrxnParameter(RequestCashTrxnDeleteParameter request) {
        client.deleteCashTrxnParameter(request);
    }

}


package com.ykb.corebanking.vault.money.deposit.withdraw.bff.service.impl;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.ykb.architecture.micro.error.exception.MicroException;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.client.CashTrxnParameterClient;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.dto.CashTrxnParameterDTO;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.exception.CashTrxnParameterException;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.response.ResponseCashTrxnInfoParameter;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.util.BaseTestUtil;

@ExtendWith(SpringExtension.class)
class CashTrxnParameterServiceTest {
    @InjectMocks
    CashTrxnParameterService service;
    @Mock
    CashTrxnParameterClient  client;

    @Test
    void whenCall_getCashTrxnInfoParameterWithCache_success() {
        when(client.getCashTrxnInfoParameterWithCache(Mockito.anyString())).thenReturn(new CashTrxnParameterDTO());
        CashTrxnParameterDTO response = service.getCashTrxnInfoParameterWithCache(Mockito.anyString());
        assertNotNull(response);

    }

    @Test
    void whenCall_getCashTrxnSystemParameterWithCache_success() {
        when(client.getCashTrxnSystemParameterWithCache(Mockito.anyString())).thenReturn(new CashTrxnParameterDTO());
        CashTrxnParameterDTO response = service.getCashTrxnSystemParameterWithCache(Mockito.anyString());
        assertNotNull(response);
    }

    @Test
    void whenGetCashTrxnSystemParameterValue_shouldReturnSuccessfullResponse() {
        try {
            ResponseCashTrxnInfoParameter responseCashTrxnInfoParameter = new ResponseCashTrxnInfoParameter();
            CashTrxnParameterDTO cashTrxnParameterDTO = new CashTrxnParameterDTO();
            cashTrxnParameterDTO.setValue("paramValue");
            responseCashTrxnInfoParameter.setCashTrxnParameterDTO(cashTrxnParameterDTO);
            when(client.getCashTrxnSystemParameter(Mockito.any())).thenReturn(responseCashTrxnInfoParameter);
            String response = service.getCashTrxnSystemParameterValue("paramName");
            assertThat(response).isNotNull();
        } catch (MicroException e) {
            fail(BaseTestUtil.UNEXPECTED_EXCEPTION_MESSAGE);
        }

    }

    @Test
    void whenGetCashTrxnSystemParameterValue_invalidRequest_shouldThrowException() {
        CashTrxnParameterException thrownInvalidRequest = assertThrows(CashTrxnParameterException.class, () -> service.getCashTrxnSystemParameterValue(null),
                BaseTestUtil.getExpectedExceptionButDidNotMessage("getCashTrxnSystemParameterValue"));
        assertTrue(thrownInvalidRequest.getMessage().contains(CashTrxnParameterException.INVALID_PARAMETER_NAME));
        
        when(client.getCashTrxnSystemParameter(Mockito.any())).thenReturn(null);
        CashTrxnParameterException thrownUnexpectedException = assertThrows(CashTrxnParameterException.class, () -> service.getCashTrxnSystemParameterValue("paramName"),
                BaseTestUtil.getExpectedExceptionButDidNotMessage("getCashTrxnSystemParameterValue"));
        assertTrue(thrownUnexpectedException.getMessage().contains(CashTrxnParameterException.UNEXPECTED_EXCEPTION));
    }

}

package com.ykb.corebanking.vault.money.deposit.withdraw.bff.client;

import com.ykb.corebanking.vault.money.deposit.withdraw.bff.request.RequestCashTrxnDeleteParameter;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.request.RequestCashTrxnSearchParameter;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.response.ResponseCashTrxnSearchParameter;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.*;

import com.ykb.architecture.micro.error.feign.decoder.MicroErrorDecoder;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.dto.CashTrxnParameterDTO;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.request.RequestCashTrxnInfoParameter;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.response.ResponseCashTrxnInfoParameter;

@FeignClient(name = "COREBANKING.VAULT.money-deposit-withdraw", path = "/parameter", configuration = MicroErrorDecoder.class)
public interface CashTrxnParameterClient {

    @GetMapping("/info/getValue")
    public CashTrxnParameterDTO getCashTrxnInfoParameterWithCache(@RequestParam(value = "parameterName") String parameterName);

    @GetMapping("/system/getValue")
    public CashTrxnParameterDTO getCashTrxnSystemParameterWithCache(@RequestParam(value = "parameterName") String parameterName);

    @PostMapping("/getParameterValue")
    public ResponseCashTrxnInfoParameter getCashTrxnSystemParameter(@RequestBody RequestCashTrxnInfoParameter requestCashTrxnInfoParameter);

    @PostMapping("/search")
    ResponseCashTrxnSearchParameter searchCashTrxnParameter(@RequestBody RequestCashTrxnSearchParameter request);

    @DeleteMapping("/delete")
    void deleteCashTrxnParameter(@RequestBody RequestCashTrxnDeleteParameter request);
}


@Getter
@Setter
public class RequestCashTrxnDeleteParameter {
    private String parameterName;
    private String table;
}

@Getter
@Setter
public class RequestCashTrxnSearchParameter {
    private String parameterName;
    private Boolean likeSearch;
    private String table;

}


@Getter
@Setter
public class ResponseCashTrxnSearchParameter {
    private List<CashTrxnParameterDTO> cashTrxnParameterDTOList;
}

@Getter
@Setter
public class CashTrxnParameterDTO {

    private String parameterName;
    private String description;
    private String value;
    private Date   startDate;
    private Date   expireDate;
    private String dataType;

}

