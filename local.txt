@Service
public class CustomerNotificationService implements ICustomerNotificationService {
    private AccountClient accountClient;

    @Autowired
    public CustomerNotificationService(AccountClient accountClient) {
        this.accountClient = accountClient;
    }

    @Override
    public CustomerNotificationDTO getParametersForParcek(CashTransactionDTO cashTransactionDTO,
            List<CashTransactionDetailDTO> cashTransactionDetailDTOList) {
        CustomerNotificationDTO customerNotificationDTO = new CustomerNotificationDTO();

        ResponseBalanceInfo balanceInfo = null;
        try {
            ResponseEntity<ResponseBalanceInfo> responseBalanceInfo = accountClient
                    .getBalanceInfo(cashTransactionDetailDTOList.get(0).getAccountNo(), Boolean.FALSE);
            if (responseBalanceInfo != null && responseBalanceInfo.getBody() != null) {
                balanceInfo = responseBalanceInfo.getBody();
            }
        } catch (MicroException e) {
            // Handle exception
        }

        List<TransactionDetails> transactionDetailsList = getTransactionDetail(cashTransactionDTO,
                cashTransactionDetailDTOList, balanceInfo);
        TransactionHeader transactionHeader = getTransactionHeaders(cashTransactionDTO, cashTransactionDetailDTOList);
        customerNotificationDTO.setTransactionHeader(transactionHeader);
        customerNotificationDTO.setTransactionDetails(transactionDetailsList);

        return customerNotificationDTO;
    }

    private List<TransactionDetails> getTransactionDetail(CashTransactionDTO cashTransactionDTO,
            List<CashTransactionDetailDTO> cashTransactionDetailDTOList, ResponseBalanceInfo balanceInfo) {
        List<TransactionDetails> transactionDetailsList = new ArrayList<>();

        // Add fixed transaction details
        addFixedTransactionDetails(transactionDetailsList, cashTransactionDTO, cashTransactionDetailDTOList);

        // Calculate amountText and isKgvIncluded
        AmountCalculationResult amountResult = calculateAmountTextAndIsKgvIncluded(cashTransactionDetailDTOList);

        // Add amountText
        TransactionDetails transactionDetail = new TransactionDetails();
        transactionDetail.setTransactionId(cashTransactionDetailDTOList.get(0).getTransactionId());
        transactionDetail.setParameterName("amountText");
        transactionDetail.setParameterValue(amountResult.getAmountText());
        transactionDetailsList.add(transactionDetail);

        // Add availableBalance
        transactionDetail = new TransactionDetails();
        transactionDetail.setTransactionId(cashTransactionDetailDTOList.get(0).getTransactionId());
        transactionDetail.setParameterName("availableBalance");
        transactionDetail.setParameterValue(balanceInfo.getBalanceDTO().getAvailableBalance());
        transactionDetailsList.add(transactionDetail);

        // Add totalBalance
        transactionDetail = new TransactionDetails();
        transactionDetail.setTransactionId(cashTransactionDetailDTOList.get(0).getTransactionId());
        transactionDetail.setParameterName("totalBalance");
        transactionDetail.setParameterValue(balanceInfo.getBalanceDTO().getOverdraftBalance().toString());
        transactionDetailsList.add(transactionDetail);

        // Add IsTaxIncluded
        transactionDetail = new TransactionDetails();
        transactionDetail.setTransactionId(cashTransactionDetailDTOList.get(0).getTransactionId());
        transactionDetail.setParameterName("IsTaxIncluded");
        transactionDetail.setParameterValue(amountResult.getIsKgvIncluded().toString());
        transactionDetailsList.add(transactionDetail);

        return transactionDetailsList;
    }

    private void addFixedTransactionDetails(List<TransactionDetails> transactionDetailsList,
            CashTransactionDTO cashTransactionDTO, List<CashTransactionDetailDTO> cashTransactionDetailDTOList) {
        TransactionDetails transactionDetail;

        transactionDetail = createTransactionDetail(cashTransactionDetailDTOList.get(0).getTransactionId(),
                "IsFlexibleAccount",
                cashTransactionDetailDTOList.get(0).getCashTransactionStoredRequest().getCheckedFlexibleAccount()
                        .toString());
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail(cashTransactionDetailDTOList.get(0).getTransactionId(),
                "customerName", null);
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail(cashTransactionDetailDTOList.get(0).getTransactionId(),
                "accountCurrency", cashTransactionDetailDTOList.get(0).getAccountCurrency());
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail(cashTransactionDetailDTOList.get(0).getTransactionId(), "iban",
                null); // Account service will provide this
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail(cashTransactionDetailDTOList.get(0).getTransactionId(),
                "transactionDate", cashTransactionDTO.getCreateDate().toString());
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail(cashTransactionDetailDTOList.get(0).getTransactionId(),
                "transactionTime", null); // Likely in HH:mm format
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail(cashTransactionDetailDTOList.get(0).getTransactionId(),
                "branchCode", cashTransactionDTO.getBranchCode());
        transactionDetailsList.add(transactionDetail);
    }

    private TransactionDetails createTransactionDetail(String transactionId, String parameterName,
            String parameterValue) {
        TransactionDetails transactionDetail = new TransactionDetails();
        transactionDetail.setTransactionId(transactionId);
        transactionDetail.setParameterName(parameterName);
        transactionDetail.setParameterValue(parameterValue);
        return transactionDetail;
    }

    private AmountCalculationResult calculateAmountTextAndIsKgvIncluded(
            List<CashTransactionDetailDTO> cashTransactionDetailDTOList) {
        String amountText = "";
        Boolean isKgvIncluded = Boolean.FALSE;
        BigDecimal totalAmount = calculateTotalAmount(cashTransactionDetailDTOList);
        CashTransactionDetailDTO firstDetailDTO = cashTransactionDetailDTOList.get(0);

        if (shouldCalculateAmountText(firstDetailDTO)) {
            BigDecimal commissionAmount = calculateCommissionAmount(cashTransactionDetailDTOList);

            if (isCurrencyEqualToAccountCurrency(firstDetailDTO)) {
                amountText = calculateAmountTextForEqualCurrency(totalAmount, commissionAmount, firstDetailDTO);
            } else if (hasKmvAmountGreaterThanZero(firstDetailDTO)) {
                isKgvIncluded = Boolean.TRUE;
                amountText = calculateAmountTextForKmvAmount(totalAmount, firstDetailDTO);
            } else {
                amountText = calculateDefaultAmountText(totalAmount, firstDetailDTO);

                if (isCurrencyEqualToAccountCurrency(firstDetailDTO)) {
                    amountText += " " + firstDetailDTO.getAccountCurrency();
                } else if (hasKmvAmountGreaterThanZero(firstDetailDTO)) {
                    isKgvIncluded = Boolean.TRUE;
                    amountText = calculateAmountTextForKmvAmount(totalAmount, firstDetailDTO);
                }
            }
        }

        return new AmountCalculationResult(amountText, isKgvIncluded);
    }

    private boolean shouldCalculateAmountText(CashTransactionDetailDTO detailDTO) {
        return hasCommissionAmount(detailDTO) && isCommissionNotTakenFromTransactionAmount(detailDTO);
    }

    private BigDecimal calculateTotalAmount(List<CashTransactionDetailDTO> cashTransactionDetailDTOList) {
        BigDecimal totalAmount = BigDecimal.ZERO;
        for (CashTransactionDetailDTO detailDTO : cashTransactionDetailDTOList) {
            totalAmount = totalAmount.add(detailDTO.getAmount());
        }
        return totalAmount;
    }

    private BigDecimal calculateCommissionAmount(List<CashTransactionDetailDTO> cashTransactionDetailDTOList) {
        BigDecimal commissionAmount = BigDecimal.ZERO;
        for (CashTransactionDetailDTO detailDTO : cashTransactionDetailDTOList) {
            if (detailDTO.getCommissionAmount() != null) {
                commissionAmount = commissionAmount.add(detailDTO.getCommissionAmount());
            }
        }
        return commissionAmount;
    }

    private String calculateAmountTextForEqualCurrency(BigDecimal totalAmount, BigDecimal commissionAmount,
            CashTransactionDetailDTO detailDTO) {
        String amountText = formatCurrency(totalAmount, "#,##") + " " + detailDTO.getCurrency();
        amountText += " " + formatCurrency(commissionAmount, "#,##") + detailDTO.getCurrency();
        return amountText;
    }

    private String calculateAmountTextForKmvAmount(BigDecimal totalAmount, CashTransactionDetailDTO detailDTO) {
        return totalAmount + " " + detailDTO.getCurrency() + NotificationConstants.NOTIFICATION_EQUIVALENT
                + detailDTO.getKmvAmount() + detailDTO.getCurrency();
    }

    private String calculateDefaultAmountText(BigDecimal totalAmount, CashTransactionDetailDTO detailDTO) {
        return formatCurrency(totalAmount, "#,##");
    }

    private boolean hasCommissionAmount(CashTransactionDetailDTO detailDTO) {
        return detailDTO.getCommissionAmount() != null && detailDTO.getCommissionAmount().compareTo(BigDecimal.ZERO) > 0;
    }

    private boolean isCommissionNotTakenFromTransactionAmount(CashTransactionDetailDTO detailDTO) {
        return !Boolean.TRUE
                .equals(detailDTO.getCashTransactionStoredRequest().getTakeCommissionFromTransactionAmount());
    }

    private boolean isCurrencyEqualToAccountCurrency(CashTransactionDetailDTO detailDTO) {
        return detailDTO.getCurrency().equals(detailDTO.getAccountCurrency());
    }

    private boolean hasKmvAmountGreaterThanZero(CashTransactionDetailDTO detailDTO) {
        return detailDTO.getKmvAmount() != null && detailDTO.getKmvAmount().compareTo(BigDecimal.ZERO) > 0;
    }

    private TransactionHeader getTransactionHeaders(CashTransactionDTO cashTransactionDTO,
            List<CashTransactionDetailDTO> cashTransactionDetailDTOList) {
        TransactionHeader transactionHeader = new TransactionHeader();
        transactionHeader.setClientNo(cashTransactionDetailDTOList.get(0).getCashTransactionStoredRequest()
                .getClientInfo().getClientNo());
        transactionHeader.setCreatedBy(cashTransactionDTO.getCreatedBy());
        transactionHeader.setCreateDate(cashTransactionDTO.getCreateDate());
        transactionHeader.setUpdateDate(cashTransactionDTO.getUpdateDate());
        transactionHeader.setUpdatedBy(cashTransactionDTO.getUpdatedBy());
        transactionHeader.setJobCode(NotificationConstants.PARCEK_NOTIFICATION_SHORTNAME);
        return transactionHeader;
    }

    private String formatCurrency(BigDecimal number, String format) {
        Locale currentLocale = new Locale("en", "US");
        DecimalFormatSymbols unusualSymbols = new DecimalFormatSymbols(currentLocale);
        DecimalFormat formatter = new DecimalFormat(format, unusualSymbols);
        return formatter.format(number).replace(".", "#").replace(",", ".").replace("#", ",");
    }

    private static class AmountCalculationResult {
        private String amountText;
        private Boolean isKgvIncluded;

        public AmountCalculationResult(String amountText, Boolean isKgvIncluded) {
            this.amountText = amountText;
            this.isKgvIncluded = isKgvIncluded;
        }

        public String getAmountText() {
            return amountText;
        }

        public Boolean getIsKgvIncluded() {
            return isKgvIncluded;
        }
    }
}
