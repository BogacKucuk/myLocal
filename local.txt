package com.ykb.corebanking.vault.money.deposit.withdraw.bff.service.impl;

import com.ykb.corebanking.vault.money.deposit.withdraw.bff.client.BbtBranchOpsWorkflowClient;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.client.SmartControlClient;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.dto.*;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.exception.SmartControlException;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.request.RequestBranchOperationControlResult;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.request.RequestSmartControlDocuments;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@ExtendWith(SpringExtension.class)
class SmartControlServiceTest {

    @InjectMocks
    SmartControlService smartControlService;

    @Mock
    SmartControlClient smartControlClient;

    @Mock
    BbtBranchOpsWorkflowClient bbtBranchOpsWorkflowClient;

    /**
     * 1) BBT dokümanları boş ise -> "BBT dokümanları bulunamadı." exception
     */
    @Test
    void getSmartControlDocuments_ShouldThrowException_WhenBBTDocsNotFound() {
        // Arrange
        RequestSmartControlDocuments request = new RequestSmartControlDocuments();
        request.setGroupId("123");

        // BBT tarafı boş data döndürsün
        ResultBBTListDocumentControlResultDTO bbtResponse = new ResultBBTListDocumentControlResultDTO();
        bbtResponse.setData(Collections.emptyList()); // --> Boş liste

        when(bbtBranchOpsWorkflowClient.getBBTBranchOperationControlResults(any(RequestBranchOperationControlResult.class)))
                .thenReturn(bbtResponse);

        // Act & Assert
        SmartControlException exception = assertThrows(SmartControlException.class, () -> {
            smartControlService.getSmartControlDocuments(request);
        });

        assertEquals("BBT dokümanları bulunamadı.", exception.getMessage());
    }

    /**
     * 2) SmartControlClient null yanıt verirse -> "Gerekli dokümanlar bulunamadı." exception
     */
    @Test
    void getSmartControlDocuments_ShouldThrowException_WhenClientResponseIsNull() {
        // Arrange
        RequestSmartControlDocuments request = new RequestSmartControlDocuments();
        request.setGroupId("123");

        // BBT tarafında en az bir doküman döndürelim ki "BBT dokümanları bulunamadı." devre dışı kalsın
        ResultBBTListDocumentControlResultDTO bbtResponse = createMockBBTResponse(false);
        when(bbtBranchOpsWorkflowClient.getBBTBranchOperationControlResults(any(RequestBranchOperationControlResult.class)))
                .thenReturn(bbtResponse);

        // SmartControlClient null dönüyor
        when(smartControlClient.getSmartControlDocuments(any(RequestSmartControlDocuments.class)))
                .thenReturn(null);

        // Act & Assert
        SmartControlException exception = assertThrows(SmartControlException.class, () -> {
            smartControlService.getSmartControlDocuments(request);
        });

        assertEquals("Gerekli dokümanlar bulunamadı.", exception.getMessage());
    }

    /**
     * 3) BBT ve SmartControlClient'tan geçerli veri dönüyorsa -> Data başarıyla döner
     *    (BBT'de child yok).
     */
    @Test
    void getSmartControlDocuments_ShouldReturnData_WhenAllDataIsValid_NoChildren() throws SmartControlException {
        // Arrange
        RequestSmartControlDocuments request = new RequestSmartControlDocuments();
        request.setGroupId("123");

        // BBT cevabı - child eklenmeyecek (resultDescriptionDTO boş)
        ResultBBTListDocumentControlResultDTO bbtResponse = createMockBBTResponse(false);
        when(bbtBranchOpsWorkflowClient.getBBTBranchOperationControlResults(any(RequestBranchOperationControlResult.class)))
                .thenReturn(bbtResponse);

        // SmartControl cevabı
        CashTrxnParameterDTO cashTrxnParameterDTO = new CashTrxnParameterDTO();
        cashTrxnParameterDTO.setParameterName("paramKey");
        cashTrxnParameterDTO.setValue("paramValue;paramDescription");

        ResponseEntity<List<CashTrxnParameterDTO>> clientResponse =
                ResponseEntity.ok(Collections.singletonList(cashTrxnParameterDTO));

        when(smartControlClient.getSmartControlDocuments(any(RequestSmartControlDocuments.class)))
                .thenReturn(clientResponse);

        // Act
        SmartControlDataDTO result = smartControlService.getSmartControlDocuments(request);

        // Assert
        assertNotNull(result, "Result null olmamalı");
        assertNotNull(result.getBbtDocuments(), "BBT doküman listesi null olmamalı");
        assertNotNull(result.getNotExistsDocs(), "NotExists doküman listesi null olmamalı");

        // BBT'den tek doküman dönmesi bekleniyor
        assertEquals(1, result.getBbtDocuments().size());
        SmartControlDocumentDTO bbtDoc = result.getBbtDocuments().get(0);
        assertEquals("Vekaletname", bbtDoc.getParameterName());
        // Serviste default false set ediliyor
        assertFalse(bbtDoc.getIsExist(), "isExist default false olmalı");
        // Child doküman yok (çünkü resultDescriptionDTO boş set edildi)
        assertNull(bbtDoc.getChildren(), "Child doküman oluşturulmadı, null veya empty gelebilir");

        // SmartControl tarafında 1 doküman
        assertEquals(1, result.getNotExistsDocs().size());
        SmartControlDocumentDTO notExistDoc = result.getNotExistsDocs().get(0);
        assertEquals("paramValue", notExistDoc.getParameterName());
        assertEquals("paramDescription", notExistDoc.getDescription());
        assertFalse(notExistDoc.getIsExist());
    }

    /**
     * 4) BBT veri dolu + children (resultDescriptionDTO) dolu
     */
    @Test
    void getSmartControlDocuments_ShouldReturnData_WhenAllDataIsValid_WithChildren() throws SmartControlException {
        // Arrange
        RequestSmartControlDocuments request = new RequestSmartControlDocuments();
        request.setGroupId("123");

        // BBT cevabında child eklensin
        ResultBBTListDocumentControlResultDTO bbtResponse = createMockBBTResponse(true);
        when(bbtBranchOpsWorkflowClient.getBBTBranchOperationControlResults(any(RequestBranchOperationControlResult.class)))
                .thenReturn(bbtResponse);

        // SmartControl cevabı
        CashTrxnParameterDTO cashTrxnParameterDTO = new CashTrxnParameterDTO();
        cashTrxnParameterDTO.setParameterName("paramKey");
        cashTrxnParameterDTO.setValue("paramValue;paramDescription");

        ResponseEntity<List<CashTrxnParameterDTO>> clientResponse =
                ResponseEntity.ok(Collections.singletonList(cashTrxnParameterDTO));

        when(smartControlClient.getSmartControlDocuments(any(RequestSmartControlDocuments.class)))
                .thenReturn(clientResponse);

        // Act
        SmartControlDataDTO result = smartControlService.getSmartControlDocuments(request);

        // Assert
        assertNotNull(result);
        assertNotNull(result.getBbtDocuments());
        assertNotNull(result.getNotExistsDocs());

        // BBT'den tek doküman döndü
        assertEquals(1, result.getBbtDocuments().size());
        SmartControlDocumentDTO bbtDoc = result.getBbtDocuments().get(0);
        assertEquals("Vekaletname", bbtDoc.getParameterName());
        // Children listesi dolu
        assertNotNull(bbtDoc.getChildren(), "Children null olmamalı");
        assertEquals(1, bbtDoc.getChildren().size(), "Tek child bekleniyor");
        
        SmartControlDocumentDTO child = bbtDoc.getChildren().get(0);
        assertEquals("CHILD_CONTROL_TYPE", child.getParameterName());
        assertEquals("Child message", child.getDescription());
        assertFalse(child.getIsExist());

        // SmartControl doküman kontrolü
        assertEquals(1, result.getNotExistsDocs().size());
        SmartControlDocumentDTO notExistDoc = result.getNotExistsDocs().get(0);
        assertEquals("paramValue", notExistDoc.getParameterName());
        assertEquals("paramDescription", notExistDoc.getDescription());
        assertFalse(notExistDoc.getIsExist());
    }

    /**
     * BBT tarafı için sahte (mock) veri oluşturuyoruz.
     * 'withChildren' parametresi true ise resultDescriptionDTO'da 1 child ekler.
     */
    private ResultBBTListDocumentControlResultDTO createMockBBTResponse(boolean withChildren) {
        ResultBBTListDocumentControlResultDTO bbtResponse = new ResultBBTListDocumentControlResultDTO();
        bbtResponse.setSuccess(Boolean.TRUE);
        bbtResponse.setMessage("Message");

        DocumentControlResultDTO doc = new DocumentControlResultDTO();
        doc.setDocumentName("Vekaletname");
        doc.setRemoteDocumentId(999L);

        // NullPointerException'ı önlemek için asgari boş liste set edelim.
        if (withChildren) {
            ResultDescriptionDTO childDesc = new ResultDescriptionDTO();
            childDesc.setControlType("CHILD_CONTROL_TYPE");
            childDesc.setControlMessage("Child message");
            doc.setResultDescriptionDTO(Collections.singletonList(childDesc));
        } else {
            // resultDescriptionDTO boş liste
            doc.setResultDescriptionDTO(new ArrayList<>());
        }

        bbtResponse.setData(Collections.singletonList(doc));
        return bbtResponse;
    }
}
