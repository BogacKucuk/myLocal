package com.ykb.corebanking.safedepositbox.safedepositboxbe.batch.config;

import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.batch.core.launch.support.SimpleJobLauncher;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.transaction.PlatformTransactionManager;

/**
 * Bu konfigürasyon sınıfı, Spring Batch'in JobLauncher bean’ini 
 * "springBatchJobLauncher" ismiyle kayıt eder.
 * Böylece "jobLauncher" bean'ine sahip user-defined class ile 
 * çakışma yaşamaz.
 */
@Configuration
public class BatchLauncherConfiguration {

    /**
     * Spring Batch JobLauncher'ını “springBatchJobLauncher” adında 
     * kaydediyoruz. 
     */
    @Bean(name = "springBatchJobLauncher")
    public JobLauncher springBatchJobLauncher(JobRepository jobRepository,
                                              PlatformTransactionManager transactionManager) throws Exception {
        SimpleJobLauncher launcher = new SimpleJobLauncher();
        launcher.setJobRepository(jobRepository);
        // İsteğe bağlı concurrency ayarları
        launcher.afterPropertiesSet();
        return launcher;
    }
}





package com.ykb.corebanking.safedepositbox.safedepositboxbe;

import com.ykb.corebanking.safedepositbox.safedepositboxbe.batch.common.CustomJobParameters;
import lombok.extern.slf4j.Slf4j;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobParametersBuilder;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.actuate.autoconfigure.security.servlet.ManagementWebSecurityAutoConfiguration;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.cloud.openfeign.EnableFeignClients;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.annotation.ComponentScan;

@Slf4j
@SpringBootApplication
@ComponentScan(basePackages = { "com.ykb.corebanking.safedepositbox.safedepositboxbe" })
@EnableCaching
@EnableFeignClients
@EnableDiscoveryClient
@EnableAutoConfiguration(exclude = { SecurityAutoConfiguration.class, ManagementWebSecurityAutoConfiguration.class })
public class SafedepositboxBeApplication {

    public static void main(String[] args) {
        // Eski kodunuz: spring.application.name ayarı
        String name = System.getenv("SPRING_APPLICATION_NAME");
        if (name != null) {
            System.setProperty("spring.application.name", name);
        }

        // Spring Boot context
        ConfigurableApplicationContext ctx = SpringApplication.run(SafedepositboxBeApplication.class, args);

        // Batch argümanı kontrolü
        if (args != null && args.length > 0) {
            String jobName = args[0];  // "dummyParameterInsertJob" vb.
            int exitCode = 0;
            try {
                // Kalan parametreleri parse edelim (key=value) -> CustomJobParameters
                CustomJobParameters<String,Object> customParams = ctx.getBean(CustomJobParameters.class);
                for (int i = 1; i < args.length; i++) {
                    String[] kv = args[i].split("=");
                    if (kv.length == 2) {
                        customParams.addParameter(kv[0], kv[1]);
                    }
                }

                // FARK: Artık springBatchJobLauncher bean'ini alıyoruz
                JobLauncher jobLauncher = ctx.getBean("springBatchJobLauncher", JobLauncher.class);

                // Hangi job tetiklenecek?
                Job job = ctx.getBean(jobName, Job.class);

                // Job’i parametre vererek çalıştır
                JobExecution execution = jobLauncher.run(
                        job,
                        new JobParametersBuilder()
                                .addLong("startTime", System.currentTimeMillis())
                                .toJobParameters()
                );

                // Durum kontrolü
                if (!ExitStatus.COMPLETED.equals(execution.getExitStatus())) {
                    exitCode = 1;
                }
            } catch (Exception e) {
                log.error("Batch run failed with exception", e);
                exitCode = 1;
            } finally {
                ctx.close();
                System.exit(exitCode);
            }
        }
        // Argüman yoksa normal application flow
    }
}
