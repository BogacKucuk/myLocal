@Test
void testCreateAndSaveOperationInfo_MultiplePersons() {
    // Context mock'larÄ±
    when(contextBuilder.getContext()).thenReturn(serviceContext);
    when(contextBuilder.getContext().getGuid()).thenReturn("test-guid-123");
    when(serviceContext.getUser()).thenReturn(user);

    // Account balance mock
    Money usableBalance = Money.newBuilder()
            .setUnits(2000)
            .setNanos(0)
            .build();
    when(accountsBusinessService.getAccountDetail(any(Integer.class), any(Integer.class)))
            .thenReturn(createMockAccountBalance(usableBalance, "TEST"));

    // Branch service mock
    BranchServiceResponseDto branchResponse = new BranchServiceResponseDto();
    branchResponse.setBranchType("T");
    when(branchService.getBranchDetail(any(Integer.class))).thenReturn(branchResponse);

    // Parameter service mock
    ResponseParameterList responseParameterList = new ResponseParameterList();
    ResponseReadParameter parameter = new ResponseReadParameter();
    parameter.setPrmAttributeName("PCMUHASEBE");
    parameter.setPrmValue("TEST_CODE");
    responseParameterList.setParameterList(List.of(parameter));
    when(parameterService.getParameterList(any())).thenReturn(responseParameterList);

    // Accounting service mock
    AccountingResponseDto mockAccountingResponse = new AccountingResponseDto();
    mockAccountingResponse.setFinancialServiceGuid("test-guid-123");
    mockAccountingResponse.setVoucherNum(12345);
    mockAccountingResponse.setTxnReferenceId("TXN-REF-123");
    when(acountingTrxManagement.createFinancialTransaction(any())).thenReturn(mockAccountingResponse);

    // Receipt service mock
    CreateReceiptResponseDto mockReceiptResponse = new CreateReceiptResponseDto();
    CreateReceiptTransactionDto mockReceiptTransaction = new CreateReceiptTransactionDto();
    mockReceiptTransaction.setInstanceId("receipt-instance-123");
    mockReceiptTransaction.setReferenceId1("receipt-ref-123");
    mockReceiptResponse.setCreateReceiptTransaction(mockReceiptTransaction);
    when(receiptService.createReceipt(any())).thenReturn(mockReceiptResponse);

    // Arrange
    TrnxCompleteWithdrawalRequestDto requestDto = createMultiplePersonRequestDto();

    when(transactionDao.saveMoneyDepositTransaction(any(TransactionEntity.class)))
            .thenReturn("2025-08-20 20:52:19.507005");
    when(moneyTrnxOperationInfoDao.save(any(MoneyTrnxOperationInfoEntity.class)))
            .thenReturn(new MoneyTrnxOperationInfoEntity());

    // Act
    transactionService.trnxCompleteWithdrawal(requestDto);

    // Assert
    verify(moneyTrnxOperationInfoDao, times(2)).save(any(MoneyTrnxOperationInfoEntity.class));

    ArgumentCaptor<MoneyTrnxOperationInfoEntity> captor =
            ArgumentCaptor.forClass(MoneyTrnxOperationInfoEntity.class);
    verify(moneyTrnxOperationInfoDao, times(2)).save(captor.capture());

    List<MoneyTrnxOperationInfoEntity> savedEntities = captor.getAllValues();
    assertEquals(2, savedEntities.size());

    assertEquals(Integer.valueOf(12345), savedEntities.get(0).getCustomerNum());
    assertEquals("ACTIVE", savedEntities.get(0).getStatusCode());

    assertEquals(Integer.valueOf(67890), savedEntities.get(1).getCustomerNum());
    assertEquals("PENDING", savedEntities.get(1).getStatusCode());
}
