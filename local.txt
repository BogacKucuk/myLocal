import * as popupModule from '@efa-web-components/efa-popup';
import * as apiModule from '@ark-technical-modules/ark-api-invoker';
// … diğer import’lar …

describe('MainMoneyWithdrawComponent Component', () => {
  let sandbox: sinon.SinonSandbox;
  let invokerStub: sinon.SinonStub;
  let popupStub: sinon.SinonStub;

  before(async () => {
    await arkMultiLanguage.init('/locales/');
    sandbox = sinon.createSandbox();

    invokerStub = sandbox.stub(arkInvoker, 'callMethod');
    // 1) getOperationCode stub
    invokerStub
      .withArgs(
        HttpMethod.POST,
        sinon.match.has('url', getAppUrlForInvoker('getOperationCode'))
      )
      .resolves(serverOpCodeResponse);

    // 2) getLastTransactions stub
    const lastTxMock = [ /* yukarıdaki gibi bir obje */ ];
    const serverLastTxResponse = buildMockResponse({ transactions: lastTxMock });
    invokerStub
      .withArgs(
        HttpMethod.POST,
        sinon.match.has('url', getAppUrlForInvoker('getLastTransactions'))
      )
      .resolves(serverLastTxResponse);

    // 3) EfaPopup stub
    popupStub = sinon
      .stub(popupModule, 'default')
      .callsFake(({ visible, 'data-testid': tId, children }) =>
        visible ? <div data-testid={tId}>{children}</div> : null
      );
  });

  beforeEach(() => {
    resetStoreCache();
    render(<MainMoneyWithdrawComponentWithRoute />);
  });

  afterEach(() => {
    sandbox.restore();
    popupStub.restore();
  });

  it('last trx anchor clicked on MainMoneyWithdrawComponent', async () => {
    const anchor = await screen.findByTestId('last-transaction-link');
    fireEvent.click(anchor);

    // Popup’un gelmesini bekle:
    const popup = await screen.findByTestId('last-transaction-popup');
    expect(popup).to.exist;

    // Kapanış butonuna tıkla:
    const closeBtn = await screen.findByTestId('last-transactions-closeBtn');
    fireEvent.click(closeBtn);
  });
});
