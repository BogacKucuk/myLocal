package com.garantibbva.depositwithdrawalmngmt.moneywithdrawbusiness.service.impl;

import com.garantibbva.depositwithdrawalmngmt.moneywithdrawbusiness.service.contract.model.request.RequestParameterList;
import com.garantibbva.depositwithdrawalmngmt.moneywithdrawbusiness.service.contract.model.request.RequestReadParameter;
import com.garantibbva.depositwithdrawalmngmt.moneywithdrawbusiness.service.contract.model.response.ResponseParameterList;
import com.garantibbva.depositwithdrawalmngmt.moneywithdrawbusiness.service.contract.model.response.ResponseReadParameter;
import com.garantibbva.parametermanagement.parameterreadbusiness.proto.ParameterReadBusinessGrpcServiceGrpc.ParameterReadBusinessGrpcServiceBlockingStub;
import com.garantibbva.parametermanagement.parameterreadbusiness.proto.ParameterReadBusinessProto;
import com.google.protobuf.Timestamp;
import io.grpc.Status;
import io.grpc.StatusRuntimeException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ParameterServiceImplTest {

    @Mock
    private ParameterReadBusinessGrpcServiceBlockingStub serviceBlockingStub;

    private ParameterServiceImpl parameterService;

    private RequestReadParameter requestReadParameter;
    private RequestParameterList requestParameterList;
    private ParameterReadBusinessProto.ParameterResponse grpcParameterResponse;
    private ParameterReadBusinessProto.ParameterResponseList grpcParameterResponseList;

    @BeforeEach
    void setUp() {
        parameterService = new ParameterServiceImpl(serviceBlockingStub);

        // Setup test data for readParameter
        requestReadParameter = new RequestReadParameter();
        requestReadParameter.setLanguageCode("TR");
        requestReadParameter.setCompanyCode("001");
        requestReadParameter.setCompanyNum(1);
        requestReadParameter.setPrmGroupCode("GROUP1");
        requestReadParameter.setPrmAttributeName("ATTR1");
        requestReadParameter.setPrmCode("CODE1");
        requestReadParameter.setPrmValue("VALUE1");

        // Setup gRPC response
        grpcParameterResponse = ParameterReadBusinessProto.ParameterResponse.newBuilder()
                .setCompanyCode("001")
                .setCompanyNum(1)
                .setPrmGroupCode("GROUP1")
                .setPrmAttributeName("ATTR1")
                .setPrmCode("CODE1")
                .setPrmValue("VALUE1")
                .setAdditionalInfo("Additional Info")
                .setDescription("Description")
                .setOrderNum(1)
                .setCreateUserId("USER1")
                .setUpdateUserId("USER2")
                .build();

        // Setup test data for getParameterList
        requestParameterList = new RequestParameterList();
        requestParameterList.setLanguageCode("TR");
        requestParameterList.setCompanyCode("001");
        requestParameterList.setCompanyNum(1);
        requestParameterList.setPrmGroupCode("GROUP1");
        requestParameterList.setPrmAttributeName("ATTR1");
        requestParameterList.setPrmCode("CODE1");
        requestParameterList.setPrmValue("VALUE1");
        requestParameterList.setAdditionalInfo("Info");

        grpcParameterResponseList = ParameterReadBusinessProto.ParameterResponseList.newBuilder()
                .addParameters(grpcParameterResponse)
                .build();
    }

    @Test
    void testReadParameter_Success() {
        // Given
        when(serviceBlockingStub.readParameter(any(ParameterReadBusinessProto.ReadParameterRequest.class)))
                .thenReturn(grpcParameterResponse);

        // When
        ResponseReadParameter response = parameterService.readParameter(requestReadParameter);

        // Then
        assertNotNull(response);
        assertEquals("001", response.getCompanyCode());
        assertEquals(1, response.getCompanyNum());
        assertEquals("GROUP1", response.getPrmGroupCode());
        assertEquals("ATTR1", response.getPrmAttributeName());
        assertEquals("CODE1", response.getPrmCode());
        assertEquals("VALUE1", response.getPrmValue());
        assertEquals("Additional Info", response.getAdditionalInfo());
        assertEquals("Description", response.getDescription());
        assertEquals(1, response.getOrderNum());
        assertEquals("USER1", response.getCreateUserId());
        assertEquals("USER2", response.getUpdateUserId());

        verify(serviceBlockingStub).readParameter(any(ParameterReadBusinessProto.ReadParameterRequest.class));
    }

    @Test
    void testReadParameter_NullRequest() {
        // Given
        RequestReadParameter nullRequest = null;

        // When & Then
        assertThrows(NullPointerException.class, () -> {
            parameterService.readParameter(nullRequest);
        });
    }

    @Test
    void testReadParameter_GrpcException() {
        // Given
        StatusRuntimeException grpcException = new StatusRuntimeException(Status.INTERNAL.withDescription("gRPC error"));
        when(serviceBlockingStub.readParameter(any(ParameterReadBusinessProto.ReadParameterRequest.class)))
                .thenThrow(grpcException);

        // When & Then
        StatusRuntimeException thrown = assertThrows(StatusRuntimeException.class, () -> {
            parameterService.readParameter(requestReadParameter);
        });
        
        assertEquals(Status.INTERNAL.getCode(), thrown.getStatus().getCode());
        assertEquals("gRPC error", thrown.getStatus().getDescription());
    }

    @Test
    void testReadParameter_EmptyResponse() {
        // Given
        ParameterReadBusinessProto.ParameterResponse emptyResponse = 
                ParameterReadBusinessProto.ParameterResponse.newBuilder().build();
        
        when(serviceBlockingStub.readParameter(any(ParameterReadBusinessProto.ReadParameterRequest.class)))
                .thenReturn(emptyResponse);

        // When
        ResponseReadParameter response = parameterService.readParameter(requestReadParameter);

        // Then
        assertNotNull(response);
        // Proto3 default values
        assertEquals("", response.getCompanyCode());
        assertEquals(0, response.getCompanyNum());
        assertEquals("", response.getPrmGroupCode());
    }

    @Test
    void testGetParameterList_Success() {
        // Given
        when(serviceBlockingStub.listParameter(any(ParameterReadBusinessProto.ListParameterRequest.class)))
                .thenReturn(grpcParameterResponseList);

        // When
        ResponseParameterList response = parameterService.getParameterList(requestParameterList);

        // Then
        assertNotNull(response);
        assertNotNull(response.getParameterList());
        assertEquals(1, response.getParameterList().size());
        
        ResponseReadParameter param = response.getParameterList().get(0);
        assertEquals("001", param.getCompanyCode());
        assertEquals(1, param.getCompanyNum());
        assertEquals("GROUP1", param.getPrmGroupCode());
        assertEquals("ATTR1", param.getPrmAttributeName());
        assertEquals("CODE1", param.getPrmCode());
        assertEquals("VALUE1", param.getPrmValue());
        
        verify(serviceBlockingStub).listParameter(any(ParameterReadBusinessProto.ListParameterRequest.class));
    }

    @Test
    void testGetParameterList_EmptyList() {
        // Given
        ParameterReadBusinessProto.ParameterResponseList emptyList = 
                ParameterReadBusinessProto.ParameterResponseList.newBuilder().build();
        
        when(serviceBlockingStub.listParameter(any(ParameterReadBusinessProto.ListParameterRequest.class)))
                .thenReturn(emptyList);

        // When
        ResponseParameterList response = parameterService.getParameterList(requestParameterList);

        // Then
        assertNotNull(response);
        assertNotNull(response.getParameterList());
        assertTrue(response.getParameterList().isEmpty());
        
        verify(serviceBlockingStub).listParameter(any(ParameterReadBusinessProto.ListParameterRequest.class));
    }

    @Test
    void testGetParameterList_MultipleParameters() {
        // Given
        ParameterReadBusinessProto.ParameterResponse param1 = ParameterReadBusinessProto.ParameterResponse.newBuilder()
                .setCompanyCode("001")
                .setPrmCode("CODE1")
                .setPrmValue("VALUE1")
                .setPrmGroupCode("GROUP1")
                .setPrmAttributeName("ATTR1")
                .setCompanyNum(1)
                .build();
        
        ParameterReadBusinessProto.ParameterResponse param2 = ParameterReadBusinessProto.ParameterResponse.newBuilder()
                .setCompanyCode("002")
                .setPrmCode("CODE2")
                .setPrmValue("VALUE2")
                .setPrmGroupCode("GROUP2")
                .setPrmAttributeName("ATTR2")
                .setCompanyNum(2)
                .build();
        
        ParameterReadBusinessProto.ParameterResponseList multipleList = 
                ParameterReadBusinessProto.ParameterResponseList.newBuilder()
                        .addParameters(param1)
                        .addParameters(param2)
                        .build();
        
        when(serviceBlockingStub.listParameter(any(ParameterReadBusinessProto.ListParameterRequest.class)))
                .thenReturn(multipleList);

        // When
        ResponseParameterList response = parameterService.getParameterList(requestParameterList);

        // Then
        assertNotNull(response);
        assertNotNull(response.getParameterList());
        assertEquals(2, response.getParameterList().size());
        
        ResponseReadParameter firstParam = response.getParameterList().get(0);
        assertEquals("001", firstParam.getCompanyCode());
        assertEquals("CODE1", firstParam.getPrmCode());
        assertEquals("VALUE1", firstParam.getPrmValue());
        
        ResponseReadParameter secondParam = response.getParameterList().get(1);
        assertEquals("002", secondParam.getCompanyCode());
        assertEquals("CODE2", secondParam.getPrmCode());
        assertEquals("VALUE2", secondParam.getPrmValue());
        
        verify(serviceBlockingStub).listParameter(any(ParameterReadBusinessProto.ListParameterRequest.class));
    }

    @Test
    void testGetParameterList_GrpcException() {
        // Given
        StatusRuntimeException grpcException = new StatusRuntimeException(Status.UNAVAILABLE.withDescription("Service unavailable"));
        when(serviceBlockingStub.listParameter(any(ParameterReadBusinessProto.ListParameterRequest.class)))
                .thenThrow(grpcException);

        // When & Then
        StatusRuntimeException thrown = assertThrows(StatusRuntimeException.class, () -> {
            parameterService.getParameterList(requestParameterList);
        });
        
        assertEquals(Status.UNAVAILABLE.getCode(), thrown.getStatus().getCode());
        assertEquals("Service unavailable", thrown.getStatus().getDescription());
    }

    @Test
    void testGetParameterList_NullRequest() {
        // Given
        RequestParameterList nullRequest = null;

        // When & Then
        assertThrows(NullPointerException.class, () -> {
            parameterService.getParameterList(nullRequest);
        });
    }

    @Test
    void testConstructor() {
        // Given
        ParameterReadBusinessGrpcServiceBlockingStub mockStub = 
                mock(ParameterReadBusinessGrpcServiceBlockingStub.class);

        // When
        ParameterServiceImpl service = new ParameterServiceImpl(mockStub);

        // Then
        assertNotNull(service);
    }

    @Test
    void testReadParameter_TimeoutException() {
        // Given
        StatusRuntimeException timeoutException = new StatusRuntimeException(Status.DEADLINE_EXCEEDED.withDescription("Timeout"));
        when(serviceBlockingStub.readParameter(any(ParameterReadBusinessProto.ReadParameterRequest.class)))
                .thenThrow(timeoutException);

        // When & Then
        StatusRuntimeException thrown = assertThrows(StatusRuntimeException.class, () -> {
            parameterService.readParameter(requestReadParameter);
        });
        
        assertEquals(Status.DEADLINE_EXCEEDED.getCode(), thrown.getStatus().getCode());
    }

    @Test
    void testGetParameterList_TimeoutException() {
        // Given
        StatusRuntimeException timeoutException = new StatusRuntimeException(Status.DEADLINE_EXCEEDED.withDescription("Timeout"));
        when(serviceBlockingStub.listParameter(any(ParameterReadBusinessProto.ListParameterRequest.class)))
                .thenThrow(timeoutException);

        // When & Then
        StatusRuntimeException thrown = assertThrows(StatusRuntimeException.class, () -> {
            parameterService.getParameterList(requestParameterList);
        });
        
        assertEquals(Status.DEADLINE_EXCEEDED.getCode(), thrown.getStatus().getCode());
    }

    @Test
    void testReadParameter_WithTimestamp() {
        // Given
        long seconds = System.currentTimeMillis() / 1000;
        Timestamp timestamp = Timestamp.newBuilder()
                .setSeconds(seconds)
                .setNanos(0)
                .build();
        
        requestReadParameter.setPrmValidDate(timestamp);
        
        ParameterReadBusinessProto.ParameterResponse responseWithTimestamp = 
                ParameterReadBusinessProto.ParameterResponse.newBuilder()
                        .setCompanyCode("001")
                        .setPrmValidDate(timestamp)
                        .setInstanceId(timestamp)
                        .setPrmAttributedId(timestamp)
                        .setPrmDetailId(timestamp)
                        .setReferenceId(timestamp)
                        .build();
        
        when(serviceBlockingStub.readParameter(any(ParameterReadBusinessProto.ReadParameterRequest.class)))
                .thenReturn(responseWithTimestamp);

        // When
        ResponseReadParameter response = parameterService.readParameter(requestReadParameter);

        // Then
        assertNotNull(response);
        assertNotNull(response.getPrmValidDate());
        assertNotNull(response.getInstanceId());
        assertNotNull(response.getPrmAttributedId());
        assertNotNull(response.getPrmDetailId());
        assertNotNull(response.getReferenceId());
    }

    @Test
    void testGetParameterList_WithTimestamp() {
        // Given
        long seconds = System.currentTimeMillis() / 1000;
        Timestamp timestamp = Timestamp.newBuilder()
                .setSeconds(seconds)
                .setNanos(0)
                .build();
        
        requestParameterList.setPrmValidDate(timestamp);
        
        ParameterReadBusinessProto.ParameterResponse paramWithTimestamp = 
                ParameterReadBusinessProto.ParameterResponse.newBuilder()
                        .setCompanyCode("001")
                        .setPrmCode("CODE1")
                        .setPrmValue("VALUE1")
                        .setPrmValidDate(timestamp)
                        .setInstanceId(timestamp)
                        .setPrmAttributedId(timestamp)
                        .setPrmDetailId(timestamp)
                        .setReferenceId(timestamp)
                        .build();
        
        ParameterReadBusinessProto.ParameterResponseList listWithTimestamp = 
                ParameterReadBusinessProto.ParameterResponseList.newBuilder()
                        .addParameters(paramWithTimestamp)
                        .build();
        
        when(serviceBlockingStub.listParameter(any(ParameterReadBusinessProto.ListParameterRequest.class)))
                .thenReturn(listWithTimestamp);

        // When
        ResponseParameterList response = parameterService.getParameterList(requestParameterList);

        // Then
        assertNotNull(response);
        assertNotNull(response.getParameterList());
        assertEquals(1, response.getParameterList().size());
        
        ResponseReadParameter param = response.getParameterList().get(0);
        assertNotNull(param.getPrmValidDate());
        assertNotNull(param.getInstanceId());
        assertNotNull(param.getPrmAttributedId());
        assertNotNull(param.getPrmDetailId());
        assertNotNull(param.getReferenceId());
        
        verify(serviceBlockingStub).listParameter(any(ParameterReadBusinessProto.ListParameterRequest.class));
    }
        // Given
        StatusRuntimeException permissionException = new StatusRuntimeException(Status.PERMISSION_DENIED.withDescription("Access denied"));
        when(serviceBlockingStub.readParameter(any(ParameterReadBusinessProto.ReadParameterRequest.class)))
                .thenThrow(permissionException);

        // When & Then
        StatusRuntimeException thrown = assertThrows(StatusRuntimeException.class, () -> {
            parameterService.readParameter(requestReadParameter);
        });
        
        assertEquals(Status.PERMISSION_DENIED.getCode(), thrown.getStatus().getCode());
        assertEquals("Access denied", thrown.getStatus().getDescription());
    }
}
