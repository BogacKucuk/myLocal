import React, { JSX, useEffect, useMemo, useState } from 'react';
import {
  EfaCollapseDocumentScannerMultiCustomer
} from '@efa-web-components-multi-cust-doc/efa-collapse-document-scanner-multi-customer';
import { useAppSelector } from '../../store';
import { TransactionMaker } from '../../store/slices/transactionSlice';
import {
  DocumentInfo,
  makeDocumentInfoFromCode,
  parseDebitSets,
  toStr
} from '../../utils/DocumentScanner/documentScannerUtils';

// Local tipler
type Person = {
  customerNum: string;
  mernisNum: string;
  taxNum: number;
  docPersonType: string;
  transferableDocClass: string;
};

type DocumentScanInfo = {
  processCode: string;
  processId: string;
  processLevelNum: string;
  processText: string;
  useMaxDisplay: string;
  maxDisplayPerSet: string;
};

type CustomerData = {
  customerNum: string;
  fullName: string;
  documentScannerData: {
    personListJson: Person[];         // iç array (tek Person objesi)
    documentListJson: DocumentInfo[]; // iç array (birden fazla doküman seti olabilir)
    documentScanInfoJson: DocumentScanInfo;
  };
};

const DocumentScannerComponent = (): JSX.Element => {
  // transactionInfo slice
  const { transactionMaker, documentSetDebit, extraDocSetsByCustomer, opCode } =
    useAppSelector((s) => s.transactionInfo);

  // diğer slice: customerInfoReducer — primary müşteri bilgisi
  // Not: İsim acting olsa da burada "primary" müşteri olarak kullanacağız
  const actingCustomerNumberRaw = useAppSelector(
    (state) => state.customerInfoReducer.customerNumber as string | number | undefined
  );
  const primaryCustomerNumber = useMemo(
    () => String(actingCustomerNumberRaw ?? ''),
    [actingCustomerNumberRaw]
  );

  const primaryCustomerTcknRaw = useAppSelector(
    (state) => state.customerInfoReducer.tckn as string | number | undefined
  );
  const primaryCustomerTckn = useMemo(
    () => String(primaryCustomerTcknRaw ?? ''),
    [primaryCustomerTcknRaw]
  );

  // makers: transactionMaker normalize + primary müşteriyi (listede değilse) ekle + duplicate temizle
  const makers = useMemo(() => {
    // normalize
    const normalized = transactionMaker.map((tm: TransactionMaker) => ({
      ...tm,
      customerNumber: toStr(tm.customerNumber),
      mernisNum: toStr(tm.mernisNum),
    }));

    // primary listede mi?
    const exists =
      primaryCustomerNumber !== '' &&
      normalized.some((m) => m.customerNumber === primaryCustomerNumber);

    // yoksa ekle (minimum alanlarla)
    if (!exists && primaryCustomerNumber !== '') {
      normalized.unshift({
        name: '',
        surname: '',
        address: '',
        customerNumber: primaryCustomerNumber,
        mernisNum: primaryCustomerTckn, // mernis boş ise tckn ile besleyeceğiz
      } as TransactionMaker);
    }

    // duplicate güvenliği (aynı customerNumber birden fazla ise)
    const seen = new Set<string>();
    const dedup = normalized.filter((m) => {
      if (seen.has(m.customerNumber)) return false;
      seen.add(m.customerNumber);
      return true;
    });

    return dedup;
  }, [transactionMaker, primaryCustomerNumber, primaryCustomerTckn]);

  // PersonListJson: outer = müşteri, inner = [Person]
  const [personListJson, setPersonListJson] = useState<Person[][]>([]);
  useEffect(() => {
    const next: Person[][] = makers.map((tm) => [
      {
        customerNum: tm.customerNumber,
        mernisNum: tm.mernisNum || primaryCustomerTckn, // boşsa tckn ile doldur
        taxNum: 0,
        docPersonType: '01',
        transferableDocClass: '',
      },
    ]);
    setPersonListJson(next);
  }, [makers, primaryCustomerTckn]);

  // I/B setlerini ayrıştır + özel opCode (PR-HES-KAS-FIS-T) için tekilleştirme
  const baseSets = useMemo(() => {
    const parsed = parseDebitSets(documentSetDebit);
    if (opCode === 'PR-HES-KAS-FIS-T') {
      const uniq = <T extends string>(arr: T[]) => Array.from(new Set(arr));
      return { I: uniq(parsed.I), B: uniq(parsed.B) };
    }
    return parsed;
  }, [documentSetDebit, opCode]);

  // sabit scan info
  const documentScanInfoJson: DocumentScanInfo = useMemo(
    () => ({
      processCode: 'GENELADRES',
      processId: 'MN000000045003398',
      processLevelNum: '0',
      processText: '',
      useMaxDisplay: 'false',
      maxDisplayPerSet: '0',
    }),
    []
  );

  /**
   * Set dağıtımı:
   *  - Herkese I set(ler)i
   *  - Primary müşteriye ayrıca B set(ler)i (varsa)
   *  - extraDocSetsByCustomer ile butondan/aksiyondan gelen ilave setler
   */
  const compData = useMemo<CustomerData[]>(() => {
    return makers.map((tm, i) => {
      const isPrimary =
        primaryCustomerNumber !== '' && tm.customerNumber === primaryCustomerNumber;

      // Herkese I
      let codes = [...baseSets.I];

      // Primary'ye B de ekle (varsa)
      if (isPrimary && baseSets.B.length > 0) {
        codes = [...codes, ...baseSets.B];
      }

      // Butonla eklenen ek setler
      const extraCodes = extraDocSetsByCustomer[tm.customerNumber] ?? [];
      const allCodes = [...codes, ...extraCodes];

      // DocumentInfo'ya çevir
      const documentListJson: DocumentInfo[] = allCodes.map((c) =>
        makeDocumentInfoFromCode(c)
      );

      const personArr = personListJson[i] ?? [];
      const fullName =
        `${tm.name ?? ''} ${tm.surname ?? ''}`.trim() || `User ${i + 1}`;

      return {
        customerNum: tm.customerNumber,
        fullName,
        documentScannerData: {
          personListJson: personArr, // Person[]
          documentListJson,          // DocumentInfo[]
          documentScanInfoJson,
        },
      };
    });
  }, [
    makers,
    primaryCustomerNumber,
    baseSets,
    extraDocSetsByCustomer,
    personListJson,
    documentScanInfoJson,
  ]);

  // Debug istersen:
  // useEffect(() => { console.log('compData', compData); }, [compData]);

  return <EfaCollapseDocumentScannerMultiCustomer data={compData} />;
};

export default DocumentScannerComponent;
