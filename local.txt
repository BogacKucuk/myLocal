//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package com.ykb.architecture.micro.error.exception;

import com.ykb.architecture.micro.error.exception.data.ExceptionData;
import com.ykb.architecture.micro.error.exception.data.ExceptionDataWithParameter;
import java.util.HashMap;
import java.util.Map;

public abstract class MicroException extends Exception {
    private static final long serialVersionUID = 1L;
    private ExceptionData data;
    private Map<String, String> parameters;

    public MicroException(ExceptionData data) {
        super(data.getErrorMessage());
        this.parameters = new HashMap();
        this.data = data;
    }

    public MicroException(ExceptionData data, Exception exception) {
        super(data.getErrorMessage(), exception);
        this.parameters = new HashMap();
        this.data = data;
    }

    public MicroException(ExceptionData data, Map<String, String> parameters) {
        this(data);
        this.parameters = parameters;
    }

    public MicroException(Long errorCode) {
        this(new ExceptionData(errorCode));
    }

    public MicroException(Long errorCode, String errorMessage) {
        this(new ExceptionData(errorCode, errorMessage));
    }

    public MicroException(Long errorCode, String errorMessage, Exception exception) {
        this(new ExceptionData(errorCode, errorMessage), exception);
    }

    public Long getErrorCode() {
        return this.data != null ? this.data.getErrorCode() : null;
    }

    public ExceptionData getExceptionData() {
        return this.data;
    }

    public Map<String, String> getParameters() {
        return this.parameters;
    }

    public String getParameter(String key) {
        return (String)this.parameters.get(key);
    }

    public void setErrorMessage(String errorMessage) {
        if (this.data == null) {
            this.data = new ExceptionData();
        }

    }

    public void addParameter(String key, String value) {
        value = value == null ? "" : value;
        this.parameters.put(key, value.toString());
    }

    public MicroException appendParameter(String key, String value) {
        value = value == null ? "" : value;
        this.parameters.put(key, value.toString());
        return this;
    }

    public ExceptionDataWithParameter convertToExceptionResponse() {
        ExceptionData exceptionData = this.data != null ? new ExceptionData(this.data) : new ExceptionData();
        return new ExceptionDataWithParameter(exceptionData, this.parameters);
    }
}
