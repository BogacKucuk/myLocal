package com.ykb.corebanking.vault.money.deposit.withdraw.constant;

public class NotificationConstants {

    private NotificationConstants() {
    }

    public static final Integer NTF_TYPE                  = 1;
    public static final Integer NTF_BYPASSMAXNUMBEROFTABS = 5;
    public static final Integer NTF_PRIORITY              = 100;
    public static final String  NTF_URL                   = "";

    public static final String  NTF_SUCCESS               = "00";
    public static final String PARCEK_NOTIFICATION_SHORTNAME = "TL_FXWithdrawalNotification";
    public static final String PARYAT_NOTIFICATION_SHORTNAME = "TL_FXDepositNotification";
    public static final String PARYAT_NOTIFICATION_SHORTNAME2 ="TL_FXDepositNotification2";
    public static final String PARCEK_PUSH_SHORTNAME = "TL_FXWithdrawalPushNotification";
    public static final String PARYAT_PUSH_SHORTNAME = "TL_FXDepositPushNotification";
    public static final String NOTIFICATION_EQUIVALENT = " karşılığı ";
    public static final String ACCOUNT_SPACE = "    ";
    public static final String NOTIFICATION_MASK = "***";

}


   public enum PROCESS_CODE {
        WITHDRAW ("WITHDRAW"),
        DEPOSIT ("DEPOSIT");


        private PROCESS_CODE(String statu) {
            this.processCode = statu;
        }

        private String processCode;

        public String getProcessCode() {
            return processCode;
        }       
    }



package com.ykb.corebanking.vault.money.deposit.withdraw.service.impl;

import com.ykb.corebanking.vault.money.deposit.withdraw.constant.AccountConstant;
import com.ykb.corebanking.vault.money.deposit.withdraw.constant.NAPConstant.PROCESS_CODE;
import com.ykb.corebanking.vault.money.deposit.withdraw.constant.NotificationConstants;
import com.ykb.corebanking.vault.money.deposit.withdraw.dto.*;
import com.ykb.corebanking.vault.money.deposit.withdraw.exception.AccountException;
import com.ykb.corebanking.vault.money.deposit.withdraw.kafka.producer.CustomerNotificationProducer;
import com.ykb.corebanking.vault.money.deposit.withdraw.micro.clients.AccountClient;
import com.ykb.corebanking.vault.money.deposit.withdraw.response.AccountInfoResponse;
import com.ykb.corebanking.vault.money.deposit.withdraw.service.ICustomerNotificationService;
import com.ykb.corebanking.vault.money.deposit.withdraw.util.CurrencyUtil;
import com.ykb.corebanking.vault.money.deposit.withdraw.util.DateUtil;
import com.ykb.corebanking.vault.money.deposit.withdraw.util.StringUtils;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

@Service
public class CustomerNotificationService implements ICustomerNotificationService {
    private AccountClient                accountClient;
    private CustomerNotificationProducer notificationProducer;

    @Autowired
    public CustomerNotificationService(AccountClient accountClient, CustomerNotificationProducer notificationProducer) {
        this.accountClient = accountClient;
        this.notificationProducer = notificationProducer;
    }

    @Override
    public void sendToNotificationQueue(CashTransactionDTO cashTransactionDTO, List<CashTransactionDetailDTO> cashTransactionDetailDTOList) throws AccountException {
        CustomerNotificationDTO customerNotificationDTO = getParameters(cashTransactionDTO, cashTransactionDetailDTOList);
        notificationProducer.sendMessageToNotificationQueue(customerNotificationDTO);

        // push notification
        CustomerNotificationDTO pushNotificationDTO = customerNotificationDTO;
        if (PROCESS_CODE.DEPOSIT.getProcessCode().equals(cashTransactionDTO.getProcessCode())) {
            pushNotificationDTO.getTransactionHeader().setJobCode(NotificationConstants.PARYAT_PUSH_SHORTNAME);
        }
        else {
            pushNotificationDTO.getTransactionHeader().setJobCode(NotificationConstants.PARCEK_PUSH_SHORTNAME);
        }
        notificationProducer.sendMessageToNotificationQueue(pushNotificationDTO);
    }

    public CustomerNotificationDTO getParameters(CashTransactionDTO cashTransactionDTO, List<CashTransactionDetailDTO> cashTransactionDetailDTOList) throws AccountException {
        CustomerNotificationDTO customerNotificationDTO = new CustomerNotificationDTO();

        ResponseBalanceInfo balanceInfo = null;
        AccountInfoResponse accountInfoResponse;
        try {
            ResponseEntity<ResponseBalanceInfo> responseBalanceInfo = accountClient.getBalanceInfo(cashTransactionDetailDTOList.get(0).getAccountNo(), Boolean.FALSE);
            if (responseBalanceInfo != null && responseBalanceInfo.getBody() != null) {
                balanceInfo = responseBalanceInfo.getBody();
            }
            ResponseEntity<AccountInfoResponse> accountNumberWithCurrency = accountClient.getAccountByAccountNoWithoutException(cashTransactionDetailDTOList.get(0).getAccountNo());
            if (accountNumberWithCurrency != null && accountNumberWithCurrency.getBody() != null) {
                accountInfoResponse = accountNumberWithCurrency.getBody();
            } else {
                throw new AccountException(AccountConstant.ACCOUNT_NOT_FOUND_ERROR_MESSAGE);
            }

        } catch (Exception e) {
            throw new AccountException("Hesap bilgileri bulunamadı.");
        }

        List<TransactionDetails> transactionDetailsList = getTransactionDetail(cashTransactionDTO, cashTransactionDetailDTOList, balanceInfo, accountInfoResponse);
        TransactionHeader transactionHeader = getTransactionHeaders(cashTransactionDTO, cashTransactionDetailDTOList, accountInfoResponse);
        customerNotificationDTO.setTransactionHeader(transactionHeader);
        customerNotificationDTO.setTransactionDetails(transactionDetailsList);

        return customerNotificationDTO;
    }

    private List<TransactionDetails> getTransactionDetail(CashTransactionDTO cashTransactionDTO, List<CashTransactionDetailDTO> cashTransactionDetailDTOList, ResponseBalanceInfo balanceInfo,
            AccountInfoResponse accountInfoResponse) {
        List<TransactionDetails> transactionDetailsList = new ArrayList<>();

        // Add fixed transaction details
        addFixedTransactionDetails(transactionDetailsList, cashTransactionDTO, cashTransactionDetailDTOList, accountInfoResponse);

        // Calculate amountText and isKgvIncluded
        AmountCalculationResult amountResult = calculateAmountTextAndIsKgvIncluded(cashTransactionDetailDTOList);

        // Add amountText
        TransactionDetails transactionDetail = new TransactionDetails();
        transactionDetail.setTransactionId(0l);
        transactionDetail.setParameterName("amountText");
        transactionDetail.setParameterValue(amountResult.getAmountText());
        transactionDetailsList.add(transactionDetail);

        // Add availableBalance
        transactionDetail = new TransactionDetails();
        transactionDetail.setTransactionId(0l);
        transactionDetail.setParameterName("availableBalance");
        transactionDetail.setParameterValue(formatCurrency(balanceInfo.getBalanceDTO().getAvailableBalance().toString() ) + " " + cashTransactionDetailDTOList.get(0).getCurrency());
        transactionDetailsList.add(transactionDetail);

        // Add totalBalance
        transactionDetail = new TransactionDetails();
        transactionDetail.setTransactionId(0l);
        transactionDetail.setParameterName("totalBalance");
        transactionDetail.setParameterValue(formatCurrency(balanceInfo.getBalanceDTO().getCurrentBalance().toString()) + " " + cashTransactionDetailDTOList.get(0).getCurrency());
        transactionDetailsList.add(transactionDetail);

        // Add IsTaxIncluded
        transactionDetail = new TransactionDetails();
        transactionDetail.setTransactionId(0l);
        transactionDetail.setParameterName("IsTaxIncluded");
        transactionDetail.setParameterValue(Boolean.TRUE.equals(amountResult.getIsKgvIncluded()) ? "1" : "0");
        transactionDetailsList.add(transactionDetail);

        return transactionDetailsList;
    }

    private void addFixedTransactionDetails(List<TransactionDetails> transactionDetailsList, CashTransactionDTO cashTransactionDTO, List<CashTransactionDetailDTO> cashTransactionDetailDTOList,
            AccountInfoResponse accountInfoResponse) {
        TransactionDetails transactionDetail;

        transactionDetail = createTransactionDetail("IsFlexibleAccount", Boolean.TRUE.equals(accountInfoResponse.getIsFlexibleAccount()) ? "1" : "0");
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail("customerName", cashTransactionDetailDTOList.get(0).getCashTransactionStoredRequest().getClientInfo().getClientName());
        transactionDetailsList.add(transactionDetail);
        
        transactionDetail = createTransactionDetail("accountNo", maskText(cashTransactionDetailDTOList.get(0).getAccountNo()));
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail("accountCurrency", cashTransactionDetailDTOList.get(0).getAccountCurrency());
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail("iban", formatIban(accountInfoResponse.getIban()));
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail("transactionDate", DateUtil.getFormattedDateWithSlash(cashTransactionDTO.getCreateDate()));
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail("transactionTime", formatDate(cashTransactionDTO.getCreateDate()));
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail("branchCode", cashTransactionDTO.getBranchCode());
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail("MVTProductId",
                cashTransactionDetailDTOList.get(0).getAccountNo() + NotificationConstants.ACCOUNT_SPACE + CurrencyUtil.currToCode(cashTransactionDetailDTOList.get(0).getAccountCurrency()));
        transactionDetailsList.add(transactionDetail);
    }

    private TransactionDetails createTransactionDetail(String parameterName, String parameterValue) {
        TransactionDetails transactionDetail = new TransactionDetails();
        transactionDetail.setTransactionId(0l);
        transactionDetail.setParameterName(parameterName);
        transactionDetail.setParameterValue(parameterValue);
        return transactionDetail;
    }

    private static String formatIban(String text){
        text= text.length() != 9 ? StringUtils.lpad(text, 8, '0') : StringUtils.lpad(text.trim(), 9, '0') ;
        return text.substring(0, text.length() - 6) + NotificationConstants.NOTIFICATION_MASK + text.substring(text.length() - 3);
    }

    private String formatCurrency(String toFormat){
        NumberFormat formatter = NumberFormat.getInstance(Locale.GERMAN);
        formatter.setMinimumFractionDigits(2);
        formatter.setMaximumFractionDigits(2);
        BigDecimal bdToFormat=new BigDecimal(toFormat);
        String output = formatter.format(bdToFormat);

        return output;

    }

    private AmountCalculationResult calculateAmountTextAndIsKgvIncluded(List<CashTransactionDetailDTO> cashTransactionDetailDTOList) {
        String amountText = "";
        Boolean isKgvIncluded = Boolean.FALSE;
        BigDecimal totalAmount = calculateTotalAmount(cashTransactionDetailDTOList);
        CashTransactionDetailDTO firstDetailDTO = cashTransactionDetailDTOList.get(0);

        if (hasCommissionAmount(firstDetailDTO)) {
            if(isCommissionNotTakenFromTransactionAmount(firstDetailDTO)) {
                BigDecimal commissionAmount = calculateCommissionAmount(cashTransactionDetailDTOList);

                if (isCurrencyEqualToAccountCurrency(firstDetailDTO)) {
                    amountText = amountText + calculateAmountTextForEqualCurrency(totalAmount, firstDetailDTO);
                }
                else if (hasKmvAmountGreaterThanZero(firstDetailDTO)) {
                    isKgvIncluded = Boolean.TRUE;
                    totalAmount = totalAmount.add(commissionAmount);
                    amountText = amountText + calculateAmountTextForKmvAmount(totalAmount, firstDetailDTO);
                }
                else {
                    totalAmount = totalAmount.add(commissionAmount);
                    amountText = amountText + calculateDefaultAmountText(totalAmount) + " " + firstDetailDTO.getCurrency() + NotificationConstants.NOTIFICATION_EQUIVALENT
                            + formatCurrency(totalAmount.toString());
                }
            }
            else {
                if (isCurrencyEqualToAccountCurrency(firstDetailDTO)) {
                    amountText = amountText + totalAmount + " " + firstDetailDTO.getCurrency();
                }
                else if (hasKmvAmountGreaterThanZero(firstDetailDTO)) {
                    isKgvIncluded = Boolean.TRUE;
                    amountText = calculateAmountTextForKmvAmount(totalAmount, firstDetailDTO);
                }
                else {
                    amountText = amountText + calculateDefaultAmountText(totalAmount) + " " + firstDetailDTO.getCurrency() + NotificationConstants.NOTIFICATION_EQUIVALENT
                            + " " + formatCurrency(totalAmount.toString());
                }
            }
        }
        else {
            AmountCalculationResult calculationResultWithoutCommission = calculateAmountTextWithoutCommission(cashTransactionDetailDTOList, totalAmount, isKgvIncluded);
            amountText = calculationResultWithoutCommission.getAmountText();
            isKgvIncluded = calculationResultWithoutCommission.getIsKgvIncluded();
        }

        return new AmountCalculationResult(amountText, isKgvIncluded);
    }

    private AmountCalculationResult calculateAmountTextWithoutCommission(List<CashTransactionDetailDTO> cashTransactionDetailDTOList, BigDecimal totalAmount, Boolean isKgvIncluded) {
        CashTransactionDetailDTO firstDetailDTO = cashTransactionDetailDTOList.get(0);
        String amountText = "";
        if (isCurrencyEqualToAccountCurrency(firstDetailDTO)) {
            amountText = amountText + totalAmount + " " + firstDetailDTO.getCurrency();
        }
        else if (hasKmvAmountGreaterThanZero(firstDetailDTO)) {
            isKgvIncluded = Boolean.TRUE;
            amountText = amountText + calculateAmountTextForKmvAmount(totalAmount, firstDetailDTO);
        }
        else {
            amountText = amountText + calculateDefaultAmountText(totalAmount) + " " + firstDetailDTO.getCurrency() + NotificationConstants.NOTIFICATION_EQUIVALENT
                    + formatCurrency(totalAmount.toString());
        }

        return new AmountCalculationResult(amountText, isKgvIncluded);
    }

    private BigDecimal calculateTotalAmount(List<CashTransactionDetailDTO> cashTransactionDetailDTOList) {
        BigDecimal totalAmount = BigDecimal.ZERO;
        for (CashTransactionDetailDTO detailDTO : cashTransactionDetailDTOList) {
            totalAmount = totalAmount.add(detailDTO.getAmount());
        }
        return totalAmount;
    }

    private BigDecimal calculateCommissionAmount(List<CashTransactionDetailDTO> cashTransactionDetailDTOList) {
        BigDecimal commissionAmount = BigDecimal.ZERO;
        for (CashTransactionDetailDTO detailDTO : cashTransactionDetailDTOList) {
            if (detailDTO.getCommissionAmount() != null) {
                commissionAmount = commissionAmount.add(detailDTO.getCommissionAmount());
            }
        }
        return commissionAmount;
    }

    private String calculateAmountTextForEqualCurrency(BigDecimal totalAmount, CashTransactionDetailDTO detailDTO) {
        String amountText = formatCurrency(totalAmount.toString()) + " " + detailDTO.getCurrency();
        return amountText;
    }

    private String calculateAmountTextForKmvAmount(BigDecimal totalAmount, CashTransactionDetailDTO detailDTO) {
        return totalAmount + " " + detailDTO.getCurrency() + NotificationConstants.NOTIFICATION_EQUIVALENT + detailDTO.getKmvAmount() + detailDTO.getCurrency();
    }

    private String calculateDefaultAmountText(BigDecimal totalAmount) {
        return formatCurrency(totalAmount.toString());
    }

    private boolean hasCommissionAmount(CashTransactionDetailDTO detailDTO) {
        return detailDTO.getCommissionAmount() != null && detailDTO.getCommissionAmount().compareTo(BigDecimal.ZERO) > 0;
    }

    private boolean isCommissionNotTakenFromTransactionAmount(CashTransactionDetailDTO detailDTO) {
        return !Boolean.TRUE.equals(detailDTO.getCashTransactionStoredRequest().getTakeCommissionFromTransactionAmount());
    }

    private boolean isCurrencyEqualToAccountCurrency(CashTransactionDetailDTO detailDTO) {
        return detailDTO.getCurrency().equals(detailDTO.getAccountCurrency());
    }

    private boolean hasKmvAmountGreaterThanZero(CashTransactionDetailDTO detailDTO) {
        return detailDTO.getKmvAmount() != null && detailDTO.getKmvAmount().compareTo(BigDecimal.ZERO) > 0;
    }

    private TransactionHeader getTransactionHeaders(CashTransactionDTO cashTransactionDTO, List<CashTransactionDetailDTO> cashTransactionDetailDTOList, AccountInfoResponse accountInfoResponse) {
        TransactionHeader transactionHeader = new TransactionHeader();
        transactionHeader.setClientNo(cashTransactionDetailDTOList.get(0).getCashTransactionStoredRequest().getClientInfo().getClientNo());
        transactionHeader.setCreatedBy(cashTransactionDTO.getCreatedBy());
        transactionHeader.setCreateDate(DateUtil.getFormattedDateAndTimeWithDots(cashTransactionDTO.getCreateDate()));
        transactionHeader.setUpdateDate(DateUtil.getFormattedDateAndTimeWithDots(cashTransactionDTO.getUpdateDate()));
        transactionHeader.setUpdatedBy(cashTransactionDTO.getUpdatedBy());
        transactionHeader.setId(0l);
        transactionHeader.setIsJobCreated(2);
        if (PROCESS_CODE.DEPOSIT.getProcessCode().equals(cashTransactionDTO.getProcessCode())) {
            if (Boolean.TRUE.equals(accountInfoResponse.getIsFlexibleAccount())) {
                transactionHeader.setJobCode(NotificationConstants.PARYAT_NOTIFICATION_SHORTNAME2);
            }
            else {
                transactionHeader.setJobCode(NotificationConstants.PARYAT_NOTIFICATION_SHORTNAME);
            }
        }
        else {
            transactionHeader.setJobCode(NotificationConstants.PARCEK_NOTIFICATION_SHORTNAME);
        }
        return transactionHeader;
    }

    private String formatDate(Date date) {
        SimpleDateFormat formatter = new SimpleDateFormat("HH:mm");
        return formatter.format(date);
    }

    static class AmountCalculationResult {
        private String  amountText;
        private Boolean isKgvIncluded;

        public AmountCalculationResult(String amountText, Boolean isKgvIncluded) {
            this.amountText = amountText;
            this.isKgvIncluded = isKgvIncluded;
        }

        public String getAmountText() {
            return amountText;
        }

        public Boolean getIsKgvIncluded() {
            return isKgvIncluded;
        }
    }
    
    private static String maskText(String text){
        text=StringUtils.lpad(text, 9, '0');
        return text.substring(0, text.length() - 6) + "***" + text.substring(text.length() - 3);
    }
}


package com.ykb.corebanking.vault.money.deposit.withdraw.service.impl;

import com.ykb.architecture.micro.error.exception.MicroException;
import com.ykb.corebanking.vault.money.deposit.withdraw.constant.NotificationConstants;
import com.ykb.corebanking.vault.money.deposit.withdraw.dto.*;
import com.ykb.corebanking.vault.money.deposit.withdraw.exception.AccountException;
import com.ykb.corebanking.vault.money.deposit.withdraw.kafka.producer.CustomerNotificationProducer;
import com.ykb.corebanking.vault.money.deposit.withdraw.micro.clients.AccountClient;
import com.ykb.corebanking.vault.money.deposit.withdraw.request.CashTransactionStoredRequest;
import com.ykb.corebanking.vault.money.deposit.withdraw.response.AccountInfoResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(SpringExtension.class)
class CustomerNotificationServiceTest {

    @InjectMocks
    CustomerNotificationService customerNotificationService;

    @Mock
    AccountClient accountClient;

    @Mock
    CustomerNotificationProducer notificationProducer;

    @Captor
    ArgumentCaptor<CustomerNotificationDTO> notificationCaptor;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testSendToNotificationQueue_Success() throws MicroException, AccountException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(1L);
        cashTransactionDTO.setCreateDate(new Date());
        // --> Update date ekleyelim (NullPointer almayalım):
        cashTransactionDTO.setUpdateDate(new Date());

        cashTransactionDTO.setBranchCode("326");
        cashTransactionDTO.setCreatedBy("U058408");
        cashTransactionDTO.setUpdatedBy("U058408");
        cashTransactionDTO.setProcessCode("WITHDRAW");

        ClientDTO clientDTO = new ClientDTO();
        clientDTO.setClientNo(1000L);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setCheckedFlexibleAccount(Boolean.TRUE);
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        storedRequest.setClientInfo(clientDTO);

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setTransactionId("txn123");
        detailDTO.setAccountNo("369");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setCurrency("TL");
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCashTransactionStoredRequest(storedRequest);
        detailDTO.setCommissionAmount(BigDecimal.ZERO);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        BalanceDTO balanceDTO = new BalanceDTO();
        balanceDTO.setAvailableBalance(BigDecimal.valueOf(5000));
        balanceDTO.setOverDraftBalance(BigDecimal.valueOf(10000));
        balanceDTO.setValueBalance(BigDecimal.valueOf(6000));

        ResponseBalanceInfo balanceInfo = new ResponseBalanceInfo();
        balanceInfo.setBalanceDTO(balanceDTO);

        ResponseEntity<ResponseBalanceInfo> responseBalanceInfo = ResponseEntity.ok(balanceInfo);

        AccountInfoResponse accountInfoResponse = new AccountInfoResponse();
        accountInfoResponse.setIban("TRXXXXXX");
        accountInfoResponse.setIsFlexibleAccount(Boolean.FALSE);
        ResponseEntity<AccountInfoResponse> accountNumberEntity = ResponseEntity.ok(accountInfoResponse);

        // Mocking AccountClient methods
        when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenReturn(responseBalanceInfo);
        when(accountClient.getAccountByAccountNoWithoutException(anyString())).thenReturn(accountNumberEntity);

        // Act
        customerNotificationService.sendToNotificationQueue(cashTransactionDTO, detailDTOList);

        // Assert
        verify(notificationProducer, times(1)).sendMessageToNotificationQueue(any(CustomerNotificationDTO.class));
    }

    @Test
    void testGetParameters_Success() throws MicroException, AccountException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(2L);
        cashTransactionDTO.setCreateDate(new Date());
        // --> Update date ekleyelim:
        cashTransactionDTO.setUpdateDate(new Date());

        cashTransactionDTO.setBranchCode("326");
        cashTransactionDTO.setCreatedBy("U058408");
        cashTransactionDTO.setUpdatedBy("U058408");
        cashTransactionDTO.setProcessCode("WITHDRAW");

        ClientDTO clientDTO = new ClientDTO();
        clientDTO.setClientNo(123L);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setCheckedFlexibleAccount(Boolean.TRUE);
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        storedRequest.setClientInfo(clientDTO);

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setTransactionId("txn123");
        detailDTO.setAccountNo("acc123");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setCurrency("TL");
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCommissionAmount(BigDecimal.ZERO);
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        BalanceDTO balanceDTO = new BalanceDTO();
        balanceDTO.setAvailableBalance(BigDecimal.valueOf(5000));
        balanceDTO.setOverDraftBalance(BigDecimal.valueOf(10000));
        balanceDTO.setValueBalance(BigDecimal.valueOf(6000));

        ResponseBalanceInfo balanceInfo = new ResponseBalanceInfo();
        balanceInfo.setBalanceDTO(balanceDTO);
        ResponseEntity<ResponseBalanceInfo> responseBalanceInfo = ResponseEntity.ok(balanceInfo);

        AccountInfoResponse accountInfoResponse = new AccountInfoResponse();
        accountInfoResponse.setIban("TRXXXXXX");
        accountInfoResponse.setIsFlexibleAccount(Boolean.FALSE);
        ResponseEntity<AccountInfoResponse> accountNumberEntity = ResponseEntity.ok(accountInfoResponse);

        when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenReturn(responseBalanceInfo);
        when(accountClient.getAccountByAccountNoWithoutException(anyString())).thenReturn(accountNumberEntity);

        // Act
        CustomerNotificationDTO result = customerNotificationService.getParameters(cashTransactionDTO, detailDTOList);

        // Assert
        assertNotNull(result);
        assertNotNull(result.getTransactionHeader());
        assertNotNull(result.getTransactionDetails());
    }

    @Test
    void testSendToNotificationQueue_NullDetailList() {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(3L);

        // Act & Assert
        assertThrows(AccountException.class, () -> {
            customerNotificationService.sendToNotificationQueue(cashTransactionDTO, null);
        });
    }

    @Test
    void testSendToNotificationQueue_AccountExceptionWhenBalanceInfoFails() throws MicroException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(4L);

        ClientDTO clientDTO = new ClientDTO();
        clientDTO.setClientNo(999L);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setCheckedFlexibleAccount(Boolean.TRUE);
        storedRequest.setClientInfo(clientDTO);

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAccountNo("acc123");
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = new ArrayList<>();
        detailDTOList.add(detailDTO);

        when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenThrow(new RuntimeException("Error"));

        // Act & Assert
        assertThrows(AccountException.class, () -> {
            customerNotificationService.sendToNotificationQueue(cashTransactionDTO, detailDTOList);
        });
    }

    @Test
    void testGetParameters_AccountNotFound() throws MicroException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(5L);
        cashTransactionDTO.setProcessCode("WITHDRAW");

        ClientDTO clientDTO = new ClientDTO();
        clientDTO.setClientNo(12345L);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setCheckedFlexibleAccount(Boolean.TRUE);
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        storedRequest.setClientInfo(clientDTO);

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setTransactionId("txn123");
        detailDTO.setAccountNo("accNotFound");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setCurrency("TL");
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCommissionAmount(BigDecimal.ZERO);
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        BalanceDTO balanceDTO = new BalanceDTO();
        balanceDTO.setAvailableBalance(BigDecimal.valueOf(5000));
        balanceDTO.setValueBalance(BigDecimal.valueOf(6000));

        ResponseBalanceInfo balanceInfo = new ResponseBalanceInfo();
        balanceInfo.setBalanceDTO(balanceDTO);

        ResponseEntity<ResponseBalanceInfo> responseBalanceInfo = ResponseEntity.ok(balanceInfo);
        when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenReturn(responseBalanceInfo);

        // account bilgisi bulunamadığında null body dönecek
        when(accountClient.getAccountByAccountNoWithoutException(anyString())).thenReturn(ResponseEntity.ok(null));

        // Act & Assert
        AccountException exception = assertThrows(AccountException.class, () -> {
            customerNotificationService.getParameters(cashTransactionDTO, detailDTOList);
        });
        assertEquals("Hesap bilgileri bulunamadı.", exception.getMessage());
    }

    @Test
    void testGetParameters_ExceptionThrown() throws MicroException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(6L);
        cashTransactionDTO.setProcessCode("WITHDRAW");

        ClientDTO clientDTO = new ClientDTO();
        clientDTO.setClientNo(12345L);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setClientInfo(clientDTO);

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAccountNo("accException");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setCurrency("TL");
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenThrow(new RuntimeException("Some error"));

        // Act & Assert
        AccountException exception = assertThrows(AccountException.class, () -> {
            customerNotificationService.getParameters(cashTransactionDTO, detailDTOList);
        });
        assertEquals("Hesap bilgileri bulunamadı.", exception.getMessage());
    }

    @Test
    void testGetParameters_Deposit_FlexibleAccount() throws MicroException, AccountException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(7L);
        cashTransactionDTO.setCreateDate(new Date());
        cashTransactionDTO.setUpdateDate(new Date()); // NullPointer fix

        cashTransactionDTO.setProcessCode("DEPOSIT");
        cashTransactionDTO.setCreatedBy("tester");
        cashTransactionDTO.setUpdatedBy("tester");

        ClientDTO clientDTO = new ClientDTO();
        clientDTO.setClientNo(99999L);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setClientInfo(clientDTO);

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setTransactionId("txn789");
        detailDTO.setAccountNo("accDeposit");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setCurrency("TL");
        detailDTO.setAmount(BigDecimal.valueOf(2000));
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        BalanceDTO balanceDTO = new BalanceDTO();
        balanceDTO.setAvailableBalance(BigDecimal.valueOf(10000));
        balanceDTO.setValueBalance(BigDecimal.valueOf(12000));
        balanceDTO.setOverDraftBalance(BigDecimal.valueOf(12000));

        ResponseBalanceInfo balanceInfo = new ResponseBalanceInfo();
        balanceInfo.setBalanceDTO(balanceDTO);

        ResponseEntity<ResponseBalanceInfo> responseBalanceInfo = ResponseEntity.ok(balanceInfo);
        when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenReturn(responseBalanceInfo);

        AccountInfoResponse accountInfoResponse = new AccountInfoResponse();
        accountInfoResponse.setIban("TRXXXXXX");
        accountInfoResponse.setIsFlexibleAccount(Boolean.TRUE);

        ResponseEntity<AccountInfoResponse> accountNumberEntity = ResponseEntity.ok(accountInfoResponse);
        when(accountClient.getAccountByAccountNoWithoutException(anyString())).thenReturn(accountNumberEntity);

        // Act
        CustomerNotificationDTO result = customerNotificationService.getParameters(cashTransactionDTO, detailDTOList);

        // Assert
        assertNotNull(result);
        assertNotNull(result.getTransactionHeader());
        // Flexible account + DEPOSIT => kodda: PARYAT_NOTIFICATION_SHORTNAME2
        assertEquals(NotificationConstants.PARYAT_NOTIFICATION_SHORTNAME2, result.getTransactionHeader().getJobCode());
    }

    @Test
    void testCalculateAmountTextAndIsKgvIncluded_NoCommission_NoKmv() throws Exception {
        // Arrange
        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCurrency("TRY");
        detailDTO.setAccountCurrency("TRY");
        detailDTO.setCommissionAmount(BigDecimal.ZERO);
        detailDTO.setKmvAmount(BigDecimal.ZERO);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        Method method = CustomerNotificationService.class
                .getDeclaredMethod("calculateAmountTextAndIsKgvIncluded", List.class);
        method.setAccessible(true);

        // Act
        CustomerNotificationService.AmountCalculationResult result =
                (CustomerNotificationService.AmountCalculationResult) method.invoke(customerNotificationService, detailDTOList);

        // Assert
        // Kodun mantığında TRY == TRY ve komisyon yoksa "1000 TRY" dönüyor
        assertEquals("1000 TRY", result.getAmountText());
        // Kod aynı para biriminde KMV 0 ise isKgvIncluded=false
        assertFalse(result.getIsKgvIncluded());
    }


    @Test
    void testCalculateAmountTextAndIsKgvIncluded_WithCommission() throws Exception {
        // Arrange
        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCurrency("TL");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setCommissionAmount(BigDecimal.valueOf(50));

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        Method method = CustomerNotificationService.class
                .getDeclaredMethod("calculateAmountTextAndIsKgvIncluded", List.class);
        method.setAccessible(true);

        // Act
        CustomerNotificationService.AmountCalculationResult calculationResult =
                (CustomerNotificationService.AmountCalculationResult) method.invoke(customerNotificationService, detailDTOList);

        // Assert
        assertNotNull(calculationResult.getAmountText());
        // Komisyon var ama KMV yok + currency == accountCurrency => isKgvIncluded=false
        // Bu satırı assertFalse olarak düzeltelim
        assertFalse(calculationResult.getIsKgvIncluded());
    }

    @Test
    void testCalculateAmountTextAndIsKgvIncluded_WithKgv() throws Exception {
        // Arrange
        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAmount(BigDecimal.valueOf(1000));

        // Para birimini farklı yapalım ki "else if (hasKmvAmount...)" branch'ına girsin
        detailDTO.setCurrency("USD");
        detailDTO.setAccountCurrency("TL");

        // KMV verelim
        detailDTO.setKmvAmount(BigDecimal.valueOf(100));

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        Method method = CustomerNotificationService.class
                .getDeclaredMethod("calculateAmountTextAndIsKgvIncluded", List.class);
        method.setAccessible(true);

        // Act
        CustomerNotificationService.AmountCalculationResult calculationResult =
                (CustomerNotificationService.AmountCalculationResult) method.invoke(customerNotificationService, detailDTOList);

        // Assert
        assertNotNull(calculationResult.getAmountText());
        // Şimdi para birimleri farklı ve KMV>0 => kodda isKgvIncluded = true
        assertTrue(calculationResult.getIsKgvIncluded());
    }

    @Test
    void testFormatDate() throws Exception {
        // private String formatDate(Date date)
        Method formatDateMethod = CustomerNotificationService.class.getDeclaredMethod("formatDate", Date.class);
        formatDateMethod.setAccessible(true);

        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.HOUR_OF_DAY, 10);
        cal.set(Calendar.MINUTE, 30);
        Date date = cal.getTime();

        String formatted = (String) formatDateMethod.invoke(customerNotificationService, date);
        assertEquals("10:30", formatted);
    }

    @Test
    void testFormatCurrency() throws Exception {
        // Mevcut kodda imza -> private String formatCurrency(String toFormat)
        Method formatCurrencyMethod = CustomerNotificationService.class
                .getDeclaredMethod("formatCurrency", String.class);
        formatCurrencyMethod.setAccessible(true);

        // 1234.56'yı string olarak gönderdik
        String formatted = (String) formatCurrencyMethod.invoke(customerNotificationService, "1234.56");
        assertNotNull(formatted);
        // Alman locale => "1.234,56" gibi bir sonuç gelebilir.
        assertTrue(formatted.contains(",") || formatted.contains("."));
    }


    @Test
    void testCalculateAmount_CommissionNotTaken_CurrencySame() throws Exception {
        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAmount(BigDecimal.valueOf(2000));
        detailDTO.setCommissionAmount(BigDecimal.valueOf(50)); // hasCommissionAmount => true
        detailDTO.setCurrency("TL");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setKmvAmount(BigDecimal.ZERO); // KMV yok => hasKmvAmountGreaterThanZero => false

        // Komisyon işlem tutarından düşülmesin => true
        CashTransactionStoredRequest request = new CashTransactionStoredRequest();
        request.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        detailDTO.setCashTransactionStoredRequest(request);

        List<CashTransactionDetailDTO> detailList = Collections.singletonList(detailDTO);


        Method method = CustomerNotificationService.class
                .getDeclaredMethod("calculateAmountTextAndIsKgvIncluded", List.class);
        method.setAccessible(true);

        CustomerNotificationService.AmountCalculationResult result =
                (CustomerNotificationService.AmountCalculationResult) method.invoke(customerNotificationService, detailList);


        assertNotNull(result.getAmountText());
        assertFalse(result.getIsKgvIncluded(), "isKgvIncluded false bekleniyor");

    }


    @Test
    void testCalculateAmount_CommissionNotTaken_WithKmv() throws Exception {
        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCommissionAmount(BigDecimal.valueOf(50)); // hasCommissionAmount => true

        detailDTO.setCurrency("USD");
        detailDTO.setAccountCurrency("TL");

        // KMV > 0 olsun => hasKmvAmountGreaterThanZero => true => Branch B
        detailDTO.setKmvAmount(BigDecimal.valueOf(100));

        CashTransactionStoredRequest request = new CashTransactionStoredRequest();
        request.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        detailDTO.setCashTransactionStoredRequest(request);

        List<CashTransactionDetailDTO> detailList = Collections.singletonList(detailDTO);

        Method method = CustomerNotificationService.class
                .getDeclaredMethod("calculateAmountTextAndIsKgvIncluded", List.class);
        method.setAccessible(true);

        CustomerNotificationService.AmountCalculationResult result =
                (CustomerNotificationService.AmountCalculationResult) method.invoke(customerNotificationService, detailList);

        // -> isKgvIncluded = true (kod bunu set ediyor)
        assertTrue(result.getIsKgvIncluded(), "KMV > 0 ve para birimi farklı => isKgvIncluded true beklenir");
        assertNotNull(result.getAmountText());
    }

    @Test
    void testCalculateAmount_CommissionNotTaken_CurrencyDifferent_NoKmv() throws Exception {
        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAmount(BigDecimal.valueOf(1500));
        detailDTO.setCommissionAmount(BigDecimal.valueOf(100));
        detailDTO.setCurrency("USD");
        detailDTO.setAccountCurrency("TL");
        // KMV = 0 => hasKmvAmountGreaterThanZero = false
        detailDTO.setKmvAmount(BigDecimal.ZERO);

        CashTransactionStoredRequest request = new CashTransactionStoredRequest();
        request.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        detailDTO.setCashTransactionStoredRequest(request);

        List<CashTransactionDetailDTO> detailList = Collections.singletonList(detailDTO);

        Method method = CustomerNotificationService.class
                .getDeclaredMethod("calculateAmountTextAndIsKgvIncluded", List.class);
        method.setAccessible(true);

        CustomerNotificationService.AmountCalculationResult result =
                (CustomerNotificationService.AmountCalculationResult) method.invoke(customerNotificationService, detailList);

        // -> isKgvIncluded = false
        assertFalse(result.getIsKgvIncluded());
        assertNotNull(result.getAmountText());
    }


    @Test
    void testCalculateAmount_CommissionTaken_CurrencySame() throws Exception {
        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCommissionAmount(BigDecimal.valueOf(200));
        detailDTO.setCurrency("TL");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setKmvAmount(BigDecimal.ZERO);

        CashTransactionStoredRequest request = new CashTransactionStoredRequest();
        // Bu sefer komisyon işlem tutarından alınsın => true
        request.setTakeCommissionFromTransactionAmount(Boolean.TRUE);
        detailDTO.setCashTransactionStoredRequest(request);

        List<CashTransactionDetailDTO> detailList = Collections.singletonList(detailDTO);

        Method method = CustomerNotificationService.class
                .getDeclaredMethod("calculateAmountTextAndIsKgvIncluded", List.class);
        method.setAccessible(true);

        CustomerNotificationService.AmountCalculationResult result =
                (CustomerNotificationService.AmountCalculationResult) method.invoke(customerNotificationService, detailList);

        // -> Branch D1
        assertFalse(result.getIsKgvIncluded());
        assertNotNull(result.getAmountText());
    }

    @Test
    void testCalculateAmount_CommissionTaken_WithKmv() throws Exception {
        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAmount(BigDecimal.valueOf(2500));
        detailDTO.setCommissionAmount(BigDecimal.valueOf(100));
        // currency != accountCurrency => false
        detailDTO.setCurrency("EUR");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setKmvAmount(BigDecimal.valueOf(50)); // KMV > 0

        CashTransactionStoredRequest request = new CashTransactionStoredRequest();
        request.setTakeCommissionFromTransactionAmount(Boolean.TRUE);
        detailDTO.setCashTransactionStoredRequest(request);

        List<CashTransactionDetailDTO> detailList = Collections.singletonList(detailDTO);

        Method method = CustomerNotificationService.class
                .getDeclaredMethod("calculateAmountTextAndIsKgvIncluded", List.class);
        method.setAccessible(true);

        CustomerNotificationService.AmountCalculationResult result =
                (CustomerNotificationService.AmountCalculationResult) method.invoke(customerNotificationService, detailList);

        // -> isKgvIncluded = true
        assertTrue(result.getIsKgvIncluded());
        assertNotNull(result.getAmountText());
    }

    @Test
    void testCalculateAmount_NoCommission_CurrencySame() throws Exception {
        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAmount(BigDecimal.valueOf(3000));
        // Komisyon = null veya 0 => hasCommissionAmount => false
        detailDTO.setCommissionAmount(BigDecimal.ZERO);
        detailDTO.setCurrency("TL");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setKmvAmount(BigDecimal.ZERO);

        CashTransactionStoredRequest request = new CashTransactionStoredRequest();
        request.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        detailDTO.setCashTransactionStoredRequest(request);

        List<CashTransactionDetailDTO> detailList = Collections.singletonList(detailDTO);

        Method method = CustomerNotificationService.class
                .getDeclaredMethod("calculateAmountTextAndIsKgvIncluded", List.class);
        method.setAccessible(true);

        CustomerNotificationService.AmountCalculationResult result =
                (CustomerNotificationService.AmountCalculationResult) method.invoke(customerNotificationService, detailList);

        assertFalse(result.getIsKgvIncluded());
        assertNotNull(result.getAmountText());
    }

    @Test
    void testCalculateAmount_NoCommission_CurrencyDifferent_WithKmv() throws Exception {
        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAmount(BigDecimal.valueOf(5000));
        detailDTO.setCommissionAmount(BigDecimal.ZERO);
        detailDTO.setCurrency("USD");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setKmvAmount(BigDecimal.valueOf(500)); // > 0 => E2

        CashTransactionStoredRequest request = new CashTransactionStoredRequest();
        request.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        detailDTO.setCashTransactionStoredRequest(request);

        List<CashTransactionDetailDTO> detailList = Collections.singletonList(detailDTO);

        Method method = CustomerNotificationService.class
                .getDeclaredMethod("calculateAmountTextAndIsKgvIncluded", List.class);
        method.setAccessible(true);

        CustomerNotificationService.AmountCalculationResult result =
                (CustomerNotificationService.AmountCalculationResult) method.invoke(customerNotificationService, detailList);

        // -> Branch E2 => isKgvIncluded = true
        assertTrue(result.getIsKgvIncluded());
        assertNotNull(result.getAmountText());
    }

    @Test
    void testCalculateAmount_NoCommission_CurrencyDifferent_NoKmv() throws Exception {
        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAmount(BigDecimal.valueOf(750));
        detailDTO.setCommissionAmount(BigDecimal.ZERO);
        detailDTO.setCurrency("USD");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setKmvAmount(BigDecimal.ZERO);

        CashTransactionStoredRequest request = new CashTransactionStoredRequest();
        request.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        detailDTO.setCashTransactionStoredRequest(request);

        List<CashTransactionDetailDTO> detailList = Collections.singletonList(detailDTO);

        Method method = CustomerNotificationService.class
                .getDeclaredMethod("calculateAmountTextAndIsKgvIncluded", List.class);
        method.setAccessible(true);

        CustomerNotificationService.AmountCalculationResult result =
                (CustomerNotificationService.AmountCalculationResult) method.invoke(customerNotificationService, detailList);

        // -> Branch E3 => isKgvIncluded = false
        assertFalse(result.getIsKgvIncluded());
        assertNotNull(result.getAmountText());
    }
    
}
