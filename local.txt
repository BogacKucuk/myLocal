package com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.grpc.mapper;

import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.grpc.mapper.config.GrpcMapperConfig;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.proto.DigitalOrderProto.DigitalOrderReadRequest;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.proto.DigitalOrderProto.DigitalOrderReadResponse;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.proto.DigitalOrderProto.ReadBranchInstructionDepositWithdrawal;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.request.DigitalOrderReadRequestDto;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.response.DigitalOrderReadResponseDto;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.response.ReadBranchInstructionDepositWithdrawalDto;
import com.garantibbvaportfoy.utility.bigdecimal.proto.BigDecimalProto;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.Named;
import org.mapstruct.factory.Mappers;

import java.math.BigDecimal;

@Mapper(config = GrpcMapperConfig.class)
public interface DigitalOrderGrpcMapper {

    DigitalOrderGrpcMapper INSTANCE = Mappers.getMapper(DigitalOrderGrpcMapper.class);

    // Request mapping - Proto'dan Java'ya
    @Mapping(target = "amount", source = "amount", qualifiedByName = "fromProtoBigDecimal")
    DigitalOrderReadRequestDto toRequestDto(DigitalOrderReadRequest request);

    // Response mapping - Java'dan Proto'ya (manuel kontrol için)
    default DigitalOrderReadResponse toGrpcResponse(DigitalOrderReadResponseDto responseDto) {
        if (responseDto == null) {
            return DigitalOrderReadResponse.getDefaultInstance();
        }

        DigitalOrderReadResponse.Builder builder = DigitalOrderReadResponse.newBuilder();
        
        if (responseDto.getReadBranchInstructionDepositWithdrawal() != null) {
            responseDto.getReadBranchInstructionDepositWithdrawal().forEach(dto -> {
                ReadBranchInstructionDepositWithdrawal grpcItem = toReadBranchInstructionDepositWithdrawalGrpc(dto);
                builder.addReadBranchInstructionDepositWithdrawal(grpcItem);
            });
        }
        
        return builder.build();
    }

    // Tek nesne mapping - BigDecimal için özel mapping
    @Mapping(target = "amount", source = "amount", qualifiedByName = "toProtoBigDecimal")
    ReadBranchInstructionDepositWithdrawal toReadBranchInstructionDepositWithdrawalGrpc(
        ReadBranchInstructionDepositWithdrawalDto dto);

    // Java BigDecimal -> Proto BigDecimal (Response için)
    @Named("toProtoBigDecimal")
    default BigDecimalProto.BigDecimal toProtoBigDecimal(BigDecimal bigDecimal) {
        if (bigDecimal == null) {
            return null;
        }
        
        return BigDecimalProto.BigDecimal.newBuilder()
                .setScale((int) bigDecimal.scale())  // uint32 -> int cast
                .setPrecision(bigDecimal.precision())
                .setValue(com.google.protobuf.ByteString.copyFrom(bigDecimal.unscaledValue().toByteArray()))
                .build();
    }

    // Proto BigDecimal -> Java BigDecimal (Request için)
    @Named("fromProtoBigDecimal")
    default BigDecimal fromProtoBigDecimal(BigDecimalProto.BigDecimal protoBigDecimal) {
        if (protoBigDecimal == null) {
            return null;
        }
        
        return new BigDecimal(
            new java.math.BigInteger(protoBigDecimal.getValue().toByteArray()),
            (int) protoBigDecimal.getScale()  // uint32 -> int cast
        );
    }
}
