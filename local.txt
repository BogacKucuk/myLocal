// src/features/lastTransactions/LastTransactionsPopupComponent.tsx
import React, { useState, useEffect } from 'react'
import { useGetLastTransactionsQuery } from './lastTransactionsApi'
import type {
  ListTransactions,
  Transaction,
  FindTransactionByCustomerNumber,
} from '../types/Transaction.type'

type Row = {
  date: string
  branch: string
  account: string
  amount: string
  type: string
}

type Props = {
  onClose: () => void
  dataTestId?: string
  visible?: boolean
}

export const LastTransactionsPopupComponent: React.FC<Props> = ({
  onClose,
  dataTestId,
  visible,
}) => {
  // ——— 1) Local state tanımla
  const [rawTxs, setRawTxs] = useState<Transaction[]>([])
  const [rows, setRows] = useState<Row[]>([])

  // ——— 2) Dummy payload ile hook’u çağır
  const dummyPayload: FindTransactionByCustomerNumber = {
    customerNumber: 123456789,
  }
  const { data: list, isLoading, error } =
    useGetLastTransactionsQuery(dummyPayload)

  // ——— 3) list değiştiğinde state’i güncelle
  useEffect(() => {
    if (list?.transactions) {
      setRawTxs(list.transactions)
    }
  }, [list])

  // ——— 4) rawTxs değiştiğinde UI için map’le
  useEffect(() => {
    const mapped: Row[] = rawTxs.map((tx) => ({
      date: new Date().toLocaleDateString('tr-TR'),
      branch: tx.channel,
      account: tx.customerAccount,
      amount: `${tx.transactionAmount.toLocaleString('tr-TR', {
        minimumFractionDigits: 2,
      })} ${tx.currency}`,
      type: tx.opCode,
    }))
    setRows(mapped)
  }, [rawTxs])

  if (!visible) return null
  if (isLoading) return <div>Yükleniyor…</div>
  if (error) return <div>Hata oluştu: {(error as any).message}</div>

  const header = [
    { label: 'İşlem Tarihi' },
    { label: 'Şube' },
    { label: 'Hesap' },
    { label: 'Tutar' },
    { label: 'Açıklama' },
  ]

  return (
    <YourTableComponent
      header={header}
      data={rows}
      onClose={onClose}
      dataTestId={dataTestId}
    />
  )
}
