@Test
void testGetTransactionDetail_NullBody() throws Exception {
    // Arrange
    CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
    cashTransactionDTO.setCreateDate(new Date());

    CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
    storedRequest.setCheckedFlexibleAccount(Boolean.TRUE);
    storedRequest.setClientInfo(new ClientDTO());

    CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
    detailDTO.setTransactionId("txn123");
    detailDTO.setAccountNo("acc123");
    detailDTO.setAccountCurrency("TRY");
    detailDTO.setCurrency("TRY");
    detailDTO.setAmount(BigDecimal.valueOf(1000));
    detailDTO.setCashTransactionStoredRequest(storedRequest);

    List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

    // Mocking AccountClient methods to return ResponseEntity with null body
    ResponseEntity<ResponseAccountNumberWithCurrencyClient> responseEntity = ResponseEntity.ok(null);
    when(accountClient.accountNumberWithCurrency(anyString())).thenReturn(responseEntity);

    // Mocking getBalanceInfo
    BalanceDTO balanceDTO = new BalanceDTO();
    balanceDTO.setAvailableBalance("5000");
    balanceDTO.setOverdraftBalance(BigDecimal.valueOf(10000));

    ResponseBalanceInfo balanceInfo = new ResponseBalanceInfo();
    balanceInfo.setBalanceDTO(balanceDTO);

    ResponseEntity<ResponseBalanceInfo> responseBalanceInfo = ResponseEntity.ok(balanceInfo);
    when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenReturn(responseBalanceInfo);

    // Act & Assert
    AccountException exception = assertThrows(AccountException.class, () -> {
        customerNotificationService.getParameters(cashTransactionDTO, detailDTOList);
    });

    assertEquals("Hesap iban bilgileri bulunamadÄ±.", exception.getMessage());
}
