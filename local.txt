package com.ykb.corebanking.vault.money.deposit.withdraw.service.impl;

import com.ykb.architecture.micro.error.exception.MicroException;
import com.ykb.corebanking.vault.money.deposit.withdraw.constant.NotificationConstants;
import com.ykb.corebanking.vault.money.deposit.withdraw.constant.NAPConstant.PROCESS_CODE;
import com.ykb.corebanking.vault.money.deposit.withdraw.dto.*;
import com.ykb.corebanking.vault.money.deposit.withdraw.exception.AccountException;
import com.ykb.corebanking.vault.money.deposit.withdraw.kafka.producer.CustomerNotificationProducer;
import com.ykb.corebanking.vault.money.deposit.withdraw.micro.clients.AccountClient;
import com.ykb.corebanking.vault.money.deposit.withdraw.request.CashTransactionStoredRequest;
import com.ykb.corebanking.vault.money.deposit.withdraw.response.AccountInfoResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(SpringExtension.class)
class CustomerNotificationServiceTest {

    @InjectMocks
    CustomerNotificationService customerNotificationService;

    @Mock
    AccountClient accountClient;

    @Mock
    CustomerNotificationProducer notificationProducer;

    @Captor
    ArgumentCaptor<CustomerNotificationDTO> notificationCaptor;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    /**
     * 1) WITHDRAW senaryosu
     * sendToNotificationQueue'da 2 kez notification gönderilecek.
     *  - Birinci: Normal queue
     *  - İkinci : Push notification -> WITHDRAW => PARCEK_PUSH_SHORTNAME
     * Ayrıca totalBalance'ın currentBalance'tan gelmesi test ediliyor.
     */
    @Test
    void testSendToNotificationQueue_WithDRAW_PushAndCurrentBalance() throws AccountException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(100L);
        cashTransactionDTO.setProcessCode(PROCESS_CODE.WITHDRAW.getProcessCode());
        cashTransactionDTO.setCreateDate(new Date());
        cashTransactionDTO.setUpdateDate(new Date());
        cashTransactionDTO.setCreatedBy("testUserW");
        cashTransactionDTO.setUpdatedBy("testUserW");
        cashTransactionDTO.setBranchCode("326");

        // Detay
        ClientDTO clientDTO = new ClientDTO();
        clientDTO.setClientNo(2000L);
        clientDTO.setClientName("John Doe"); // Örnek

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setClientInfo(clientDTO);
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAccountNo("100200300");
        detailDTO.setCurrency("TL");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setAmount(BigDecimal.valueOf(500));
        detailDTO.setCashTransactionStoredRequest(storedRequest);
        // Komisyon yok
        detailDTO.setCommissionAmount(BigDecimal.ZERO);

        List<CashTransactionDetailDTO> detailList = Collections.singletonList(detailDTO);

        // Mock BalanceDTO (currentBalance set!)
        BalanceDTO balanceDTO = new BalanceDTO();
        balanceDTO.setAvailableBalance(BigDecimal.valueOf(2000));
        balanceDTO.setCurrentBalance(BigDecimal.valueOf(3000));  // Önemli
        balanceDTO.setValueBalance(BigDecimal.valueOf(4000));
        ResponseBalanceInfo balanceInfo = new ResponseBalanceInfo();
        balanceInfo.setBalanceDTO(balanceDTO);

        // Mock AccountInfo
        AccountInfoResponse accountInfoResponse = new AccountInfoResponse();
        accountInfoResponse.setIban("TRXXXXXX");
        accountInfoResponse.setIsFlexibleAccount(Boolean.FALSE);

        when(accountClient.getBalanceInfo(anyString(), anyBoolean()))
                .thenReturn(ResponseEntity.ok(balanceInfo));
        when(accountClient.getAccountByAccountNoWithoutException(anyString()))
                .thenReturn(ResponseEntity.ok(accountInfoResponse));

        // Act
        customerNotificationService.sendToNotificationQueue(cashTransactionDTO, detailList);

        // Assert
        // 2 kez sendMessageToNotificationQueue çağrılmalı
        verify(notificationProducer, times(2)).sendMessageToNotificationQueue(notificationCaptor.capture());

        // Gelen argümanları alalım
        List<CustomerNotificationDTO> notifications = notificationCaptor.getAllValues();
        assertEquals(2, notifications.size());

        // Birincisi normal queue
        CustomerNotificationDTO firstNotification = notifications.get(0);
        // Burada jobCode'un WITHDRAW sürecine göre normalde "TL_FXWithdrawalNotification" olması beklenir
        assertEquals(NotificationConstants.PARCEK_NOTIFICATION_SHORTNAME,
                     firstNotification.getTransactionHeader().getJobCode());

        // Ikincisi push notification
        CustomerNotificationDTO secondNotification = notifications.get(1);
        // WITHDRAW => PARCEK_PUSH_SHORTNAME
        assertEquals(NotificationConstants.PARCEK_PUSH_SHORTNAME,
                     secondNotification.getTransactionHeader().getJobCode());

        // Ayrıca totalBalance parametresinin "3000" (yani currentBalance) geldiğini de doğrulayabiliriz:
        Optional<TransactionDetails> totalBalanceDetail = secondNotification.getTransactionDetails()
                .stream()
                .filter(td -> "totalBalance".equals(td.getParameterName()))
                .findFirst();
        assertTrue(totalBalanceDetail.isPresent(), "totalBalance parametresi bulunmalı");
        assertTrue(totalBalanceDetail.get().getParameterValue().contains("3.000"), 
                   "totalBalance '3.000' (Alman formatında) içermeli");
    }

    /**
     * 2) DEPOSIT senaryosu
     * sendToNotificationQueue'da 2 kez notification gönderilecek.
     *  - Birinci: Normal queue
     *  - İkinci : Push notification -> DEPOSIT => PARYAT_PUSH_SHORTNAME
     */
    @Test
    void testSendToNotificationQueue_Deposit_PushAndCurrentBalance() throws AccountException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(101L);
        cashTransactionDTO.setProcessCode(PROCESS_CODE.DEPOSIT.getProcessCode());
        cashTransactionDTO.setCreateDate(new Date());
        cashTransactionDTO.setUpdateDate(new Date());
        cashTransactionDTO.setCreatedBy("testUserD");
        cashTransactionDTO.setUpdatedBy("testUserD");
        cashTransactionDTO.setBranchCode("327");

        // Detay
        ClientDTO clientDTO = new ClientDTO();
        clientDTO.setClientNo(3000L);
        clientDTO.setClientName("Jane Doe");

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setClientInfo(clientDTO);
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAccountNo("300400500");
        detailDTO.setCurrency("TL");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setAmount(BigDecimal.valueOf(2000));
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailList = Collections.singletonList(detailDTO);

        // Mock BalanceDTO (currentBalance set!)
        BalanceDTO balanceDTO = new BalanceDTO();
        balanceDTO.setAvailableBalance(BigDecimal.valueOf(4000));
        balanceDTO.setCurrentBalance(BigDecimal.valueOf(5000)); // Önemli
        balanceDTO.setValueBalance(BigDecimal.valueOf(6000));
        ResponseBalanceInfo balanceInfo = new ResponseBalanceInfo();
        balanceInfo.setBalanceDTO(balanceDTO);

        // Mock AccountInfo
        AccountInfoResponse accountInfoResponse = new AccountInfoResponse();
        accountInfoResponse.setIban("TRYYYYYY");
        accountInfoResponse.setIsFlexibleAccount(Boolean.TRUE); 
        // ... vs

        when(accountClient.getBalanceInfo(anyString(), anyBoolean()))
                .thenReturn(ResponseEntity.ok(balanceInfo));
        when(accountClient.getAccountByAccountNoWithoutException(anyString()))
                .thenReturn(ResponseEntity.ok(accountInfoResponse));

        // Act
        customerNotificationService.sendToNotificationQueue(cashTransactionDTO, detailList);

        // Assert
        verify(notificationProducer, times(2)).sendMessageToNotificationQueue(notificationCaptor.capture());
        List<CustomerNotificationDTO> notifications = notificationCaptor.getAllValues();
        assertEquals(2, notifications.size());

        // Birincisi normal
        CustomerNotificationDTO firstNotification = notifications.get(0);
        // DEPOSIT + Flexible => "TL_FXDepositNotification2" 
        // (getTransactionHeaders metoduna göre)
        assertEquals(NotificationConstants.PARYAT_NOTIFICATION_SHORTNAME2,
                     firstNotification.getTransactionHeader().getJobCode());

        // Ikincisi push
        CustomerNotificationDTO secondNotification = notifications.get(1);
        // DEPOSIT => PARYAT_PUSH_SHORTNAME
        assertEquals(NotificationConstants.PARYAT_PUSH_SHORTNAME,
                     secondNotification.getTransactionHeader().getJobCode());

        // totalBalance = currentBalance = 5000
        Optional<TransactionDetails> totalBalanceDetail = secondNotification.getTransactionDetails()
                .stream()
                .filter(td -> "totalBalance".equals(td.getParameterName()))
                .findFirst();
        assertTrue(totalBalanceDetail.isPresent());
        assertTrue(totalBalanceDetail.get().getParameterValue().contains("5.000"),
                   "totalBalance '5.000' içermeli (Alman formatı)");
    }

    /**
     * Aşağıdaki testler, zaten elinizdeki mevcut testleriniz.
     * Kalan kısımları da ekliyoruz ki tamamen güncel bir tam sınıf olsun.
     */

    @Test
    void testSendToNotificationQueue_Success() throws MicroException, AccountException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(1L);
        cashTransactionDTO.setCreateDate(new Date());
        cashTransactionDTO.setUpdateDate(new Date());
        cashTransactionDTO.setBranchCode("326");
        cashTransactionDTO.setCreatedBy("U058408");
        cashTransactionDTO.setUpdatedBy("U058408");
        cashTransactionDTO.setProcessCode(PROCESS_CODE.WITHDRAW.getProcessCode());

        ClientDTO clientDTO = new ClientDTO();
        clientDTO.setClientNo(1000L);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setCheckedFlexibleAccount(Boolean.TRUE);
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        storedRequest.setClientInfo(clientDTO);

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setTransactionId("txn123");
        detailDTO.setAccountNo("369");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setCurrency("TL");
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCashTransactionStoredRequest(storedRequest);
        detailDTO.setCommissionAmount(BigDecimal.ZERO);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        BalanceDTO balanceDTO = new BalanceDTO();
        balanceDTO.setAvailableBalance(BigDecimal.valueOf(5000));
        // currentBalance ekleyelim
        balanceDTO.setCurrentBalance(BigDecimal.valueOf(7000));
        balanceDTO.setValueBalance(BigDecimal.valueOf(6000));

        ResponseBalanceInfo balanceInfo = new ResponseBalanceInfo();
        balanceInfo.setBalanceDTO(balanceDTO);

        ResponseEntity<ResponseBalanceInfo> responseBalanceInfo = ResponseEntity.ok(balanceInfo);

        AccountInfoResponse accountInfoResponse = new AccountInfoResponse();
        accountInfoResponse.setIban("TRXXXXXX");
        accountInfoResponse.setIsFlexibleAccount(Boolean.FALSE);
        ResponseEntity<AccountInfoResponse> accountNumberEntity = ResponseEntity.ok(accountInfoResponse);

        // Mocking AccountClient methods
        when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenReturn(responseBalanceInfo);
        when(accountClient.getAccountByAccountNoWithoutException(anyString())).thenReturn(accountNumberEntity);

        // Act
        customerNotificationService.sendToNotificationQueue(cashTransactionDTO, detailDTOList);

        // Assert
        // Bu test normalde 2 kez çağrıyı doğrulamıyordu, ama push eklendiği için 2 kez bekleyebiliriz
        verify(notificationProducer, times(2)).sendMessageToNotificationQueue(any(CustomerNotificationDTO.class));
    }

    @Test
    void testGetParameters_Success() throws MicroException, AccountException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(2L);
        cashTransactionDTO.setCreateDate(new Date());
        cashTransactionDTO.setUpdateDate(new Date());
        cashTransactionDTO.setBranchCode("326");
        cashTransactionDTO.setCreatedBy("U058408");
        cashTransactionDTO.setUpdatedBy("U058408");
        cashTransactionDTO.setProcessCode(PROCESS_CODE.WITHDRAW.getProcessCode());

        ClientDTO clientDTO = new ClientDTO();
        clientDTO.setClientNo(123L);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setCheckedFlexibleAccount(Boolean.TRUE);
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        storedRequest.setClientInfo(clientDTO);

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setTransactionId("txn123");
        detailDTO.setAccountNo("acc123");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setCurrency("TL");
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCommissionAmount(BigDecimal.ZERO);
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        BalanceDTO balanceDTO = new BalanceDTO();
        balanceDTO.setAvailableBalance(BigDecimal.valueOf(5000));
        balanceDTO.setCurrentBalance(BigDecimal.valueOf(7000));
        balanceDTO.setValueBalance(BigDecimal.valueOf(6000));

        ResponseBalanceInfo balanceInfo = new ResponseBalanceInfo();
        balanceInfo.setBalanceDTO(balanceDTO);
        ResponseEntity<ResponseBalanceInfo> responseBalanceInfo = ResponseEntity.ok(balanceInfo);

        AccountInfoResponse accountInfoResponse = new AccountInfoResponse();
        accountInfoResponse.setIban("TRXXXXXX");
        accountInfoResponse.setIsFlexibleAccount(Boolean.FALSE);
        ResponseEntity<AccountInfoResponse> accountNumberEntity = ResponseEntity.ok(accountInfoResponse);

        when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenReturn(responseBalanceInfo);
        when(accountClient.getAccountByAccountNoWithoutException(anyString())).thenReturn(accountNumberEntity);

        // Act
        CustomerNotificationDTO result = customerNotificationService.getParameters(cashTransactionDTO, detailDTOList);

        // Assert
        assertNotNull(result);
        assertNotNull(result.getTransactionHeader());
        assertNotNull(result.getTransactionDetails());

        // totalBalance parametresinin 7000'e ayarlandığını ek olarak kontrol edebiliriz:
        Optional<TransactionDetails> totalBalanceDetail = result.getTransactionDetails().stream()
                .filter(td -> "totalBalance".equals(td.getParameterName()))
                .findFirst();
        assertTrue(totalBalanceDetail.isPresent());
        assertTrue(totalBalanceDetail.get().getParameterValue().contains("7.000"),
                   "totalBalance '7.000' içermeli (Almanca format)");
    }

    @Test
    void testSendToNotificationQueue_NullDetailList() {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(3L);

        // Act & Assert
        assertThrows(AccountException.class, () -> {
            customerNotificationService.sendToNotificationQueue(cashTransactionDTO, null);
        });
    }

    @Test
    void testSendToNotificationQueue_AccountExceptionWhenBalanceInfoFails() throws MicroException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(4L);

        ClientDTO clientDTO = new ClientDTO();
        clientDTO.setClientNo(999L);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setCheckedFlexibleAccount(Boolean.TRUE);
        storedRequest.setClientInfo(clientDTO);

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAccountNo("acc123");
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = new ArrayList<>();
        detailDTOList.add(detailDTO);

        when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenThrow(new RuntimeException("Error"));

        // Act & Assert
        assertThrows(AccountException.class, () -> {
            customerNotificationService.sendToNotificationQueue(cashTransactionDTO, detailDTOList);
        });
    }

    @Test
    void testGetParameters_AccountNotFound() throws MicroException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(5L);
        cashTransactionDTO.setProcessCode(PROCESS_CODE.WITHDRAW.getProcessCode());

        ClientDTO clientDTO = new ClientDTO();
        clientDTO.setClientNo(12345L);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setCheckedFlexibleAccount(Boolean.TRUE);
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        storedRequest.setClientInfo(clientDTO);

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setTransactionId("txn123");
        detailDTO.setAccountNo("accNotFound");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setCurrency("TL");
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCommissionAmount(BigDecimal.ZERO);
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        BalanceDTO balanceDTO = new BalanceDTO();
        balanceDTO.setAvailableBalance(BigDecimal.valueOf(5000));
        balanceDTO.setCurrentBalance(BigDecimal.valueOf(5500));
        balanceDTO.setValueBalance(BigDecimal.valueOf(6000));

        ResponseBalanceInfo balanceInfo = new ResponseBalanceInfo();
        balanceInfo.setBalanceDTO(balanceDTO);

        ResponseEntity<ResponseBalanceInfo> responseBalanceInfo = ResponseEntity.ok(balanceInfo);
        when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenReturn(responseBalanceInfo);

        // account bilgisi bulunamadığında null body dönecek
        when(accountClient.getAccountByAccountNoWithoutException(anyString())).thenReturn(ResponseEntity.ok(null));

        // Act & Assert
        AccountException exception = assertThrows(AccountException.class, () -> {
            customerNotificationService.getParameters(cashTransactionDTO, detailDTOList);
        });
        assertEquals("Hesap bilgileri bulunamadı.", exception.getMessage());
    }

    @Test
    void testGetParameters_ExceptionThrown() throws MicroException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(6L);
        cashTransactionDTO.setProcessCode(PROCESS_CODE.WITHDRAW.getProcessCode());

        ClientDTO clientDTO = new ClientDTO();
        clientDTO.setClientNo(12345L);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setClientInfo(clientDTO);

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAccountNo("accException");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setCurrency("TL");
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenThrow(new RuntimeException("Some error"));

        // Act & Assert
        AccountException exception = assertThrows(AccountException.class, () -> {
            customerNotificationService.getParameters(cashTransactionDTO, detailDTOList);
        });
        assertEquals("Hesap bilgileri bulunamadı.", exception.getMessage());
    }

    @Test
    void testGetParameters_Deposit_FlexibleAccount() throws MicroException, AccountException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(7L);
        cashTransactionDTO.setCreateDate(new Date());
        cashTransactionDTO.setUpdateDate(new Date()); 
        cashTransactionDTO.setProcessCode(PROCESS_CODE.DEPOSIT.getProcessCode());
        cashTransactionDTO.setCreatedBy("tester");
        cashTransactionDTO.setUpdatedBy("tester");

        ClientDTO clientDTO = new ClientDTO();
        clientDTO.setClientNo(99999L);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setClientInfo(clientDTO);

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setTransactionId("txn789");
        detailDTO.setAccountNo("accDeposit");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setCurrency("TL");
        detailDTO.setAmount(BigDecimal.valueOf(2000));
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        BalanceDTO balanceDTO = new BalanceDTO();
        balanceDTO.setAvailableBalance(BigDecimal.valueOf(10000));
        balanceDTO.setValueBalance(BigDecimal.valueOf(12000));
        balanceDTO.setCurrentBalance(BigDecimal.valueOf(13000));

        ResponseBalanceInfo balanceInfo = new ResponseBalanceInfo();
        balanceInfo.setBalanceDTO(balanceDTO);

        ResponseEntity<ResponseBalanceInfo> responseBalanceInfo = ResponseEntity.ok(balanceInfo);
        when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenReturn(responseBalanceInfo);

        AccountInfoResponse accountInfoResponse = new AccountInfoResponse();
        accountInfoResponse.setIban("TRXXXXXX");
        accountInfoResponse.setIsFlexibleAccount(Boolean.TRUE);

        ResponseEntity<AccountInfoResponse> accountNumberEntity = ResponseEntity.ok(accountInfoResponse);
        when(accountClient.getAccountByAccountNoWithoutException(anyString())).thenReturn(accountNumberEntity);

        // Act
        CustomerNotificationDTO result = customerNotificationService.getParameters(cashTransactionDTO, detailDTOList);

        // Assert
        assertNotNull(result);
        assertNotNull(result.getTransactionHeader());
        // Flexible account + DEPOSIT => PARYAT_NOTIFICATION_SHORTNAME2
        assertEquals(NotificationConstants.PARYAT_NOTIFICATION_SHORTNAME2, 
                     result.getTransactionHeader().getJobCode());

        // totalBalance = 13000
        Optional<TransactionDetails> totalBalanceDetail = result.getTransactionDetails().stream()
                .filter(td -> "totalBalance".equals(td.getParameterName()))
                .findFirst();
        assertTrue(totalBalanceDetail.isPresent());
        assertTrue(totalBalanceDetail.get().getParameterValue().contains("13.000"),
                   "13.000 içermeli");
    }


    /**
     * Aşağıda “calculateAmountTextAndIsKgvIncluded” vs. gibi
     * özel alt testleriniz de mevcut. Onları olduğu gibi koruyoruz.
     */

    @Test
    void testCalculateAmountTextAndIsKgvIncluded_NoCommission_NoKmv() throws Exception {
        // (Aynı test, kısaltmadım)
        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCurrency("TRY");
        detailDTO.setAccountCurrency("TRY");
        detailDTO.setCommissionAmount(BigDecimal.ZERO);
        detailDTO.setKmvAmount(BigDecimal.ZERO);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        Method method = CustomerNotificationService.class
                .getDeclaredMethod("calculateAmountTextAndIsKgvIncluded", List.class);
        method.setAccessible(true);

        // Act
        CustomerNotificationService.AmountCalculationResult result =
                (CustomerNotificationService.AmountCalculationResult) method.invoke(customerNotificationService, detailDTOList);

        // Assert
        assertEquals("1000 TRY", result.getAmountText());
        assertFalse(result.getIsKgvIncluded());
    }

    @Test
    void testCalculateAmountTextAndIsKgvIncluded_WithCommission() throws Exception {
        // (Aynı test, kısaltmadım)
        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCurrency("TL");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setCommissionAmount(BigDecimal.valueOf(50));

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        Method method = CustomerNotificationService.class
                .getDeclaredMethod("calculateAmountTextAndIsKgvIncluded", List.class);
        method.setAccessible(true);

        // Act
        CustomerNotificationService.AmountCalculationResult calculationResult =
                (CustomerNotificationService.AmountCalculationResult) method.invoke(customerNotificationService, detailDTOList);

        // Assert
        assertNotNull(calculationResult.getAmountText());
        assertFalse(calculationResult.getIsKgvIncluded());
    }

    @Test
    void testCalculateAmountTextAndIsKgvIncluded_WithKgv() throws Exception {
        // (Aynı test, kısaltmadım)
        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCurrency("USD");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setKmvAmount(BigDecimal.valueOf(100));

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        Method method = CustomerNotificationService.class
                .getDeclaredMethod("calculateAmountTextAndIsKgvIncluded", List.class);
        method.setAccessible(true);

        // Act
        CustomerNotificationService.AmountCalculationResult calculationResult =
                (CustomerNotificationService.AmountCalculationResult) method.invoke(customerNotificationService, detailDTOList);

        // Assert
        assertNotNull(calculationResult.getAmountText());
        assertTrue(calculationResult.getIsKgvIncluded());
    }

    @Test
    void testFormatDate() throws Exception {
        // ...
        Method formatDateMethod = CustomerNotificationService.class.getDeclaredMethod("formatDate", Date.class);
        formatDateMethod.setAccessible(true);

        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.HOUR_OF_DAY, 10);
        cal.set(Calendar.MINUTE, 30);
        Date date = cal.getTime();

        String formatted = (String) formatDateMethod.invoke(customerNotificationService, date);
        assertEquals("10:30", formatted);
    }

    @Test
    void testFormatCurrency() throws Exception {
        // ...
        Method formatCurrencyMethod = CustomerNotificationService.class
                .getDeclaredMethod("formatCurrency", String.class);
        formatCurrencyMethod.setAccessible(true);

        String formatted = (String) formatCurrencyMethod.invoke(customerNotificationService, "1234.56");
        assertNotNull(formatted);
        // Alman locale => "1.234,56" gibi
        assertTrue(formatted.contains(",") || formatted.contains("."));
    }

    // Sonraki alt testleriniz (Branch coverage) ...
    // ...
}
