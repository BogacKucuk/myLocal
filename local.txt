package com.ykb.corebanking.vault.money.deposit.withdraw.service.impl;

import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.ykb.corebanking.vault.money.deposit.withdraw.dto.CashTrxnParameterDTO;
import com.ykb.corebanking.vault.money.deposit.withdraw.exception.CashTrxnParameterException;
import com.ykb.corebanking.vault.money.deposit.withdraw.request.*;
import com.ykb.corebanking.vault.money.deposit.withdraw.response.*;
import com.ykb.corebanking.vault.money.deposit.withdraw.service.ICashTrxnInfoParameterService;
import com.ykb.corebanking.vault.money.deposit.withdraw.service.ICashTrxnSystemParameterService;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@ExtendWith(SpringExtension.class)
class CashTrxnParameterServiceTest {

    @InjectMocks
    private CashTrxnParameterService cashTrxnParameterService;

    @Mock
    private ICashTrxnInfoParameterService cashTrxnInfoParameterService;

    @Mock
    private ICashTrxnSystemParameterService cashTrxnSystemParameterService;

    @Test
    void when_getCashTrxnInfoParameterWithCache_shouldReturnParameter() {
        when(cashTrxnInfoParameterService.getCashTrxnInfoParameter(Mockito.any()))
                .thenReturn(createResponseCashTrxnInfoParameter());
        CashTrxnParameterDTO cashTrxnParameterDTO = cashTrxnParameterService.getCashTrxnInfoParameterWithCache("PARAMETER_NAME");
        assertTrue(cashTrxnParameterDTO != null && "VALUE".equals(cashTrxnParameterDTO.getValue()));
    }

    @Test
    void when_getCashTrxnSystemParameterWithCache_shouldReturnParameter() {
        when(cashTrxnSystemParameterService.getCashTrxnSystemParameter(Mockito.any()))
                .thenReturn(createResponseCashTrxnSystemParameter());
        CashTrxnParameterDTO cashTrxnParameterDTO = cashTrxnParameterService.getCashTrxnSystemParameterWithCache("PARAMETER_NAME");
        assertTrue(cashTrxnParameterDTO != null && "VALUE".equals(cashTrxnParameterDTO.getValue()));
    }

    // Yeni eklenen metotlar iÃ§in testler

    @Test
    void when_createCashTrxnParameter_withInfoTable_shouldCallInfoService() throws CashTrxnParameterException {
        ResponseCashTrxnCreateParameter mockResponse = new ResponseCashTrxnCreateParameter();
        mockResponse.setParameterName("INFO_PARAM");
        when(cashTrxnInfoParameterService.createInfoParameter(any(RequestCashTrxnCreateParameter.class))).thenReturn(mockResponse);

        RequestCashTrxnCreateParameter request = new RequestCashTrxnCreateParameter();
        request.setTable("INFO");
        ResponseCashTrxnCreateParameter response = cashTrxnParameterService.createCashTrxnParameter(request);

        assertNotNull(response);
        assertEquals("INFO_PARAM", response.getParameterName());
        verify(cashTrxnInfoParameterService, times(1)).createInfoParameter(request);
        verifyNoInteractions(cashTrxnSystemParameterService);
    }

    @Test
    void when_createCashTrxnParameter_withSystemTable_shouldCallSystemService() throws CashTrxnParameterException {
        ResponseCashTrxnCreateParameter mockResponse = new ResponseCashTrxnCreateParameter();
        mockResponse.setParameterName("SYS_PARAM");
        when(cashTrxnSystemParameterService.createSystemParameter(any(RequestCashTrxnCreateParameter.class))).thenReturn(mockResponse);

        RequestCashTrxnCreateParameter request = new RequestCashTrxnCreateParameter();
        request.setTable("SYSTEM");
        ResponseCashTrxnCreateParameter response = cashTrxnParameterService.createCashTrxnParameter(request);

        assertNotNull(response);
        assertEquals("SYS_PARAM", response.getParameterName());
        verify(cashTrxnSystemParameterService, times(1)).createSystemParameter(request);
        verifyNoInteractions(cashTrxnInfoParameterService);
    }

    @Test
    void when_deleteCashTrxnParameter_withInfoTable_shouldCallInfoService() throws CashTrxnParameterException {
        doNothing().when(cashTrxnInfoParameterService).deleteCashTrxnInfoParameter("PARAM_NAME");

        RequestCashTrxnDeleteParameter request = new RequestCashTrxnDeleteParameter();
        request.setTable("INFO");
        request.setParameterName("PARAM_NAME");

        assertDoesNotThrow(() -> cashTrxnParameterService.deleteCashTrxnParameter(request));
        verify(cashTrxnInfoParameterService, times(1)).deleteCashTrxnInfoParameter("PARAM_NAME");
        verifyNoInteractions(cashTrxnSystemParameterService);
    }

    @Test
    void when_deleteCashTrxnParameter_withSystemTable_shouldCallSystemService() throws CashTrxnParameterException {
        doNothing().when(cashTrxnSystemParameterService).deleteCashTrxnSystemParameter("SYS_NAME");

        RequestCashTrxnDeleteParameter request = new RequestCashTrxnDeleteParameter();
        request.setTable("SYSTEM");
        request.setParameterName("SYS_NAME");

        assertDoesNotThrow(() -> cashTrxnParameterService.deleteCashTrxnParameter(request));
        verify(cashTrxnSystemParameterService, times(1)).deleteCashTrxnSystemParameter("SYS_NAME");
        verifyNoInteractions(cashTrxnInfoParameterService);
    }

    @Test
    void when_updateCashTrxnParameter_withInfoTable_shouldCallInfoService() throws CashTrxnParameterException {
        ResponseCashTrxnUpdateParameter mockResponse = new ResponseCashTrxnUpdateParameter();
        mockResponse.setParameterName("INFO_UPDATED");
        when(cashTrxnInfoParameterService.updateCashTrxnInfoParameter(any(RequestCashTrxnUpdateParameter.class))).thenReturn(mockResponse);

        RequestCashTrxnUpdateParameter request = new RequestCashTrxnUpdateParameter();
        request.setTable("INFO");

        ResponseCashTrxnUpdateParameter response = cashTrxnParameterService.updateCashTrxnParameter(request);
        assertNotNull(response);
        assertEquals("INFO_UPDATED", response.getParameterName());
        verify(cashTrxnInfoParameterService, times(1)).updateCashTrxnInfoParameter(request);
        verifyNoInteractions(cashTrxnSystemParameterService);
    }

    @Test
    void when_updateCashTrxnParameter_withSystemTable_shouldCallSystemService() throws CashTrxnParameterException {
        ResponseCashTrxnUpdateParameter mockResponse = new ResponseCashTrxnUpdateParameter();
        mockResponse.setParameterName("SYS_UPDATED");
        when(cashTrxnSystemParameterService.updateCashTrxnSystemParameter(any(RequestCashTrxnUpdateParameter.class))).thenReturn(mockResponse);

        RequestCashTrxnUpdateParameter request = new RequestCashTrxnUpdateParameter();
        request.setTable("SYSTEM");

        ResponseCashTrxnUpdateParameter response = cashTrxnParameterService.updateCashTrxnParameter(request);
        assertNotNull(response);
        assertEquals("SYS_UPDATED", response.getParameterName());
        verify(cashTrxnSystemParameterService, times(1)).updateCashTrxnSystemParameter(request);
        verifyNoInteractions(cashTrxnInfoParameterService);
    }

    @Test
    void when_searchCashTrxnParameter_forInfoLikeSearch_shouldCall_getCashTrxnInfoParametersContainingWithCache() {
        RequestCashTrxnSearchParameter request = new RequestCashTrxnSearchParameter();
        request.setTable("INFO");
        request.setParameterName("PARAM");
        request.setLikeSearch(true);

        CashTrxnParameterDTO dto = createCashTrxnParameterDTO("INFO_PARAM", "VAL");
        when(cashTrxnInfoParameterService.getCashTrxnInfoParametersContaining(any()))
                .thenReturn(createInfoParameterListResponse(Arrays.asList(dto)));

        ResponseCashTrxnSearchParameter response = cashTrxnParameterService.searchCashTrxnParameter(request);
        assertNotNull(response);
        assertNotNull(response.getCashTrxnParameterDTOList());
        assertEquals(1, response.getCashTrxnParameterDTOList().size());
        assertEquals("VAL", response.getCashTrxnParameterDTOList().get(0).getValue());
    }

    @Test
    void when_searchCashTrxnParameter_forInfoExactSearch_shouldCall_getCashTrxnInfoParameterWithCache() {
        RequestCashTrxnSearchParameter request = new RequestCashTrxnSearchParameter();
        request.setTable("INFO");
        request.setParameterName("PARAM");
        request.setLikeSearch(false);

        when(cashTrxnInfoParameterService.getCashTrxnInfoParameter(any()))
                .thenReturn(createResponseCashTrxnInfoParameter());

        ResponseCashTrxnSearchParameter response = cashTrxnParameterService.searchCashTrxnParameter(request);
        assertNotNull(response);
        assertNotNull(response.getCashTrxnParameterDTOList());
        assertEquals(1, response.getCashTrxnParameterDTOList().size());
        assertEquals("VALUE", response.getCashTrxnParameterDTOList().get(0).getValue());
    }

    @Test
    void when_searchCashTrxnParameter_forSystemLikeSearch_shouldCall_getCashTrxnSystemParametersContainingWithCache() {
        RequestCashTrxnSearchParameter request = new RequestCashTrxnSearchParameter();
        request.setTable("SYSTEM");
        request.setParameterName("SYS_PARAM");
        request.setLikeSearch(true);

        CashTrxnParameterDTO dto = createCashTrxnParameterDTO("SYS_PARAM", "SYS_VAL");
        when(cashTrxnSystemParameterService.getCashTrxnSystemParametersContaining(any()))
                .thenReturn(createSystemParameterListResponse(Arrays.asList(dto)));

        ResponseCashTrxnSearchParameter response = cashTrxnParameterService.searchCashTrxnParameter(request);
        assertNotNull(response);
        assertNotNull(response.getCashTrxnParameterDTOList());
        assertEquals(1, response.getCashTrxnParameterDTOList().size());
        assertEquals("SYS_VAL", response.getCashTrxnParameterDTOList().get(0).getValue());
    }

    @Test
    void when_searchCashTrxnParameter_forSystemExactSearch_shouldCall_getCashTrxnSystemParameterWithCache() {
        RequestCashTrxnSearchParameter request = new RequestCashTrxnSearchParameter();
        request.setTable("SYSTEM");
        request.setParameterName("SYS_PARAM");
        request.setLikeSearch(false);

        when(cashTrxnSystemParameterService.getCashTrxnSystemParameter(any()))
                .thenReturn(createResponseCashTrxnSystemParameter());

        ResponseCashTrxnSearchParameter response = cashTrxnParameterService.searchCashTrxnParameter(request);
        assertNotNull(response);
        assertNotNull(response.getCashTrxnParameterDTOList());
        assertEquals(1, response.getCashTrxnParameterDTOList().size());
        assertEquals("VALUE", response.getCashTrxnParameterDTOList().get(0).getValue());
    }

    @Test
    void when_getCashTrxnSystemParametersContainingWithCache_shouldReturnList() {
        CashTrxnParameterDTO dto = createCashTrxnParameterDTO("SYSTEM_PARAM", "SYSTEM_VAL");
        when(cashTrxnSystemParameterService.getCashTrxnSystemParametersContaining(any()))
                .thenReturn(createSystemParameterListResponse(Arrays.asList(dto)));

        List<CashTrxnParameterDTO> result = cashTrxnParameterService.getCashTrxnSystemParametersContainingWithCache("SYSTEM_PARAM");
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals("SYSTEM_VAL", result.get(0).getValue());
    }

    @Test
    void when_getCashTrxnSystemParametersContainingWithCache_noResults_shouldReturnEmptyList() {
        when(cashTrxnSystemParameterService.getCashTrxnSystemParametersContaining(any()))
                .thenReturn(createSystemParameterListResponse(Collections.emptyList()));

        List<CashTrxnParameterDTO> result = cashTrxnParameterService.getCashTrxnSystemParametersContainingWithCache("NON_EXISTING");
        // Dikkat: Kodda eÄer boÅ dÃ¶nerse boÅ list (new ArrayList<>) olarak set ediliyor. Null dÃ¶nmeyeceÄini varsayÄ±yoruz.
        assertNotNull(result);
        assertTrue(result.isEmpty());
    }

    private ResponseCashTrxnInfoParameter createResponseCashTrxnInfoParameter() {
        ResponseCashTrxnInfoParameter response = new ResponseCashTrxnInfoParameter();
        response.setCashTrxnParameterDTO(createCashTrxnParameterDTO("PARAMETER_NAME", "VALUE"));
        return response;
    }

    private ResponseCashTrxnSystemParameter createResponseCashTrxnSystemParameter() {
        ResponseCashTrxnSystemParameter response = new ResponseCashTrxnSystemParameter();
        response.setCashTrxnParameterDTO(createCashTrxnParameterDTO("PARAMETER_NAME", "VALUE"));
        return response;
    }

    private CashTrxnParameterDTO createCashTrxnParameterDTO(String name, String value) {
        CashTrxnParameterDTO dto = new CashTrxnParameterDTO();
        dto.setParameterName(name);
        dto.setValue(value);
        return dto;
    }

    private ResponseCashTrxnInfoParameterList createInfoParameterListResponse(List<CashTrxnParameterDTO> dtoList) {
        ResponseCashTrxnInfoParameterList response = new ResponseCashTrxnInfoParameterList();
        response.setCashTrxnParameterDTOList(dtoList == null || dtoList.isEmpty() ? null : dtoList);
        return response;
    }

    private ResponseCashTrxnSystemParameterList createSystemParameterListResponse(List<CashTrxnParameterDTO> dtoList) {
        ResponseCashTrxnSystemParameterList response = new ResponseCashTrxnSystemParameterList();
        response.setCashTrxnParameterDTOList(dtoList == null || dtoList.isEmpty() ? null : dtoList);
        return response;
    }
}
