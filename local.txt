package com.ykb.corebanking.tellerline.receipt.controller;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;

import com.ykb.corebaking.tellerline.receipt.exception.ReceiptException;
import com.ykb.corebanking.tellerline.receipt.controller.response.ResponseAdcReceiptDisplayList;
import com.ykb.corebanking.tellerline.receipt.controller.response.ResponseAdcReceiptListing;
import com.ykb.corebanking.tellerline.receipt.remote.service.interfaces.IAdcElectronicReceiptService;
import com.ykb.corebanking.tellerline.receipt.response.ResponseAdcWrapperSendMail;
import com.ykb.corebanking.tellerline.receipt.service.interfaces.IReceiptAlternativeDistributionChannelsService;
import com.ykb.corebanking.tellerline.receipt.service.interfaces.IReceiptDisplayService;
import com.ykb.corebanking.tellerline.receipt.service.interfaces.IReceiptLogService;
// --- CHANGED CODE START
import com.ykb.corebanking.tellerline.receipt.service.interfaces.IReceiptMailWrapperService;
// --- CHANGED CODE END
import com.ykb.corebanking.tellerline.receipt.util.ReceiptAlternativeDistributionChannelsServiceTestUtil;
import com.ykb.corebanking.tellerline.receipt.util.query.exception.QueryException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit.jupiter.SpringExtension;

@ExtendWith(SpringExtension.class)
class ReceiptAlternativeDistributionChannelsControllerTest {

    @InjectMocks
    ReceiptAlternativeDistributionChannelsController controller;

    @Mock
    IReceiptAlternativeDistributionChannelsService service;

    @Mock
    IReceiptDisplayService receiptDisplayService;

    @Mock
    IReceiptLogService receiptLogService;

    @Mock
    IAdcElectronicReceiptService adcElectronicReceiptService;
    
    // --- CHANGED CODE START
    @Mock
    IReceiptMailWrapperService receiptMailWrapperService;
    // --- CHANGED CODE END

    @Test
    void whenInquired_shouldReturnHttpStatusOk() {
        when(service.getReceiptList(Mockito.any())).thenReturn(ReceiptAlternativeDistributionChannelsServiceTestUtil.getResponseReceiptAdcInquiry_Successfull());
        ResponseEntity<ResponseAdcReceiptListing> httpResponse = controller.inquireReceipt(ReceiptAlternativeDistributionChannelsServiceTestUtil.getRequestReceiptAdcInquiry_Fully());
        assertThat(httpResponse.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertTrue(httpResponse.getBody().getIsSuccessful());
    }

    @Test
    void whenAdcGetDisplay_shouldReturnHttpStatusOk() throws ReceiptException, QueryException {
        when(receiptDisplayService.display(Mockito.any())).thenReturn(ReceiptAlternativeDistributionChannelsServiceTestUtil.getResponseReceiptDisplay());
        when(service.getReceiptDisplayList(Mockito.any())).thenReturn(ReceiptAlternativeDistributionChannelsServiceTestUtil.getResponseAdcReceiptDisplay());
        ResponseEntity<ResponseAdcReceiptDisplayList> httpResponse = controller.adcGetDisplay(ReceiptAlternativeDistributionChannelsServiceTestUtil.getRequestReceiptDisplayAdc());
        assertThat(httpResponse.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertFalse(httpResponse.getBody().getResponseAdcReceiptDisplay().get(0).getIsSuccessful());
    }

    @Test
    void whenAdcGetDisplay_shouldReturnInternalServerError() throws Exception {
        when(receiptDisplayService.display(Mockito.any())).thenReturn(ReceiptAlternativeDistributionChannelsServiceTestUtil.getResponseReceiptDisplay());
        when(service.getReceiptDisplayList(Mockito.any())).thenThrow(ReceiptException.class);
        ResponseEntity<ResponseAdcReceiptDisplayList> httpResponse = controller.adcGetDisplay(ReceiptAlternativeDistributionChannelsServiceTestUtil.getRequestReceiptDisplayAdc());
        assertThat(httpResponse.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);
    }

    @Test
    void whenInquired_withAccountAndCurrency_shouldModifyAccountField() {
        var request = ReceiptAlternativeDistributionChannelsServiceTestUtil.getRequestReceiptAdcInquiry_Fully();
        request.setAccount("123456");
        request.setCurrency("USD");

        when(service.getReceiptList(Mockito.any())).thenReturn(ReceiptAlternativeDistributionChannelsServiceTestUtil.getResponseReceiptAdcInquiry_Successfull());
        ResponseEntity<ResponseAdcReceiptListing> httpResponse = controller.inquireReceipt(request);

        assertThat(httpResponse.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertTrue(httpResponse.getBody().getIsSuccessful());
        // account değerinin "123456    USD" olarak güncellendiğini test edelim
        assertThat(request.getAccount()).isEqualTo("123456    USD");
    }

    @Test
    void whenAdcGetDisplay_withAccountAndCurrency_shouldModifyAccountNoField() throws ReceiptException, QueryException {
        var request = ReceiptAlternativeDistributionChannelsServiceTestUtil.getRequestReceiptDisplayAdc();
        request.getRequestReceiptAdcCriteriaList().get(0).setAccount("123456");
        request.getRequestReceiptAdcCriteriaList().get(0).setCurrency("EUR");

        when(service.getReceiptDisplayList(Mockito.any())).thenReturn(ReceiptAlternativeDistributionChannelsServiceTestUtil.getResponseAdcReceiptDisplay());
        ResponseEntity<ResponseAdcReceiptDisplayList> httpResponse = controller.adcGetDisplay(request);

        assertThat(httpResponse.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertFalse(httpResponse.getBody().getResponseAdcReceiptDisplay().get(0).getIsSuccessful());
        // accountNo değerinin "123456    EUR" olarak güncellendiğini test edelim
        assertThat(request.getRequestReceiptAdcCriteriaList().get(0).getAccountNo()).isEqualTo("123456    EUR");
    }

    // --- CHANGED CODE START

    /**
     * Yeni eklenen if blokları doğrultusunda sendEmailAdc metodunun
     * account ve currency alanlarını birleştirip accountNo alanına set ettiğini
     * basitçe test eden senaryodur.
     */
    @Test
    void whenSendEmailAdc_withAccountAndCurrency_shouldModifyAccountNoField() {
        // given
        var request = ReceiptAlternativeDistributionChannelsServiceTestUtil.getRequestReceiptSendMailAdc();
        request.getProcessReceiptList().get(0).setAccount("000111222");
        request.getProcessReceiptList().get(0).setCurrency("USD");

        // Mail servisinin cevabını mocklayalım
        var mockResponse = new ResponseAdcWrapperSendMail();
        mockResponse.setIsSuccessful(true);
        when(receiptMailWrapperService.sendMail(Mockito.any())).thenReturn(mockResponse);

        // when
        ResponseEntity<ResponseAdcWrapperSendMail> httpResponse = controller.sendEmailAdc(request);

        // then
        assertThat(httpResponse.getStatusCode()).isEqualTo(HttpStatus.OK);
        // accountNo değerinin "000111222    USD" olarak güncellendiğini test edelim
        assertThat(request.getProcessReceiptList().get(0).getAccountNo()).isEqualTo("000111222    USD");
        // Servis cevabının başarılı geldiğini de test edelim
        assertTrue(httpResponse.getBody().getIsSuccessful());
    }

    /**
     * ProcessReceiptList null olduğunda veya boş olduğunda 
     * exception fırlatılmadan OK dönüldüğünü basitçe test eden senaryodur.
     */
    @Test
    void whenSendEmailAdc_withNullProcessReceiptList_shouldReturnOkWithoutProcessing() {
        // given
        var request = ReceiptAlternativeDistributionChannelsServiceTestUtil.getRequestReceiptSendMailAdc();
        request.setProcessReceiptList(null);

        when(receiptMailWrapperService.sendMail(Mockito.any())).thenReturn(new ResponseAdcWrapperSendMail());

        // when
        ResponseEntity<ResponseAdcWrapperSendMail> httpResponse = controller.sendEmailAdc(request);

        // then
        assertThat(httpResponse.getStatusCode()).isEqualTo(HttpStatus.OK);
        // İşlem sonunda herhangi bir hata ya da NPE olmamalı
        assertThat(httpResponse.getBody()).isNotNull();
    }

    // --- CHANGED CODE END

}

