package com.garantibbva.depositwithdrawalmngt.depositwithdrawalchannel.service.mapper;

import com.garantibbva.depositwithdrawalmngt.depositwithdrawalchannel.service.mapper.config.GrpcMapperConfig;
import com.garantibbva.depositwithdrawalmngt.depositwithdrawalchannel.service.model.request.DigitalOrderReadRequestDto;
import com.garantibbva.depositwithdrawalmngt.depositwithdrawalchannel.service.model.response.DigitalOrderReadResponseDto;
import com.garantibbva.depositwithdrawalmngt.depositwithdrawalchannel.service.model.response.ReadBranchInstructionDepositWithdrawalDto;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.proto.DigitalOrderProto;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.proto.DigitalOrderProto.ReadBranchInstructionDepositWithdrawal;
import com.garantibbvaportfoy.utility.bigdecimal.proto.BigDecimalProto;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.Named;
import org.mapstruct.factory.Mappers;

import java.math.BigDecimal;
import java.util.List;
import java.util.stream.Collectors;

@Mapper(config = GrpcMapperConfig.class)
public interface DigitalOrderMapper {

    DigitalOrderMapper INSTANCE = Mappers.getMapper(DigitalOrderMapper.class);

    // Request mapping - Java'dan Proto'ya (BigDecimal dönüşümü ile)
    @Mapping(target = "amount", source = "amount", qualifiedByName = "toProtoBigDecimal")
    DigitalOrderProto.DigitalOrderReadRequest toGrpcRequest(DigitalOrderReadRequestDto requestDto);

    // Response mapping - Manuel yapıyoruz çünkü liste mapping sorunu var
    default DigitalOrderReadResponseDto toResponseDto(DigitalOrderProto.DigitalOrderReadResponse grpcResponse) {
        if (grpcResponse == null) {
            return null;
        }
        
        DigitalOrderReadResponseDto responseDto = new DigitalOrderReadResponseDto();
        
        // Liste mapping - her bir gRPC item'ı DTO'ya çeviriyoruz
        if (grpcResponse.getReadBranchInstructionDepositWithdrawalList() != null) {
            List<ReadBranchInstructionDepositWithdrawalDto> dtoList = 
                grpcResponse.getReadBranchInstructionDepositWithdrawalList()
                    .stream()
                    .map(this::toReadBranchInstructionDepositWithdrawalDto)
                    .collect(Collectors.toList());
            
            responseDto.setReadBranchInstructionDepositWithdrawal(dtoList);
        }
        
        return responseDto;
    }

    // Nested object mapping - Proto'dan Java DTO'ya (BigDecimal dönüşümü ile)
    @Mapping(target = "amount", source = "amount", qualifiedByName = "fromProtoBigDecimal")
    ReadBranchInstructionDepositWithdrawalDto toReadBranchInstructionDepositWithdrawalDto(
        ReadBranchInstructionDepositWithdrawal grpcItem);

    // Java BigDecimal -> Proto BigDecimal (Request için)
    @Named("toProtoBigDecimal")
    default BigDecimalProto.BigDecimal toProtoBigDecimal(BigDecimal bigDecimal) {
        if (bigDecimal == null) {
            return null;
        }
        
        return BigDecimalProto.BigDecimal.newBuilder()
                .setScale((int) bigDecimal.scale()) // uint32 -> int cast
                .setPrecision(bigDecimal.precision())
                .setValue(com.google.protobuf.ByteString.copyFrom(bigDecimal.unscaledValue().toByteArray()))
                .build();
    }

    // Proto BigDecimal -> Java BigDecimal (Response için)
    @Named("fromProtoBigDecimal")
    default BigDecimal fromProtoBigDecimal(BigDecimalProto.BigDecimal protoBigDecimal) {
        if (protoBigDecimal == null) {
            return null;
        }
        
        return new BigDecimal(
            new java.math.BigInteger(protoBigDecimal.getValue().toByteArray()),
            (int) protoBigDecimal.getScale() // uint32 -> int cast
        );
    }
}

// Alternatif Çözüm - Sadece Mapping annotation'ı ile
@Mapper(config = GrpcMapperConfig.class)
public interface DigitalOrderMapperAlternative {

    DigitalOrderMapper INSTANCE = Mappers.getMapper(DigitalOrderMapper.class);

    @Mapping(target = "amount", source = "amount", qualifiedByName = "toProtoBigDecimal")
    DigitalOrderProto.DigitalOrderReadRequest toGrpcRequest(DigitalOrderReadRequestDto requestDto);

    // Liste field'ını açık şekilde map ediyoruz
    @Mapping(target = "readBranchInstructionDepositWithdrawal", 
             source = "readBranchInstructionDepositWithdrawalList")
    DigitalOrderReadResponseDto toResponseDto(DigitalOrderProto.DigitalOrderReadResponse grpcResponse);

    // Liste mapping
    List<ReadBranchInstructionDepositWithdrawalDto> mapList(
        List<ReadBranchInstructionDepositWithdrawal> grpcList);

    @Mapping(target = "amount", source = "amount", qualifiedByName = "fromProtoBigDecimal")
    ReadBranchInstructionDepositWithdrawalDto toReadBranchInstructionDepositWithdrawalDto(
        ReadBranchInstructionDepositWithdrawal grpcItem);

    @Named("toProtoBigDecimal")
    default BigDecimalProto.BigDecimal toProtoBigDecimal(BigDecimal bigDecimal) {
        // same implementation...
    }

    @Named("fromProtoBigDecimal") 
    default BigDecimal fromProtoBigDecimal(BigDecimalProto.BigDecimal protoBigDecimal) {
        // same implementation...
    }
}
