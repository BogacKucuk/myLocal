function updateParentIfAnyChildUnchecked(docsMap, checksArr, childKey) {
  const parentKey = docsMap[childKey]?.parent;
  if (!parentKey) return; // Yukarıda parent yoksa dur.

  // Parent'ın tüm child'ları
  const siblings = docsMap[parentKey]?.children || [];

  // Hepsi checked mi?
  const allSiblingsChecked = siblings.every((sKey) => {
    const found = checksArr.find((c) => c.id === sKey);
    return found?.checked === true;
  });

  // Hepsi checked DEĞİLSE => parent’ı false yap
  if (!allSiblingsChecked) {
    const parentIndex = checksArr.findIndex((c) => c.id === parentKey);
    if (parentIndex > -1) {
      checksArr[parentIndex] = {
        ...checksArr[parentIndex],
        checked: false,
      };
      // Daha üst parent da etkilenebilir, onu da güncellemek istersen:
      updateParentIfAnyChildUnchecked(docsMap, checksArr, parentKey);
    }
  }
}






const toggleChecked = (e) => {
  const clickedId = e.target.id;
  // Dizi + içindeki objelerin kopyası
  const updatedChecks = bbtDocsChecks.map((item) => ({ ...item }));

  const foundIndex = updatedChecks.findIndex((item) => item.id === clickedId);
  if (foundIndex < 0) return;

  const oldValue = updatedChecks[foundIndex].checked;
  const newValue = !oldValue;

  // Seçilen öğeyi de kopyalayarak güncelliyoruz
  updatedChecks[foundIndex] = {
    ...updatedChecks[foundIndex],
    checked: newValue,
  };

  // Parent ise alt child'ları da güncelle
  if (docsMap[clickedId]?.children?.length > 0) {
    checkAllChildren(docsMap, updatedChecks, clickedId, newValue);
  }

  // Child true olduysa parent’ı kontrol et (hepsi true ise parent true olsun).
  if (newValue === true) {
    updateParentIfAllChildrenChecked(docsMap, updatedChecks, clickedId);
  } 
  // Child false olduysa parent’ı da false yap (en az bir child false ise parent da false olmalı).
  else {
    updateParentIfAnyChildUnchecked(docsMap, updatedChecks, clickedId);
  }

  setBbtDocsChecks(updatedChecks);
  dispatch(moneyDepositActions.setBbtDocsChecks(updatedChecks));
};
