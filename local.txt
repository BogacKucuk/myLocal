package com.ykb.corebanking.vault.money.deposit.withdraw.service.impl;

import com.ykb.architecture.micro.error.exception.MicroException;
import com.ykb.corebanking.vault.money.deposit.withdraw.constant.NotificationConstants;
import com.ykb.corebanking.vault.money.deposit.withdraw.dto.*;
import com.ykb.corebanking.vault.money.deposit.withdraw.exception.AccountException;
import com.ykb.corebanking.vault.money.deposit.withdraw.kafka.producer.CustomerNotificationProducer;
import com.ykb.corebanking.vault.money.deposit.withdraw.micro.clients.AccountClient;
import com.ykb.corebanking.vault.money.deposit.withdraw.request.CashTransactionStoredRequest;
import com.ykb.corebanking.vault.money.deposit.withdraw.response.AccountInfoResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(SpringExtension.class)
class CustomerNotificationServiceTest {

    @InjectMocks
    CustomerNotificationService customerNotificationService;

    @Mock
    AccountClient accountClient;

    @Mock
    CustomerNotificationProducer notificationProducer;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testSendToNotificationQueue_Success() throws MicroException, AccountException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(1L);
        cashTransactionDTO.setCreateDate(new Date());
        // --> Update date ekleyelim (NullPointer almayalÄ±m):
        cashTransactionDTO.setUpdateDate(new Date());

        cashTransactionDTO.setBranchCode("326");
        cashTransactionDTO.setCreatedBy("U058408");
        cashTransactionDTO.setUpdatedBy("U058408");
        cashTransactionDTO.setProcessCode("WITHDRAW");

        ClientDTO clientDTO = new ClientDTO();
        clientDTO.setClientNo(1000L);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setCheckedFlexibleAccount(Boolean.TRUE);
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        storedRequest.setClientInfo(clientDTO);

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setTransactionId("txn123");
        detailDTO.setAccountNo("369");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setCurrency("TL");
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCashTransactionStoredRequest(storedRequest);
        detailDTO.setCommissionAmount(BigDecimal.ZERO);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        BalanceDTO balanceDTO = new BalanceDTO();
        balanceDTO.setAvailableBalance(BigDecimal.valueOf(5000));
        balanceDTO.setOverDraftBalance(BigDecimal.valueOf(10000));
        balanceDTO.setValueBalance(BigDecimal.valueOf(6000));

        ResponseBalanceInfo balanceInfo = new ResponseBalanceInfo();
        balanceInfo.setBalanceDTO(balanceDTO);

        ResponseEntity<ResponseBalanceInfo> responseBalanceInfo = ResponseEntity.ok(balanceInfo);

        AccountInfoResponse accountInfoResponse = new AccountInfoResponse();
        accountInfoResponse.setIban("TRXXXXXX");
        accountInfoResponse.setIsFlexibleAccount(Boolean.FALSE);
        ResponseEntity<AccountInfoResponse> accountNumberEntity = ResponseEntity.ok(accountInfoResponse);

        // Mocking AccountClient methods
        when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenReturn(responseBalanceInfo);
        when(accountClient.getAccountByAccountNoWithoutException(anyString())).thenReturn(accountNumberEntity);

        // Act
        customerNotificationService.sendToNotificationQueue(cashTransactionDTO, detailDTOList);

        // Assert
        verify(notificationProducer, times(1)).sendMessageToNotificationQueue(any(CustomerNotificationDTO.class));
    }

    @Test
    void testGetParameters_Success() throws MicroException, AccountException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(2L);
        cashTransactionDTO.setCreateDate(new Date());
        // --> Update date ekleyelim:
        cashTransactionDTO.setUpdateDate(new Date());

        cashTransactionDTO.setBranchCode("326");
        cashTransactionDTO.setCreatedBy("U058408");
        cashTransactionDTO.setUpdatedBy("U058408");
        cashTransactionDTO.setProcessCode("WITHDRAW");

        ClientDTO clientDTO = new ClientDTO();
        clientDTO.setClientNo(123L);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setCheckedFlexibleAccount(Boolean.TRUE);
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        storedRequest.setClientInfo(clientDTO);

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setTransactionId("txn123");
        detailDTO.setAccountNo("acc123");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setCurrency("TL");
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCommissionAmount(BigDecimal.ZERO);
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        BalanceDTO balanceDTO = new BalanceDTO();
        balanceDTO.setAvailableBalance(BigDecimal.valueOf(5000));
        balanceDTO.setOverDraftBalance(BigDecimal.valueOf(10000));
        balanceDTO.setValueBalance(BigDecimal.valueOf(6000));

        ResponseBalanceInfo balanceInfo = new ResponseBalanceInfo();
        balanceInfo.setBalanceDTO(balanceDTO);
        ResponseEntity<ResponseBalanceInfo> responseBalanceInfo = ResponseEntity.ok(balanceInfo);

        AccountInfoResponse accountInfoResponse = new AccountInfoResponse();
        accountInfoResponse.setIban("TRXXXXXX");
        accountInfoResponse.setIsFlexibleAccount(Boolean.FALSE);
        ResponseEntity<AccountInfoResponse> accountNumberEntity = ResponseEntity.ok(accountInfoResponse);

        when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenReturn(responseBalanceInfo);
        when(accountClient.getAccountByAccountNoWithoutException(anyString())).thenReturn(accountNumberEntity);

        // Act
        CustomerNotificationDTO result = customerNotificationService.getParameters(cashTransactionDTO, detailDTOList);

        // Assert
        assertNotNull(result);
        assertNotNull(result.getTransactionHeader());
        assertNotNull(result.getTransactionDetails());
    }

    @Test
    void testSendToNotificationQueue_NullDetailList() {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(3L);

        // Act & Assert
        assertThrows(AccountException.class, () -> {
            customerNotificationService.sendToNotificationQueue(cashTransactionDTO, null);
        });
    }

    @Test
    void testSendToNotificationQueue_AccountExceptionWhenBalanceInfoFails() throws MicroException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(4L);

        ClientDTO clientDTO = new ClientDTO();
        clientDTO.setClientNo(999L);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setCheckedFlexibleAccount(Boolean.TRUE);
        storedRequest.setClientInfo(clientDTO);

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAccountNo("acc123");
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = new ArrayList<>();
        detailDTOList.add(detailDTO);

        when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenThrow(new RuntimeException("Error"));

        // Act & Assert
        assertThrows(AccountException.class, () -> {
            customerNotificationService.sendToNotificationQueue(cashTransactionDTO, detailDTOList);
        });
    }

    @Test
    void testGetParameters_AccountNotFound() throws MicroException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(5L);
        cashTransactionDTO.setProcessCode("WITHDRAW");

        ClientDTO clientDTO = new ClientDTO();
        clientDTO.setClientNo(12345L);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setCheckedFlexibleAccount(Boolean.TRUE);
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        storedRequest.setClientInfo(clientDTO);

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setTransactionId("txn123");
        detailDTO.setAccountNo("accNotFound");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setCurrency("TL");
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCommissionAmount(BigDecimal.ZERO);
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        BalanceDTO balanceDTO = new BalanceDTO();
        balanceDTO.setAvailableBalance(BigDecimal.valueOf(5000));
        balanceDTO.setValueBalance(BigDecimal.valueOf(6000));

        ResponseBalanceInfo balanceInfo = new ResponseBalanceInfo();
        balanceInfo.setBalanceDTO(balanceDTO);

        ResponseEntity<ResponseBalanceInfo> responseBalanceInfo = ResponseEntity.ok(balanceInfo);
        when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenReturn(responseBalanceInfo);

        // account bilgisi bulunamadÄ±ÄÄ±nda null body dÃ¶necek
        when(accountClient.getAccountByAccountNoWithoutException(anyString())).thenReturn(ResponseEntity.ok(null));

        // Act & Assert
        AccountException exception = assertThrows(AccountException.class, () -> {
            customerNotificationService.getParameters(cashTransactionDTO, detailDTOList);
        });
        assertEquals("Hesap bilgileri bulunamadÄ±.", exception.getMessage());
    }

    @Test
    void testGetParameters_ExceptionThrown() throws MicroException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(6L);
        cashTransactionDTO.setProcessCode("WITHDRAW");

        ClientDTO clientDTO = new ClientDTO();
        clientDTO.setClientNo(12345L);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setClientInfo(clientDTO);

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAccountNo("accException");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setCurrency("TL");
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenThrow(new RuntimeException("Some error"));

        // Act & Assert
        AccountException exception = assertThrows(AccountException.class, () -> {
            customerNotificationService.getParameters(cashTransactionDTO, detailDTOList);
        });
        assertEquals("Hesap bilgileri bulunamadÄ±.", exception.getMessage());
    }

    @Test
    void testGetParameters_Deposit_FlexibleAccount() throws MicroException, AccountException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(7L);
        cashTransactionDTO.setCreateDate(new Date());
        cashTransactionDTO.setUpdateDate(new Date()); // NullPointer fix

        cashTransactionDTO.setProcessCode("DEPOSIT");
        cashTransactionDTO.setCreatedBy("tester");
        cashTransactionDTO.setUpdatedBy("tester");

        ClientDTO clientDTO = new ClientDTO();
        clientDTO.setClientNo(99999L);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setClientInfo(clientDTO);

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setTransactionId("txn789");
        detailDTO.setAccountNo("accDeposit");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setCurrency("TL");
        detailDTO.setAmount(BigDecimal.valueOf(2000));
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        BalanceDTO balanceDTO = new BalanceDTO();
        balanceDTO.setAvailableBalance(BigDecimal.valueOf(10000));
        balanceDTO.setValueBalance(BigDecimal.valueOf(12000));

        ResponseBalanceInfo balanceInfo = new ResponseBalanceInfo();
        balanceInfo.setBalanceDTO(balanceDTO);

        ResponseEntity<ResponseBalanceInfo> responseBalanceInfo = ResponseEntity.ok(balanceInfo);
        when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenReturn(responseBalanceInfo);

        AccountInfoResponse accountInfoResponse = new AccountInfoResponse();
        accountInfoResponse.setIban("TRXXXXXX");
        accountInfoResponse.setIsFlexibleAccount(Boolean.TRUE);

        ResponseEntity<AccountInfoResponse> accountNumberEntity = ResponseEntity.ok(accountInfoResponse);
        when(accountClient.getAccountByAccountNoWithoutException(anyString())).thenReturn(accountNumberEntity);

        // Act
        CustomerNotificationDTO result = customerNotificationService.getParameters(cashTransactionDTO, detailDTOList);

        // Assert
        assertNotNull(result);
        assertNotNull(result.getTransactionHeader());
        // Flexible account + DEPOSIT => kodda: PARYAT_NOTIFICATION_SHORTNAME2
        assertEquals(NotificationConstants.PARYAT_NOTIFICATION_SHORTNAME2, result.getTransactionHeader().getJobCode());
    }

    @Test
    void testCalculateAmountTextAndIsKgvIncluded_NoCommission_NoKmv() throws Exception {
        // Arrange
        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCurrency("TRY");
        detailDTO.setAccountCurrency("TRY");
        detailDTO.setCommissionAmount(BigDecimal.ZERO);
        detailDTO.setKmvAmount(BigDecimal.ZERO);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        Method method = CustomerNotificationService.class
                .getDeclaredMethod("calculateAmountTextAndIsKgvIncluded", List.class);
        method.setAccessible(true);

        // Act
        CustomerNotificationService.AmountCalculationResult result =
                (CustomerNotificationService.AmountCalculationResult) method.invoke(customerNotificationService, detailDTOList);

        // Assert
        // Kodun mantÄ±ÄÄ±nda TRY == TRY ve komisyon yoksa "1000 TRY" dÃ¶nÃ¼yor
        assertEquals("1000 TRY", result.getAmountText());
        // Kod aynÄ± para biriminde KMV 0 ise isKgvIncluded=false
        assertFalse(result.getIsKgvIncluded());
    }

    /**
     * KOMÄ°SYON VAR ama KMV YOK ve para birimi de TL==TL
     * Kodda bu senaryoda isKgvIncluded = false kalÄ±r.
     */
    @Test
    void testCalculateAmountTextAndIsKgvIncluded_WithCommission() throws Exception {
        // Arrange
        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCurrency("TL");
        detailDTO.setAccountCurrency("TL");
        // Komisyon verelim
        detailDTO.setCommissionAmount(BigDecimal.valueOf(50));

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        Method method = CustomerNotificationService.class
                .getDeclaredMethod("calculateAmountTextAndIsKgvIncluded", List.class);
        method.setAccessible(true);

        // Act
        CustomerNotificationService.AmountCalculationResult calculationResult =
                (CustomerNotificationService.AmountCalculationResult) method.invoke(customerNotificationService, detailDTOList);

        // Assert
        assertNotNull(calculationResult.getAmountText());
        // Komisyon var ama KMV yok ve currency==accountCurrency => isKgvIncluded=false
        assertFalse(calculationResult.getIsKgvIncluded());
        // Amount text iÃ§inde "1000" ve "50" geÃ§tiÄinden de emin olabiliriz:
        assertTrue(calculationResult.getAmountText().contains("1000"));
        assertTrue(calculationResult.getAmountText().contains("50"));
    }

    /**
     * KMV VAR (Ã¶r. 100), bu senaryoda kod mantÄ±ÄÄ±na gÃ¶re currency == accountCurrency ise
     * normalde isKgvIncluded=false kalÄ±r. 
     * 
     * EÄer testte "isKgvIncluded=true" bekliyorsak, currency != accountCurrency yapmamÄ±z gerekir.
     * Onun iÃ§in burada currency'yi farklÄ± yaparak isKgvIncluded=true durumunu testliyoruz.
     */
    @Test
    void testCalculateAmountTextAndIsKgvIncluded_WithKgv() throws Exception {
        // Arrange
        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAmount(BigDecimal.valueOf(1000));

        // Para birimini farklÄ± yapalÄ±m ki "else if (hasKmvAmount...)" branch'Ä±na girsin
        detailDTO.setCurrency("USD");
        detailDTO.setAccountCurrency("TL");

        // KMV verelim
        detailDTO.setKmvAmount(BigDecimal.valueOf(100));

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        Method method = CustomerNotificationService.class
                .getDeclaredMethod("calculateAmountTextAndIsKgvIncluded", List.class);
        method.setAccessible(true);

        // Act
        CustomerNotificationService.AmountCalculationResult calculationResult =
                (CustomerNotificationService.AmountCalculationResult) method.invoke(customerNotificationService, detailDTOList);

        // Assert
        assertNotNull(calculationResult.getAmountText());
        // Åimdi para birimleri farklÄ± ve KMV>0 => kodda isKgvIncluded = true
        assertTrue(calculationResult.getIsKgvIncluded());
    }

    @Test
    void testFormatDate() throws Exception {
        // private String formatDate(Date date)
        Method formatDateMethod = CustomerNotificationService.class.getDeclaredMethod("formatDate", Date.class);
        formatDateMethod.setAccessible(true);

        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.HOUR_OF_DAY, 10);
        cal.set(Calendar.MINUTE, 30);
        Date date = cal.getTime();

        String formatted = (String) formatDateMethod.invoke(customerNotificationService, date);
        assertEquals("10:30", formatted);
    }

    @Test
    void testFormatCurrency() throws Exception {
        // Mevcut kodda imza -> private String formatCurrency(String toFormat)
        Method formatCurrencyMethod = CustomerNotificationService.class
                .getDeclaredMethod("formatCurrency", String.class);
        formatCurrencyMethod.setAccessible(true);

        // 1234.56'yÄ± string olarak gÃ¶nderdik
        String formatted = (String) formatCurrencyMethod.invoke(customerNotificationService, "1234.56");
        assertNotNull(formatted);
        // Alman locale => "1.234,56" gibi bir sonuÃ§ gelebilir.
        assertTrue(formatted.contains(",") || formatted.contains("."));
    }
}
