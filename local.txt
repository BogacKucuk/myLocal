package com.ykb.corebanking.tellerline.receiptbatch.service.impl;

import com.ykb.corebanking.tellerline.receiptbatch.dto.ReceiptParameterDefinitionDTO;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.List;

import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;

@ExtendWith(SpringExtension.class)
public class ReceiptExpenseJobParameterService_UpdatedTest {

    @InjectMocks
    private ReceiptExpenseJobParameterService service;

    @Mock
    private ReceiptParameterDefinitionService parameterDefinitionService;

    private static final String PERIOD_PARAMETER = "app.harmoni.glb.receiptbatch.expensejob.period";
    private static final String STATUS_LIST_PARAMETER = "app.harmoni.glb.receiptbatch.expensejob.statuslist";
    private static final String PARAMETER_OFF = "OFF";
    private static final String PARAMETER_ES = "ES";

    // =============================
    // Tests for getCurrentPeriod
    // =============================

    @Test
    void testGetCurrentPeriod_whenDtoIsNull() {
        // Eğer dto null ise if şartı sağlanacak ve önceki ayın tarihi döndürülecek.
        when(parameterDefinitionService.getApplicationParameterByName(eq(PERIOD_PARAMETER))).thenReturn(null);
        String result = service.getCurrentPeriod();
        String expected = LocalDate.now().minusMonths(1)
                .format(DateTimeFormatter.ofPattern("yyyyMM"));
        Assertions.assertEquals(expected, result);
    }

    @Test
    void testGetCurrentPeriod_whenDtoHasOffValue() {
        // Eğer dto'nun değeri "OFF" ise if'e girip önceki ayın tarihi döndürülmeli.
        ReceiptParameterDefinitionDTO dto = new ReceiptParameterDefinitionDTO();
        dto.setValue(PARAMETER_OFF);
        when(parameterDefinitionService.getApplicationParameterByName(eq(PERIOD_PARAMETER))).thenReturn(dto);
        String result = service.getCurrentPeriod();
        String expected = LocalDate.now().minusMonths(1)
                .format(DateTimeFormatter.ofPattern("yyyyMM"));
        Assertions.assertEquals(expected, result);
    }

    @Test
    void testGetCurrentPeriod_whenDtoHasNonOffValue() {
        // Eğer dto'nun değeri "OFF" dışında bir değer ise direkt o değer döndürülmeli.
        ReceiptParameterDefinitionDTO dto = new ReceiptParameterDefinitionDTO();
        dto.setValue("ABC");
        when(parameterDefinitionService.getApplicationParameterByName(eq(PERIOD_PARAMETER))).thenReturn(dto);
        String result = service.getCurrentPeriod();
        Assertions.assertEquals("ABC", result);
    }

    @Test
    void testGetCurrentPeriod_whenDtoHasEmptyValue() {
        // Eğer dto'nun değeri boş ise (hasText false döner) if'e girilmez, direkt boş string döndürülür.
        ReceiptParameterDefinitionDTO dto = new ReceiptParameterDefinitionDTO();
        dto.setValue("");
        when(parameterDefinitionService.getApplicationParameterByName(eq(PERIOD_PARAMETER))).thenReturn(dto);
        String result = service.getCurrentPeriod();
        Assertions.assertEquals("", result);
    }

    // =============================
    // Tests for getCurrentStatusList
    // =============================

    @Test
    void testGetCurrentStatusList_whenDtoIsNull() {
        // Eğer dto null ise if şartı devreye girip,
        // yeni dto oluşturulup değeri "ES" set edildikten sonra, ["ES"] listesi döndürülmeli.
        when(parameterDefinitionService.getApplicationParameterByName(eq(STATUS_LIST_PARAMETER))).thenReturn(null);
        List<String> result = service.getCurrentStatusList();
        Assertions.assertEquals(Arrays.asList(PARAMETER_ES), result);
    }

    @Test
    void testGetCurrentStatusList_whenDtoHasOffValue() {
        // Eğer dto'nun değeri "OFF" ise if'e girip değeri "ES" olarak set edilmeli.
        ReceiptParameterDefinitionDTO dto = new ReceiptParameterDefinitionDTO();
        dto.setValue(PARAMETER_OFF);
        when(parameterDefinitionService.getApplicationParameterByName(eq(STATUS_LIST_PARAMETER))).thenReturn(dto);
        List<String> result = service.getCurrentStatusList();
        Assertions.assertEquals(Arrays.asList(PARAMETER_ES), result);
    }

    @Test
    void testGetCurrentStatusList_whenDtoHasNonOffValue() {
        // Eğer dto'nun değeri "OFF" dışında (örneğin "APPROVED;PENDING") ise if'e girilmez
        // ve split sonucu ["APPROVED", "PENDING"] listesi döndürülmeli.
        ReceiptParameterDefinitionDTO dto = new ReceiptParameterDefinitionDTO();
        dto.setValue("APPROVED;PENDING");
        when(parameterDefinitionService.getApplicationParameterByName(eq(STATUS_LIST_PARAMETER))).thenReturn(dto);
        List<String> result = service.getCurrentStatusList();
        Assertions.assertEquals(Arrays.asList("APPROVED", "PENDING"), result);
    }

    @Test
    void testGetCurrentStatusList_whenDtoHasEmptyValue() {
        // Eğer dto'nun değeri boş string ise if şartı devreye girmez,
        // ve boş string split edilip [""], yani tek boş elemanlı liste döndürülür.
        ReceiptParameterDefinitionDTO dto = new ReceiptParameterDefinitionDTO();
        dto.setValue("");
        when(parameterDefinitionService.getApplicationParameterByName(eq(STATUS_LIST_PARAMETER))).thenReturn(dto);
        List<String> result = service.getCurrentStatusList();
        Assertions.assertEquals(Arrays.asList(""), result);
    }
}
