package com.ykb.corebanking.safedepositbox.safedepositboxbe.service.impl;

import com.ykb.corebanking.safedepositbox.safedepositboxbe.enumerable.PaymentType;
import com.ykb.corebanking.safedepositbox.safedepositboxbe.exception.AccountProvisionAccountToGLException;
import com.ykb.corebanking.safedepositbox.safedepositboxbe.request.RequestDebtPayment;
import com.ykb.corebanking.safedepositbox.safedepositboxbe.request.RequestVaultCashOperation;
import com.ykb.corebanking.safedepositbox.safedepositboxbe.response.ResponseDebtPaymentProvision;
import com.ykb.corebanking.safedepositbox.safedepositboxbe.response.ResponseVaultCashOperation;
import com.ykb.corebanking.safedepositbox.safedepositboxbe.service.IVaultDomainService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class SafeDepositBoxCashProvisionServiceTest {

    @Mock
    IVaultDomainService vaultDomainService;

    @InjectMocks
    SafeDepositBoxCashProvisionService safeDepositBoxCashProvisionService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetStrategy() {
        assertEquals(PaymentType.CASH_PROVISION, safeDepositBoxCashProvisionService.getStrategy());
    }

    @Test
    void testPerformDebtPaymentSuccess() throws AccountProvisionAccountToGLException {
        // Arrange
        var request = new RequestDebtPayment();
        request.setPaymentType(PaymentType.CASH_PROVISION);
        request.setProvisionIdList(List.of(1001L, 1002L));

        // Mock domain service response
        var vaultResponse = new ResponseVaultCashOperation();
        vaultResponse.setIsSuccess(true);
        vaultResponse.setExceptionMessage("No exception");

        when(vaultDomainService.performCashOperation(
                org.mockito.ArgumentMatchers.any(RequestVaultCashOperation.class)))
                .thenReturn(vaultResponse);

        // Act
        var result = safeDepositBoxCashProvisionService.performDebtPayment(request);

        // Assert
        assertNotNull(result);
        assertTrue(result.getIsSuccess());
        assertEquals("No exception", result.getExceptionMessage());
    }

    @Test
    void testPerformDebtPaymentWithNullVaultResponse() {
        // Arrange
        var request = new RequestDebtPayment();
        request.setPaymentType(PaymentType.CASH_PROVISION);
        request.setProvisionIdList(List.of(1001L, 1002L));

        // Vault service null döndü
        when(vaultDomainService.performCashOperation(
                org.mockito.ArgumentMatchers.any(RequestVaultCashOperation.class)))
                .thenReturn(null);

        // Act & Assert => performDebtPayment çağırdığımızda NPE fırlaması muhtemel.
        NullPointerException thrown = assertThrows(NullPointerException.class,
                () -> safeDepositBoxCashProvisionService.performDebtPayment(request)
        );
        assertNotNull(thrown);
    }

    @Test
    void testPerformDebtPaymentEmptyProvisionIdList() {
        // Arrange
        var request = new RequestDebtPayment();
        request.setPaymentType(PaymentType.CASH_PROVISION);
        // Boş liste verildi
        request.setProvisionIdList(List.of());

        // Domain servisi yine null veya fake bir yanıt dönebilir
        when(vaultDomainService.performCashOperation(
                org.mockito.ArgumentMatchers.any(RequestVaultCashOperation.class)))
                .thenReturn(null);

        // Beklenen yine muhtemelen NPE
        NullPointerException thrown = assertThrows(NullPointerException.class,
                () -> safeDepositBoxCashProvisionService.performDebtPayment(request)
        );
        assertNotNull(thrown);
    }
}
