package com.ykb.corebanking.vault.money.deposit.withdraw.bff.service.impl;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.fail;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;

import java.util.Arrays;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.ykb.architecture.micro.error.exception.MicroException;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.client.CashTrxnParameterClient;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.dto.CashTrxnParameterDTO;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.exception.CashTrxnParameterException;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.request.RequestCashTrxnDeleteParameter;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.request.RequestCashTrxnSearchParameter;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.response.ResponseCashTrxnInfoParameter;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.response.ResponseCashTrxnSearchParameter;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.util.BaseTestUtil;

@ExtendWith(SpringExtension.class)
class CashTrxnParameterServiceTest {
    
    @InjectMocks
    CashTrxnParameterService service;
    
    @Mock
    CashTrxnParameterClient client;

    @Test
    void whenCall_getCashTrxnInfoParameterWithCache_success() {
        when(client.getCashTrxnInfoParameterWithCache(Mockito.anyString())).thenReturn(new CashTrxnParameterDTO());
        CashTrxnParameterDTO response = service.getCashTrxnInfoParameterWithCache("testParameter");
        assertNotNull(response);
    }

    @Test
    void whenCall_getCashTrxnSystemParameterWithCache_success() {
        when(client.getCashTrxnSystemParameterWithCache(Mockito.anyString())).thenReturn(new CashTrxnParameterDTO());
        CashTrxnParameterDTO response = service.getCashTrxnSystemParameterWithCache("testParameter");
        assertNotNull(response);
    }

    @Test
    void whenGetCashTrxnSystemParameterValue_shouldReturnSuccessfullResponse() {
        try {
            ResponseCashTrxnInfoParameter responseCashTrxnInfoParameter = new ResponseCashTrxnInfoParameter();
            CashTrxnParameterDTO cashTrxnParameterDTO = new CashTrxnParameterDTO();
            cashTrxnParameterDTO.setValue("paramValue");
            responseCashTrxnInfoParameter.setCashTrxnParameterDTO(cashTrxnParameterDTO);
            when(client.getCashTrxnSystemParameter(Mockito.any())).thenReturn(responseCashTrxnInfoParameter);
            String response = service.getCashTrxnSystemParameterValue("paramName");
            assertThat(response).isNotNull();
        } catch (MicroException e) {
            fail(BaseTestUtil.UNEXPECTED_EXCEPTION_MESSAGE);
        }
    }

    @Test
    void whenGetCashTrxnSystemParameterValue_invalidRequest_shouldThrowException() {
        CashTrxnParameterException thrownInvalidRequest = assertThrows(
            CashTrxnParameterException.class, 
            () -> service.getCashTrxnSystemParameterValue(null),
            BaseTestUtil.getExpectedExceptionButDidNotMessage("getCashTrxnSystemParameterValue")
        );
        assertTrue(thrownInvalidRequest.getMessage().contains(CashTrxnParameterException.INVALID_PARAMETER_NAME));
        
        when(client.getCashTrxnSystemParameter(Mockito.any())).thenReturn(null);
        CashTrxnParameterException thrownUnexpectedException = assertThrows(
            CashTrxnParameterException.class, 
            () -> service.getCashTrxnSystemParameterValue("paramName"),
            BaseTestUtil.getExpectedExceptionButDidNotMessage("getCashTrxnSystemParameterValue")
        );
        assertTrue(thrownUnexpectedException.getMessage().contains(CashTrxnParameterException.UNEXPECTED_EXCEPTION));
    }
    
    // Yeni eklenen test metodu
    @Test
    void whenCall_searchCashTrxnParameter_success() {
        // Mock the service response
        ResponseCashTrxnSearchParameter mockResponse = new ResponseCashTrxnSearchParameter();
        CashTrxnParameterDTO dto = new CashTrxnParameterDTO();
        dto.setParameterName("testParameter");
        mockResponse.setCashTrxnParameterDTOList(Arrays.asList(dto));
        when(client.searchCashTrxnParameter(Mockito.any(RequestCashTrxnSearchParameter.class)))
            .thenReturn(mockResponse);
        
        // Create a mock request
        RequestCashTrxnSearchParameter request = new RequestCashTrxnSearchParameter();
        request.setParameterName("testParameter");
        request.setLikeSearch(true);
        request.setTable("testTable");
        
        // Call the service method
        ResponseCashTrxnSearchParameter response = service.searchCashTrxnParameter(request);
        
        // Assert the response
        assertNotNull(response);
        assertNotNull(response.getCashTrxnParameterDTOList());
        assertFalse(response.getCashTrxnParameterDTOList().isEmpty());
        assertEquals("testParameter", response.getCashTrxnParameterDTOList().get(0).getParameterName());
    }
    
    // Yeni eklenen test metodu
    @Test
    void whenCall_deleteCashTrxnParameter_success() {
        // Mock the client method to do nothing
        doNothing().when(client).deleteCashTrxnParameter(Mockito.any(RequestCashTrxnDeleteParameter.class));
        
        // Create a mock request
        RequestCashTrxnDeleteParameter request = new RequestCashTrxnDeleteParameter();
        request.setParameterName("testParameter");
        request.setTable("testTable");
        
        // Call the service method
        service.deleteCashTrxnParameter(request);
        
        // Verify that the client method was called
        Mockito.verify(client, Mockito.times(1)).deleteCashTrxnParameter(request);
    }
}
