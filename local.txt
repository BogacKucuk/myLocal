@Test
void testCreateAndSaveOperationInfo_Success() {
    // Context mock'ları
    when(contextBuilder.getContext()).thenReturn(serviceContext);
    when(contextBuilder.getContext().getGuid()).thenReturn("test-guid-123");
    when(serviceContext.getUser()).thenReturn(user);

    // Account balance mock (anyInt() kullan)
    Money usableBalance = Money.newBuilder()
            .setUnits(2000)
            .setNanos(0)
            .build();
    when(accountsBusinessService.getAccountDetail(anyInt(), anyInt()))
            .thenReturn(createMockAccountBalance(usableBalance, "TEST"));

    // Joint account mock (yeni ekleme)
    when(accountsBusinessService.getJointAccounts(anyString(), anyInt()))
            .thenReturn(null);

    // Branch service mock
    BranchServiceResponseDto branchResponse = new BranchServiceResponseDto();
    branchResponse.setBranchType("T");
    when(branchService.getBranchDetail(anyInt())).thenReturn(branchResponse);

    // Request preparation
    TrnxCompleteWithdrawalRequestDto requestDto = createValidRequestDto();
    requestDto.setCreateUserId("testUser");

    ProcessingPersonInfoRequest personInfo = new ProcessingPersonInfoRequest();
    personInfo.setProcessCustomerNum("12345");
    personInfo.setStatusCode("ACTIVE");
    List<ProcessingPersonInfoRequest> personInfoList = List.of(personInfo);
    requestDto.setProcessingPersonInfo(personInfoList);

    String trnxInstanceId = "2025-08-20 20:52:19.507005";

    // Parameter service mock
    ResponseParameterList responseParameterList = new ResponseParameterList();
    ResponseReadParameter parameter = new ResponseReadParameter();
    parameter.setPrmAttributeName("PCMUHASEBE");
    parameter.setPrmValue("TEST_CODE");
    responseParameterList.setParameterList(List.of(parameter));
    when(parameterService.getParameterList(any())).thenReturn(responseParameterList);

    // Accounting service mock
    AccountingResponseDto mockAccountingResponse = new AccountingResponseDto();
    mockAccountingResponse.setFinancialServiceGuid("test-guid-123");
    mockAccountingResponse.setVoucherNum(12345);
    mockAccountingResponse.setTxnReferenceId("TXN-REF-123");
    when(acountingTrxManagement.createFinancialTransaction(any())).thenReturn(mockAccountingResponse);

    // Receipt service mock
    CreateReceiptResponseDto mockReceiptResponse = new CreateReceiptResponseDto();
    CreateReceiptTransactionDto mockReceiptTransaction = new CreateReceiptTransactionDto();
    mockReceiptTransaction.setInstanceId("receipt-instance-123");
    mockReceiptTransaction.setReferenceId1("receipt-ref-123");
    mockReceiptResponse.setCreateReceiptTransaction(mockReceiptTransaction);
    when(receiptService.createReceipt(any())).thenReturn(mockReceiptResponse);

    // Transaction DAO mocks
    when(transactionDao.saveMoneyDepositTransaction(any(TransactionEntity.class)))
            .thenReturn(trnxInstanceId);
    // updateMoneyDepositTransaction mock'unu kaldırdık - void metod
    when(moneyTrnxOperationInfoDao.save(any(MoneyTrnxOperationInfoEntity.class)))
            .thenReturn(new MoneyTrnxOperationInfoEntity());

    // Approve service mocks
    ProcessCheckResponseDto checkResponseDto = new ProcessCheckResponseDto();
    checkResponseDto.setApproveOrder(1);
    checkResponseDto.setApproveType("TYPE1");
    checkResponseDto.setApprovalRequired(false); // Onaya düşmesin
    ProcessCheckResultDto approveResult = new ProcessCheckResultDto();
    approveResult.setRecords(List.of(checkResponseDto));
    when(approveService.checkApprove(any())).thenReturn(approveResult);

    // Act
    TrnxCompleteWithdrawalResponseDto response = transactionService.trnxCompleteWithdrawal(requestDto);

    // Assert
    assertNotNull(response);
    assertEquals(trnxInstanceId, response.getInstanceId());
    assertEquals("receipt-instance-123", response.getReceiptInstanceId());
    assertEquals("receipt-ref-123", response.getReceiptReferenceId());

    verify(moneyTrnxOperationInfoDao, times(1)).save(any(MoneyTrnxOperationInfoEntity.class));
    verify(receiptService, times(1)).createReceipt(any());

    ArgumentCaptor<MoneyTrnxOperationInfoEntity> captor =
            ArgumentCaptor.forClass(MoneyTrnxOperationInfoEntity.class);
    verify(moneyTrnxOperationInfoDao).save(captor.capture());

    MoneyTrnxOperationInfoEntity savedEntity = captor.getValue();
    assertEquals("testUser", savedEntity.getCreateUserId());
    assertEquals("testUser", savedEntity.getUpdateUserId());
    assertEquals(Integer.valueOf(12345), savedEntity.getCustomerNum());
    assertEquals("I", savedEntity.getPartyType());
    assertEquals("ACTIVE", savedEntity.getStatusCode());
    assertNotNull(savedEntity.getMoneyTransactionId());
    assertEquals(Timestamp.valueOf(trnxInstanceId), savedEntity.getMoneyTransactionId());
}

@Test
void testCreateAndSaveOperationInfo_MultiplePersons() {
    // Context mock'ları
    when(contextBuilder.getContext()).thenReturn(serviceContext);
    when(contextBuilder.getContext().getGuid()).thenReturn("test-guid-123");
    when(serviceContext.getUser()).thenReturn(user);

    // Account balance mock (anyInt() kullan)
    Money usableBalance = Money.newBuilder()
            .setUnits(2000)
            .setNanos(0)
            .build();
    when(accountsBusinessService.getAccountDetail(anyInt(), anyInt()))
            .thenReturn(createMockAccountBalance(usableBalance, "TEST"));

    // Joint account mock (yeni ekleme)
    when(accountsBusinessService.getJointAccounts(anyString(), anyInt()))
            .thenReturn(null);

    // Branch service mock
    BranchServiceResponseDto branchResponse = new BranchServiceResponseDto();
    branchResponse.setBranchType("T");
    when(branchService.getBranchDetail(anyInt())).thenReturn(branchResponse);

    // Request preparation
    TrnxCompleteWithdrawalRequestDto requestDto = createMultiplePersonRequestDto();

    // Parameter service mock
    ResponseParameterList responseParameterList = new ResponseParameterList();
    ResponseReadParameter parameter = new ResponseReadParameter();
    parameter.setPrmAttributeName("PCMUHASEBE");
    parameter.setPrmValue("TEST_CODE");
    responseParameterList.setParameterList(List.of(parameter));
    when(parameterService.getParameterList(any())).thenReturn(responseParameterList);

    // Accounting service mock
    AccountingResponseDto mockAccountingResponse = new AccountingResponseDto();
    mockAccountingResponse.setFinancialServiceGuid("test-guid-123");
    mockAccountingResponse.setVoucherNum(12345);
    mockAccountingResponse.setTxnReferenceId("TXN-REF-123");
    when(acountingTrxManagement.createFinancialTransaction(any())).thenReturn(mockAccountingResponse);

    // Receipt service mock
    CreateReceiptResponseDto mockReceiptResponse = new CreateReceiptResponseDto();
    CreateReceiptTransactionDto mockReceiptTransaction = new CreateReceiptTransactionDto();
    mockReceiptTransaction.setInstanceId("receipt-instance-123");
    mockReceiptTransaction.setReferenceId1("receipt-ref-123");
    mockReceiptResponse.setCreateReceiptTransaction(mockReceiptTransaction);
    when(receiptService.createReceipt(any())).thenReturn(mockReceiptResponse);

    // Transaction DAO mocks
    when(transactionDao.saveMoneyDepositTransaction(any(TransactionEntity.class)))
            .thenReturn("2025-08-20 20:52:19.507005");
    // updateMoneyDepositTransaction mock'unu kaldırdık - void metod
    when(moneyTrnxOperationInfoDao.save(any(MoneyTrnxOperationInfoEntity.class)))
            .thenReturn(new MoneyTrnxOperationInfoEntity());

    // Approve service mocks
    ProcessCheckResponseDto checkResponseDto = new ProcessCheckResponseDto();
    checkResponseDto.setApproveOrder(1);
    checkResponseDto.setApproveType("TYPE1");
    checkResponseDto.setApprovalRequired(false); // Onaya düşmesin
    ProcessCheckResultDto approveResult = new ProcessCheckResultDto();
    approveResult.setRecords(List.of(checkResponseDto));
    when(approveService.checkApprove(any())).thenReturn(approveResult);

    // Act
    transactionService.trnxCompleteWithdrawal(requestDto);

    // Assert
    verify(moneyTrnxOperationInfoDao, times(2)).save(any(MoneyTrnxOperationInfoEntity.class));

    ArgumentCaptor<MoneyTrnxOperationInfoEntity> captor =
            ArgumentCaptor.forClass(MoneyTrnxOperationInfoEntity.class);
    verify(moneyTrnxOperationInfoDao, times(2)).save(captor.capture());

    List<MoneyTrnxOperationInfoEntity> savedEntities = captor.getAllValues();
    assertEquals(2, savedEntities.size());

    assertEquals(Integer.valueOf(12345), savedEntities.get(0).getCustomerNum());
    assertEquals("ACTIVE", savedEntities.get(0).getStatusCode());

    assertEquals(Integer.valueOf(67890), savedEntities.get(1).getCustomerNum());
    assertEquals("PENDING", savedEntities.get(1).getStatusCode());

    // Yeni servislerin çağrıldığını doğrula
    verify(receiptService, times(1)).createReceipt(any());
    verify(approveService, times(1)).checkApprove(any());
}
