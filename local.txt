#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
COBOL Dosya Temizleyici (Python 2.7)
Bu script, COBOL dosyalarındaki satır numaralarını ve ünlem işaretlerini temizler,
indentation yapısını koruyarak VS Code'da temiz bir görünüm sağlar.
"""

import re
import sys
import os
import codecs

def clean_cobol_line(line):
    """
    COBOL satırını temizler:
    - Satır numaralarını (103*, 95* gibi) kaldırır
    - Ünlem işaretlerini (!) uygun boşluklarla değiştirir
    - Indentation yapısını korur
    """
    # Satır boşsa veya sadece whitespace varsa olduğu gibi bırak
    if not line.strip():
        return line
    
    # Önce COBOL satır numarasını temizle
    # Pattern: başta boşluk, sonra sayılar ve *, sonra boşluk
    cobol_line_pattern = r'^(\s*)(\d+\*)\s+'
    
    match = re.match(cobol_line_pattern, line)
    if match:
        # İlk whitespace'leri ve COBOL satır numarasını al
        initial_space = match.group(1)
        line_number = match.group(2)  # Örn: "103*"
        
        # Satırın geri kalanı (asıl kod kısmı)
        rest_of_line = line[match.end():]
        
        # Satır numarası yerine boşluk koy
        spaces_for_number = ' ' * len(line_number)
        line = initial_space + spaces_for_number + ' ' + rest_of_line
    
    # Şimdi ünlem işaretlerini temizle
    # Her ünlem işareti 2 boşluk indentation anlamına geliyor gibi görünüyor
    # Ünlemleri sayıp uygun boşluklarla değiştir
    cleaned_line = ""
    i = 0
    
    while i < len(line):
        if line[i] == '!':
            # Ünlem yerine 2 boşluk koy (veya tercihe göre ayarlanabilir)
            cleaned_line += "  "
        else:
            # Ünlem değilse, geri kalan satırı ekle ve döngüden çık
            cleaned_line += line[i:]
            break
        i += 1
    
    return cleaned_line

def clean_special_markers(line):
    """
    Özel işaretleri ve notasyonları temizler veya düzenler.
    <--- ESCAPE gibi işaretleri daha okunabilir hale getirir.
    """
    # <--- işaretini ok işareti ile değiştir (daha temiz görünüm)
    line = re.sub(r'<---', '◄──', line)
    
    # +-- işaretlerini de temizle
    line = re.sub(r'\+--', '├──', line)
    line = re.sub(r'\+>', '└►', line)
    
    return line

def process_cobol_file(input_file, output_file=None):
    """
    COBOL dosyasını işler ve temizlenmiş versiyonu yazar.
    """
    # Girdi dosyasının varlığını kontrol et
    if not os.path.exists(input_file):
        print "Hata: '%s' dosyası bulunamadı!" % input_file
        return False
    
    # Çıktı dosya adını belirle
    if output_file is None:
        base_name = os.path.splitext(input_file)[0]
        extension = os.path.splitext(input_file)[1]
        output_file = base_name + "_cleaned" + extension
    
    try:
        # Dosyayı oku ve işle (UTF-8 encoding ile)
        with codecs.open(input_file, 'r', encoding='utf-8') as infile:
            lines = infile.readlines()
        
        # Her satırı temizle
        cleaned_lines = []
        in_procedure_division = False
        
        for line in lines:
            # PROCEDURE DIVISION'ı kontrol et (logic kısmının başlangıcı)
            if 'PROCEDURE DIVISION' in line.upper():
                in_procedure_division = True
            
            # Sadece PROCEDURE DIVISION içindeyse temizle
            if in_procedure_division:
                cleaned_line = clean_cobol_line(line)
                # Özel işaretleri de temizle (opsiyonel)
                cleaned_line = clean_special_markers(cleaned_line)
            else:
                # DATA DIVISION ve diğer kısımlarda satırı olduğu gibi bırak
                cleaned_line = line
            
            cleaned_lines.append(cleaned_line)
        
        # Temizlenmiş içeriği yaz
        with codecs.open(output_file, 'w', encoding='utf-8') as outfile:
            outfile.writelines(cleaned_lines)
        
        print "✓ Başarılı! Temizlenmiş dosya: '%s'" % output_file
        print "  - Satır numaraları kaldırıldı"
        print "  - Ünlem işaretleri boşluklarla değiştirildi"
        print "  - Kod yapısı korundu"
        return True
        
    except Exception as e:
        print "Hata oluştu: %s" % str(e)
        return False

def main():
    """
    Ana fonksiyon - komut satırı argümanlarını işler.
    """
    if len(sys.argv) < 2:
        print "COBOL Dosya Temizleyici"
        print "=" * 30
        print "Kullanım: python cobol_cleaner.py <girdi_dosyasi> [cikti_dosyasi]"
        print ""
        print "Örnekler:"
        print "  python cobol_cleaner.py program.cbl"
        print "  python cobol_cleaner.py program.cbl program_temiz.cbl"
        print ""
        print "Bu script şunları yapar:"
        print "  - COBOL satır numaralarını (103*, 95* vb.) kaldırır"
        print "  - Ünlem işaretlerini (!) boşluklarla değiştirir"
        print "  - Kod yapısını ve hizalamasını korur"
        sys.exit(1)
    
    input_file = sys.argv[1]
    output_file = sys.argv[2] if len(sys.argv) > 2 else None
    
    # Dosyayı işle
    success = process_cobol_file(input_file, output_file)
    
    if not success:
        sys.exit(1)

if __name__ == "__main__":
    main()
