package com.ykb.corebanking.vault.money.deposit.withdraw.bff.service.impl;

import com.ykb.corebanking.vault.money.deposit.withdraw.bff.client.BbtBranchOpsWorkflowClient;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.client.SmartControlClient;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.dto.*;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.exception.SmartControlException;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.request.RequestBranchOperationControlResult;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.request.RequestSmartControlDocuments;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@ExtendWith(SpringExtension.class)
class SmartControlServiceTest {

    @InjectMocks
    SmartControlService smartControlService;

    @Mock
    SmartControlClient smartControlClient;

    @Mock
    BbtBranchOpsWorkflowClient bbtBranchOpsWorkflowClient;

    /**
     * Senaryo: bbtResponse tamamen null dönüyor
     * Beklenti: "BBT dokümanları bulunamadı." hatası
     */
    @Test
    void getSmartControlDocuments_ShouldThrowException_WhenBBTResponseIsNull() {
        RequestSmartControlDocuments request = new RequestSmartControlDocuments();
        request.setGroupId("123");  // BBT çağrısı yapılması için groupId dolu

        // BBT client tamamen null dönüyor
        when(bbtBranchOpsWorkflowClient.getBBTBranchOperationControlResults(any(RequestBranchOperationControlResult.class)))
                .thenReturn(null);

        // SmartControlClient çağrısı normal olsun (buraya aslında girmeyecek ama doldurabiliriz)
        CashTrxnParameterDTO cashTrxnParameterDTO = new CashTrxnParameterDTO();
        cashTrxnParameterDTO.setParameterName("paramKey");
        cashTrxnParameterDTO.setValue("paramValue;paramDescription");
        ResponseEntity<List<CashTrxnParameterDTO>> clientResponse =
                ResponseEntity.ok(Collections.singletonList(cashTrxnParameterDTO));
        when(smartControlClient.getSmartControlDocuments(any(RequestSmartControlDocuments.class)))
                .thenReturn(clientResponse);

        SmartControlException exception = assertThrows(SmartControlException.class, () -> {
            smartControlService.getSmartControlDocuments(request);
        });
        assertEquals("BBT dokümanları bulunamadı.", exception.getMessage());
    }

    /**
     * Senaryo: bbtResponse var ama bbtResponse.getData() null
     * Beklenti: "BBT dokümanları bulunamadı." hatası
     */
    @Test
    void getSmartControlDocuments_ShouldThrowException_WhenBBTResponseDataIsNull() {
        RequestSmartControlDocuments request = new RequestSmartControlDocuments();
        request.setGroupId("123");

        // BBT response var fakat data=null
        ResultBBTListDocumentControlResultDTO bbtResponse = new ResultBBTListDocumentControlResultDTO();
        bbtResponse.setData(null);

        when(bbtBranchOpsWorkflowClient.getBBTBranchOperationControlResults(any(RequestBranchOperationControlResult.class)))
                .thenReturn(bbtResponse);

        // SmartControlClient
        CashTrxnParameterDTO cashTrxnParameterDTO = new CashTrxnParameterDTO();
        cashTrxnParameterDTO.setParameterName("paramKey");
        cashTrxnParameterDTO.setValue("paramValue;paramDescription");
        ResponseEntity<List<CashTrxnParameterDTO>> clientResponse =
                ResponseEntity.ok(Collections.singletonList(cashTrxnParameterDTO));
        when(smartControlClient.getSmartControlDocuments(any(RequestSmartControlDocuments.class)))
                .thenReturn(clientResponse);

        SmartControlException exception = assertThrows(SmartControlException.class, () -> {
            smartControlService.getSmartControlDocuments(request);
        });
        assertEquals("BBT dokümanları bulunamadı.", exception.getMessage());
    }

    /**
     * Senaryo: bbtResponse.getData() boş liste dönüyor
     * Artık exception fırlatmıyoruz, boş BBT doküman listesi dönecek
     */
    @Test
    void getSmartControlDocuments_ShouldReturnEmptyBBTDocs_WhenBBTDocsListIsEmpty() throws SmartControlException {
        RequestSmartControlDocuments request = new RequestSmartControlDocuments();
        request.setGroupId("123");

        // BBT response var ve data boş
        ResultBBTListDocumentControlResultDTO bbtResponse = new ResultBBTListDocumentControlResultDTO();
        bbtResponse.setData(Collections.emptyList());

        when(bbtBranchOpsWorkflowClient.getBBTBranchOperationControlResults(any(RequestBranchOperationControlResult.class)))
                .thenReturn(bbtResponse);

        // SmartControlClient
        CashTrxnParameterDTO cashTrxnParameterDTO = new CashTrxnParameterDTO();
        cashTrxnParameterDTO.setParameterName("paramKey");
        cashTrxnParameterDTO.setValue("paramValue;paramDescription");
        ResponseEntity<List<CashTrxnParameterDTO>> clientResponse =
                ResponseEntity.ok(Collections.singletonList(cashTrxnParameterDTO));
        when(smartControlClient.getSmartControlDocuments(any(RequestSmartControlDocuments.class)))
                .thenReturn(clientResponse);

        SmartControlDataDTO result = smartControlService.getSmartControlDocuments(request);

        // BBT listesi boş dönmeli
        assertNotNull(result);
        assertNotNull(result.getBbtDocuments());
        assertTrue(result.getBbtDocuments().isEmpty(), "BBT doküman listesi boş olmalı");

        // Normal client dokümanları dönmeye devam etmeli
        assertNotNull(result.getNotExistsDocs());
        assertEquals(1, result.getNotExistsDocs().size());
    }

    /**
     * Senaryo: SmartControlClient response tamamen null
     * Beklenti: "Gerekli dokümanlar bulunamadı." hatası
     */
    @Test
    void getSmartControlDocuments_ShouldThrowException_WhenClientResponseIsNull() {
        RequestSmartControlDocuments request = new RequestSmartControlDocuments();
        request.setGroupId("123");

        // BBT response mock (data dolu veya boş olabilir, fark etmez)
        ResultBBTListDocumentControlResultDTO bbtResponse = createMockBBTResponse(false);
        when(bbtBranchOpsWorkflowClient.getBBTBranchOperationControlResults(any(RequestBranchOperationControlResult.class)))
                .thenReturn(bbtResponse);

        // SmartControlClient -> null
        when(smartControlClient.getSmartControlDocuments(any(RequestSmartControlDocuments.class)))
                .thenReturn(null);

        SmartControlException exception = assertThrows(SmartControlException.class, () -> {
            smartControlService.getSmartControlDocuments(request);
        });
        assertEquals("Gerekli dokümanlar bulunamadı.", exception.getMessage());
    }

    /**
     * Senaryo: SmartControlClient response var ama body null
     * Beklenti: "Gerekli dokümanlar bulunamadı." hatası
     */
    @Test
    void getSmartControlDocuments_ShouldThrowException_WhenClientResponseBodyIsNull() {
        RequestSmartControlDocuments request = new RequestSmartControlDocuments();
        request.setGroupId("123");

        // BBT response normal
        ResultBBTListDocumentControlResultDTO bbtResponse = createMockBBTResponse(false);
        when(bbtBranchOpsWorkflowClient.getBBTBranchOperationControlResults(any(RequestBranchOperationControlResult.class)))
                .thenReturn(bbtResponse);

        // SmartControlClient -> body null
        when(smartControlClient.getSmartControlDocuments(any(RequestSmartControlDocuments.class)))
                .thenReturn(ResponseEntity.of(Optional.empty()));

        SmartControlException exception = assertThrows(SmartControlException.class, () -> {
            smartControlService.getSmartControlDocuments(request);
        });
        assertEquals("Gerekli dokümanlar bulunamadı.", exception.getMessage());
    }

    /**
     * Senaryo: Her şey normal, BBT'de çocuk yok, SmartControlClient'tan tek doküman dönüyor
     */
    @Test
    void getSmartControlDocuments_ShouldReturnData_WhenAllDataIsValid_NoChildren() throws SmartControlException {
        RequestSmartControlDocuments request = new RequestSmartControlDocuments();
        request.setGroupId("123");

        // BBT response
        ResultBBTListDocumentControlResultDTO bbtResponse = createMockBBTResponse(false);
        when(bbtBranchOpsWorkflowClient.getBBTBranchOperationControlResults(any(RequestBranchOperationControlResult.class)))
                .thenReturn(bbtResponse);

        // SmartControlClient
        CashTrxnParameterDTO cashTrxnParameterDTO = new CashTrxnParameterDTO();
        cashTrxnParameterDTO.setParameterName("paramKey");
        cashTrxnParameterDTO.setValue("paramValue;paramDescription");
        ResponseEntity<List<CashTrxnParameterDTO>> clientResponse =
                ResponseEntity.ok(Collections.singletonList(cashTrxnParameterDTO));
        when(smartControlClient.getSmartControlDocuments(any(RequestSmartControlDocuments.class)))
                .thenReturn(clientResponse);

        SmartControlDataDTO result = smartControlService.getSmartControlDocuments(request);

        assertNotNull(result, "Result null olmamalı");
        assertNotNull(result.getBbtDocuments(), "BBT doküman listesi null olmamalı");
        assertNotNull(result.getNotExistsDocs(), "NotExists doküman listesi null olmamalı");

        // BBT dokümanı
        assertEquals(1, result.getBbtDocuments().size());
        SmartControlDocumentDTO bbtDoc = result.getBbtDocuments().get(0);
        assertEquals("Vekaletname", bbtDoc.getParameterName());
        assertFalse(bbtDoc.getIsExist(), "isExist default false olmalı");
        // Çocuk yoksa null veya boş liste olabilir
        assertTrue(bbtDoc.getChildren() == null || bbtDoc.getChildren().isEmpty());

        // SmartControlClient dokümanı
        assertEquals(1, result.getNotExistsDocs().size());
        SmartControlDocumentDTO notExistDoc = result.getNotExistsDocs().get(0);
        assertEquals("paramValue", notExistDoc.getParameterName());
        assertEquals("paramDescription", notExistDoc.getDescription());
        assertFalse(notExistDoc.getIsExist());
    }

    /**
     * Senaryo: Her şey normal, BBT dokümanında 1 çocuk var, SmartControlClient'tan da tek doküman dönüyor
     */
    @Test
    void getSmartControlDocuments_ShouldReturnData_WhenAllDataIsValid_WithChildren() throws SmartControlException {
        RequestSmartControlDocuments request = new RequestSmartControlDocuments();
        request.setGroupId("123");

        // BBT response -> içinde 1 çocuk
        ResultBBTListDocumentControlResultDTO bbtResponse = createMockBBTResponse(true);
        when(bbtBranchOpsWorkflowClient.getBBTBranchOperationControlResults(any(RequestBranchOperationControlResult.class)))
                .thenReturn(bbtResponse);

        // SmartControlClient
        CashTrxnParameterDTO cashTrxnParameterDTO = new CashTrxnParameterDTO();
        cashTrxnParameterDTO.setParameterName("paramKey");
        cashTrxnParameterDTO.setValue("paramValue;paramDescription");
        ResponseEntity<List<CashTrxnParameterDTO>> clientResponse =
                ResponseEntity.ok(Collections.singletonList(cashTrxnParameterDTO));
        when(smartControlClient.getSmartControlDocuments(any(RequestSmartControlDocuments.class)))
                .thenReturn(clientResponse);

        SmartControlDataDTO result = smartControlService.getSmartControlDocuments(request);

        assertNotNull(result);
        assertNotNull(result.getBbtDocuments());
        assertNotNull(result.getNotExistsDocs());

        // BBT dokümanı
        assertEquals(1, result.getBbtDocuments().size());
        SmartControlDocumentDTO bbtDoc = result.getBbtDocuments().get(0);
        assertNotNull(bbtDoc.getChildren());
        assertEquals(1, bbtDoc.getChildren().size(), "Tek child bekleniyor");

        SmartControlDocumentDTO child = bbtDoc.getChildren().get(0);
        assertEquals("CHILD_CONTROL_TYPE", child.getParameterName());
        assertEquals("Child message", child.getDescription());
        assertFalse(child.getIsExist());

        // SmartControlClient dokümanı
        assertEquals(1, result.getNotExistsDocs().size());
        SmartControlDocumentDTO notExistDoc = result.getNotExistsDocs().get(0);
        assertEquals("paramValue", notExistDoc.getParameterName());
        assertEquals("paramDescription", notExistDoc.getDescription());
        assertFalse(notExistDoc.getIsExist());
    }

    /**
     * Ek yardımcı metod: BBT response üretir
     */
    private ResultBBTListDocumentControlResultDTO createMockBBTResponse(boolean withChildren) {
        ResultBBTListDocumentControlResultDTO bbtResponse = new ResultBBTListDocumentControlResultDTO();
        bbtResponse.setSuccess(Boolean.TRUE);
        bbtResponse.setMessage("Message");

        DocumentControlResultDTO doc = new DocumentControlResultDTO();
        doc.setDocumentName("Vekaletname");
        doc.setRemoteDocumentId(999L);

        if (withChildren) {
            ResultDescriptionDTO childDesc = new ResultDescriptionDTO();
            childDesc.setControlType("CHILD_CONTROL_TYPE");
            childDesc.setControlMessage("Child message");
            doc.setResultDescriptionDTO(Collections.singletonList(childDesc));
        } else {
            doc.setResultDescriptionDTO(new ArrayList<>());
        }

        bbtResponse.setData(Collections.singletonList(doc));
        return bbtResponse;
    }
}
