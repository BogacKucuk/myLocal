package com.garantibbva.depositwithdrawalmngt.depositwithdrawalchannel.service.contract.impl;

import com.garantibbva.depositwithdrawalmngt.depositwithdrawalchannel.service.mapper.DigitalOrderMapper;
import com.garantibbva.depositwithdrawalmngt.depositwithdrawalchannel.service.model.request.DigitalOrderReadRequestDto;
import com.garantibbva.depositwithdrawalmngt.depositwithdrawalchannel.service.model.response.DigitalOrderReadResponseDto;
import com.garantibbva.depositwithdrawalmngt.depositwithdrawalchannel.service.model.response.ReadBranchInstructionDepositWithdrawalDto;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.proto.DigitalOrderGrpcServiceGrpc.DigitalOrderGrpcServiceBlockingStub;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.proto.DigitalOrderProto;
import com.garantibbvaportfoy.utility.bigdecimal.proto.BigDecimalProto;
import com.google.protobuf.ByteString;
import io.grpc.Status;
import io.grpc.StatusRuntimeException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.math.BigDecimal;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class DigitalOrderServiceImplTest {

    @Mock
    private DigitalOrderGrpcServiceBlockingStub blockingStub;

    @InjectMocks
    private DigitalOrderServiceImpl digitalOrderService;

    private DigitalOrderReadRequestDto requestDto;
    private DigitalOrderProto.DigitalOrderReadRequest grpcRequest;
    private DigitalOrderProto.DigitalOrderReadResponse grpcResponse;
    private DigitalOrderReadResponseDto expectedResponseDto;

    @BeforeEach
    void setUp() {
        requestDto = DigitalOrderReadRequestDto.builder()
                .instructionId(12345L)
                .customerNum(100001)
                .accountNumber(200001)
                .branchCode(500)
                .amount(new BigDecimal("1000.00"))
                .currencyCode("TRY")
                .identityNumber("12345678901")
                .documentId("DOC123")
                .transactionDate("2025-09-29")
                .status("ACTIVE")
                .transactionType(1)
                .processUnitNum(10)
                .build();

        // BigDecimal proto message olu≈üturma
        BigDecimalProto.BigDecimal protoBigDecimal = createProtoBigDecimal(new BigDecimal("1000.00"));

        grpcRequest = DigitalOrderProto.DigitalOrderReadRequest.newBuilder()
                .setInstructionId(12345L)
                .setCustomerNum(100001)
                .setAccountNumber(200001)
                .setBranchCode(500)
                .setAmount(protoBigDecimal)
                .setCurrencyCode("TRY")
                .setIdentityNumber("12345678901")
                .setDocumentId("DOC123")
                .setTransactionDate("2025-09-29")
                .setStatus("ACTIVE")
                .setTransactionType(1)
                .setProcessUnitNum(10)
                .build();

        DigitalOrderProto.ReadBranchInstructionDepositWithdrawal grpcInstruction = 
                DigitalOrderProto.ReadBranchInstructionDepositWithdrawal.newBuilder()
                .setInstructionId(12345L)
                .setCustomerNum(100001)
                .setAccountNumber(200001)
                .setBranchCode(500)
                .setAmount(protoBigDecimal)
                .setCurrencyCode("TRY")
                .setIdentityNumber("12345678901")
                .setDocumentId("DOC123")
                .setTransactionDate("2025-09-29")
                .setStatus("ACTIVE")
                .setTransactionType(1)
                .setProcessUnitNum(10)
                .build();

        grpcResponse = DigitalOrderProto.DigitalOrderReadResponse.newBuilder()
                .addReadBranchInstructionDepositWithdrawal(grpcInstruction)
                .build();

        ReadBranchInstructionDepositWithdrawalDto instructionDto = ReadBranchInstructionDepositWithdrawalDto.builder()
                .instructionId(12345L)
                .customerNum(100001)
                .accountNumber(200001)
                .branchCode(500)
                .amount(new BigDecimal("1000.00"))
                .currencyCode("TRY")
                .identityNumber("12345678901")
                .documentId("DOC123")
                .transactionDate("2025-09-29")
                .status("ACTIVE")
                .transactionType(1)
                .processUnitNum(10)
                .build();

        expectedResponseDto = DigitalOrderReadResponseDto.builder()
                .readBranchInstructionDepositWithdrawal(Collections.singletonList(instructionDto))
                .build();
    }

    private BigDecimalProto.BigDecimal createProtoBigDecimal(BigDecimal value) {
        if (value == null) {
            return BigDecimalProto.BigDecimal.getDefaultInstance();
        }
        return BigDecimalProto.BigDecimal.newBuilder()
                .setScale(value.scale())
                .setPrecision(value.precision())
                .setValue(ByteString.copyFrom(value.unscaledValue().toByteArray()))
                .build();
    }

    @Test
    void readDigitalOrder_whenValidRequest_shouldReturnMappedResponse() {
        // Given
        when(blockingStub.readDigitalOrder(any(DigitalOrderProto.DigitalOrderReadRequest.class)))
                .thenReturn(grpcResponse);

        // When
        DigitalOrderReadResponseDto result = digitalOrderService.readDigitalOrder(requestDto);

        // Then
        assertNotNull(result);
        assertNotNull(result.getReadBranchInstructionDepositWithdrawal());
        assertEquals(1, result.getReadBranchInstructionDepositWithdrawal().size());
        
        ReadBranchInstructionDepositWithdrawalDto resultDto = 
                result.getReadBranchInstructionDepositWithdrawal().get(0);
        
        assertEquals(12345L, resultDto.getInstructionId());
        assertEquals(100001, resultDto.getCustomerNum());
        assertEquals(200001, resultDto.getAccountNumber());
        assertEquals(500, resultDto.getBranchCode());
        assertEquals("TRY", resultDto.getCurrencyCode());
        assertEquals("12345678901", resultDto.getIdentityNumber());
        assertEquals("DOC123", resultDto.getDocumentId());
        assertEquals("2025-09-29", resultDto.getTransactionDate());
        assertEquals("ACTIVE", resultDto.getStatus());
        assertEquals(1, resultDto.getTransactionType());
        assertEquals(10, resultDto.getProcessUnitNum());
        assertNotNull(resultDto.getAmount());

        verify(blockingStub, times(1)).readDigitalOrder(any(DigitalOrderProto.DigitalOrderReadRequest.class));
    }

    @Test
    void readDigitalOrder_whenGrpcReturnsEmptyList_shouldReturnEmptyResponse() {
        // Given
        DigitalOrderProto.DigitalOrderReadResponse emptyGrpcResponse = 
                DigitalOrderProto.DigitalOrderReadResponse.newBuilder().build();
        
        when(blockingStub.readDigitalOrder(any(DigitalOrderProto.DigitalOrderReadRequest.class)))
                .thenReturn(emptyGrpcResponse);

        // When
        DigitalOrderReadResponseDto result = digitalOrderService.readDigitalOrder(requestDto);

        // Then
        assertNotNull(result);
        assertNotNull(result.getReadBranchInstructionDepositWithdrawal());
        assertTrue(result.getReadBranchInstructionDepositWithdrawal().isEmpty());

        verify(blockingStub, times(1)).readDigitalOrder(any(DigitalOrderProto.DigitalOrderReadRequest.class));
    }

    @Test
    void readDigitalOrder_whenGrpcReturnsMultipleInstructions_shouldReturnAllInstructions() {
        // Given
        BigDecimalProto.BigDecimal amount1 = createProtoBigDecimal(new BigDecimal("1000.00"));
        BigDecimalProto.BigDecimal amount2 = createProtoBigDecimal(new BigDecimal("2000.00"));

        DigitalOrderProto.ReadBranchInstructionDepositWithdrawal grpcInstruction1 = 
                DigitalOrderProto.ReadBranchInstructionDepositWithdrawal.newBuilder()
                .setInstructionId(12345L)
                .setCustomerNum(100001)
                .setAmount(amount1)
                .setCurrencyCode("TRY")
                .build();

        DigitalOrderProto.ReadBranchInstructionDepositWithdrawal grpcInstruction2 = 
                DigitalOrderProto.ReadBranchInstructionDepositWithdrawal.newBuilder()
                .setInstructionId(67890L)
                .setCustomerNum(100002)
                .setAmount(amount2)
                .setCurrencyCode("USD")
                .build();

        DigitalOrderProto.DigitalOrderReadResponse multipleGrpcResponse = 
                DigitalOrderProto.DigitalOrderReadResponse.newBuilder()
                .addReadBranchInstructionDepositWithdrawal(grpcInstruction1)
                .addReadBranchInstructionDepositWithdrawal(grpcInstruction2)
                .build();

        when(blockingStub.readDigitalOrder(any(DigitalOrderProto.DigitalOrderReadRequest.class)))
                .thenReturn(multipleGrpcResponse);

        // When
        DigitalOrderReadResponseDto result = digitalOrderService.readDigitalOrder(requestDto);

        // Then
        assertNotNull(result);
        assertEquals(2, result.getReadBranchInstructionDepositWithdrawal().size());
        
        ReadBranchInstructionDepositWithdrawalDto firstDto = result.getReadBranchInstructionDepositWithdrawal().get(0);
        assertEquals(12345L, firstDto.getInstructionId());
        assertEquals(100001, firstDto.getCustomerNum());
        assertEquals("TRY", firstDto.getCurrencyCode());
        
        ReadBranchInstructionDepositWithdrawalDto secondDto = result.getReadBranchInstructionDepositWithdrawal().get(1);
        assertEquals(67890L, secondDto.getInstructionId());
        assertEquals(100002, secondDto.getCustomerNum());
        assertEquals("USD", secondDto.getCurrencyCode());

        verify(blockingStub, times(1)).readDigitalOrder(any(DigitalOrderProto.DigitalOrderReadRequest.class));
    }

    @Test
    void readDigitalOrder_whenGrpcThrowsNotFoundException_shouldPropagateException() {
        // Given
        StatusRuntimeException exception = new StatusRuntimeException(Status.NOT_FOUND.withDescription("Order not found"));

        when(blockingStub.readDigitalOrder(any(DigitalOrderProto.DigitalOrderReadRequest.class)))
                .thenThrow(exception);

        // When & Then
        StatusRuntimeException thrown = assertThrows(StatusRuntimeException.class, () -> 
            digitalOrderService.readDigitalOrder(requestDto)
        );

        assertEquals(Status.NOT_FOUND.getCode(), thrown.getStatus().getCode());
        verify(blockingStub, times(1)).readDigitalOrder(any(DigitalOrderProto.DigitalOrderReadRequest.class));
    }

    @Test
    void readDigitalOrder_whenGrpcThrowsUnavailableException_shouldPropagateException() {
        // Given
        StatusRuntimeException exception = new StatusRuntimeException(Status.UNAVAILABLE.withDescription("Service unavailable"));

        when(blockingStub.readDigitalOrder(any(DigitalOrderProto.DigitalOrderReadRequest.class)))
                .thenThrow(exception);

        // When & Then
        StatusRuntimeException thrown = assertThrows(StatusRuntimeException.class, () -> 
            digitalOrderService.readDigitalOrder(requestDto)
        );

        assertEquals(Status.UNAVAILABLE.getCode(), thrown.getStatus().getCode());
        verify(blockingStub, times(1)).readDigitalOrder(any(DigitalOrderProto.DigitalOrderReadRequest.class));
    }

    @Test
    void readDigitalOrder_whenGrpcThrowsInternalException_shouldPropagateException() {
        // Given
        StatusRuntimeException exception = new StatusRuntimeException(Status.INTERNAL.withDescription("Internal server error"));

        when(blockingStub.readDigitalOrder(any(DigitalOrderProto.DigitalOrderReadRequest.class)))
                .thenThrow(exception);

        // When & Then
        StatusRuntimeException thrown = assertThrows(StatusRuntimeException.class, () -> 
            digitalOrderService.readDigitalOrder(requestDto)
        );

        assertEquals(Status.INTERNAL.getCode(), thrown.getStatus().getCode());
        verify(blockingStub, times(1)).readDigitalOrder(any(DigitalOrderProto.DigitalOrderReadRequest.class));
    }

    @Test
    void readDigitalOrder_whenGrpcThrowsDeadlineExceededException_shouldPropagateException() {
        // Given
        StatusRuntimeException exception = new StatusRuntimeException(Status.DEADLINE_EXCEEDED.withDescription("Deadline exceeded"));

        when(blockingStub.readDigitalOrder(any(DigitalOrderProto.DigitalOrderReadRequest.class)))
                .thenThrow(exception);

        // When & Then
        StatusRuntimeException thrown = assertThrows(StatusRuntimeException.class, () -> 
            digitalOrderService.readDigitalOrder(requestDto)
        );

        assertEquals(Status.DEADLINE_EXCEEDED.getCode(), thrown.getStatus().getCode());
        verify(blockingStub, times(1)).readDigitalOrder(any(DigitalOrderProto.DigitalOrderReadRequest.class));
    }

    @Test
    void readDigitalOrder_whenRequestWithNullFields_shouldStillProcess() {
        // Given
        DigitalOrderReadRequestDto requestWithNulls = DigitalOrderReadRequestDto.builder()
                .instructionId(null)
                .customerNum(null)
                .amount(null)
                .currencyCode(null)
                .build();

        DigitalOrderProto.DigitalOrderReadResponse emptyResponse = 
                DigitalOrderProto.DigitalOrderReadResponse.newBuilder().build();

        when(blockingStub.readDigitalOrder(any(DigitalOrderProto.DigitalOrderReadRequest.class)))
                .thenReturn(emptyResponse);

        // When
        DigitalOrderReadResponseDto result = digitalOrderService.readDigitalOrder(requestWithNulls);

        // Then
        assertNotNull(result);
        verify(blockingStub, times(1)).readDigitalOrder(any(DigitalOrderProto.DigitalOrderReadRequest.class));
    }

    @Test
    void readDigitalOrder_whenResponseWithAllFields_shouldMapAllFieldsCorrectly() {
        // Given
        BigDecimalProto.BigDecimal protoAmount = createProtoBigDecimal(new BigDecimal("5000.75"));
        
        DigitalOrderProto.ReadBranchInstructionDepositWithdrawal fullGrpcInstruction = 
                DigitalOrderProto.ReadBranchInstructionDepositWithdrawal.newBuilder()
                .setInstructionId(99999L)
                .setCustomerNum(888888)
                .setAccountNumber(777777)
                .setBranchCode(666)
                .setAmount(protoAmount)
                .setCurrencyCode("EUR")
                .setIdentityNumber("98765432109")
                .setDocumentId("DOC999")
                .setTransactionDate("2025-12-31")
                .setStatus("COMPLETED")
                .setTransactionType(2)
                .setProcessUnitNum(20)
                .build();

        DigitalOrderProto.DigitalOrderReadResponse fullGrpcResponse = 
                DigitalOrderProto.DigitalOrderReadResponse.newBuilder()
                .addReadBranchInstructionDepositWithdrawal(fullGrpcInstruction)
                .build();

        when(blockingStub.readDigitalOrder(any(DigitalOrderProto.DigitalOrderReadRequest.class)))
                .thenReturn(fullGrpcResponse);

        // When
        DigitalOrderReadResponseDto result = digitalOrderService.readDigitalOrder(requestDto);

        // Then
        assertNotNull(result);
        assertEquals(1, result.getReadBranchInstructionDepositWithdrawal().size());
        
        ReadBranchInstructionDepositWithdrawalDto dto = result.getReadBranchInstructionDepositWithdrawal().get(0);
        assertEquals(99999L, dto.getInstructionId());
        assertEquals(888888, dto.getCustomerNum());
        assertEquals(777777, dto.getAccountNumber());
        assertEquals(666, dto.getBranchCode());
        assertEquals("EUR", dto.getCurrencyCode());
        assertEquals("98765432109", dto.getIdentityNumber());
        assertEquals("DOC999", dto.getDocumentId());
        assertEquals("2025-12-31", dto.getTransactionDate());
        assertEquals("COMPLETED", dto.getStatus());
        assertEquals(2, dto.getTransactionType());
        assertEquals(20, dto.getProcessUnitNum());
        assertNotNull(dto.getAmount());

        verify(blockingStub, times(1)).readDigitalOrder(any(DigitalOrderProto.DigitalOrderReadRequest.class));
    }

    @Test
    void readDigitalOrder_whenGrpcResponseIsNull_shouldHandleGracefully() {
        // Given
        when(blockingStub.readDigitalOrder(any(DigitalOrderProto.DigitalOrderReadRequest.class)))
                .thenReturn(null);

        // When
        DigitalOrderReadResponseDto result = digitalOrderService.readDigitalOrder(requestDto);

        // Then
        assertNull(result);
        verify(blockingStub, times(1)).readDigitalOrder(any(DigitalOrderProto.DigitalOrderReadRequest.class));
    }
}
