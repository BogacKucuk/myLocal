import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.amqp.core.Message;
import org.springframework.amqp.rabbit.listener.exception.AmqpRejectAndDontRequeueException;

import java.nio.charset.StandardCharsets;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class CardPaymentConsumerTest {

    @InjectMocks
    CardPaymentConsumer cardPaymentConsumer;

    @Mock
    CardPaymentsClient cardPaymentsClient;

    @Mock
    Message message;

    @Test
    void consumeMessage_shouldProcessSuccessfully() {
        // Arrange
        String jsonRequest = "{\"transactionType\":\"test\",\"transactionKey\":\"12345\"}";
        when(message.getBody()).thenReturn(jsonRequest.getBytes(StandardCharsets.UTF_8));
        doNothing().when(cardPaymentsClient).createCbsTransaction(Mockito.any());

        // Act
        cardPaymentConsumer.consumeMessage(message, Collections.emptyMap());

        // Assert
        verify(cardPaymentsClient, times(1)).createCbsTransaction(Mockito.any());
    }

    @Test
    void consumeMessage_shouldThrowException_whenJsonParsingFails() {
        // Arrange
        when(message.getBody()).thenReturn("invalid_json".getBytes(StandardCharsets.UTF_8));

        // Act & Assert
        assertThrows(AmqpRejectAndDontRequeueException.class, () ->
                cardPaymentConsumer.consumeMessage(message, Collections.emptyMap()));
    }

    @Test
    void consumeMessage_shouldNotProcess_whenRetryLimitExceeded() {
        // Arrange
        Map<String, Object> deathHeader = new HashMap<>();
        deathHeader.put("count", "3"); // RETRY_COUNT is 3

        // Act
        cardPaymentConsumer.consumeMessage(message, deathHeader);

        // Assert
        verifyNoInteractions(cardPaymentsClient);
    }

    @Test
    void retry_shouldReturnTrue_whenNoDeathHeader() {
        assertThat(cardPaymentConsumer.retry(null)).isTrue();
    }

    @Test
    void retry_shouldReturnTrue_whenDeathCountIsNull() {
        Map<String, Object> deathHeader = new HashMap<>();
        deathHeader.put("count", null);
        assertThat(cardPaymentConsumer.retry(deathHeader)).isTrue();
    }

    @Test
    void retry_shouldReturnTrue_whenDeathCountIsLessThanRetryLimit() {
        Map<String, Object> deathHeader = new HashMap<>();
        deathHeader.put("count", "2"); // Less than RETRY_COUNT
        assertThat(cardPaymentConsumer.retry(deathHeader)).isTrue();
    }

    @Test
    void retry_shouldReturnFalse_whenDeathCountExceedsRetryLimit() {
        Map<String, Object> deathHeader = new HashMap<>();
        deathHeader.put("count", "3"); // Equal to RETRY_COUNT
        assertThat(cardPaymentConsumer.retry(deathHeader)).isFalse();
    }
}
