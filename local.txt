package com.ykb.corebanking.tellerline.receipt.controller;

import java.util.ArrayList;
import java.util.List;

import com.ykb.corebanking.tellerline.receipt.controller.request.RequestReceiptAdcCriteria;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ykb.corebaking.tellerline.receipt.exception.ReceiptException;
import com.ykb.corebanking.tellerline.receipt.controller.request.RequestAdcReceiptDisplay;
import com.ykb.corebanking.tellerline.receipt.controller.request.RequestAdcReceiptListing;
import com.ykb.corebanking.tellerline.receipt.controller.response.ResponseAdcReceiptDisplay;
import com.ykb.corebanking.tellerline.receipt.controller.response.ResponseAdcReceiptDisplayList;
import com.ykb.corebanking.tellerline.receipt.controller.response.ResponseAdcReceiptListing;
import com.ykb.corebanking.tellerline.receipt.request.RequestReceiptSendMail;
import com.ykb.corebanking.tellerline.receipt.response.ResponseAdcWrapperSendMail;
import com.ykb.corebanking.tellerline.receipt.service.interfaces.IReceiptAlternativeDistributionChannelsService;
import com.ykb.corebanking.tellerline.receipt.service.interfaces.IReceiptLogService;
import com.ykb.corebanking.tellerline.receipt.service.interfaces.IReceiptMailWrapperService;

import io.github.resilience4j.ratelimiter.annotation.RateLimiter;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

@Validated
@RestController
@RequestMapping("/receipt/adc")
@Api("Receipt ADK Operations")
public class ReceiptAlternativeDistributionChannelsController {

	@Autowired
	private IReceiptLogService receiptLogService;
	@Autowired
	IReceiptAlternativeDistributionChannelsService receiptAlternativeDistributionChannelsService;
	@Autowired
	private IReceiptMailWrapperService receiptMailWrapperService;

	@PostMapping("/listing")
	@ApiOperation("Inquire Receipt ADC")
    @RateLimiter(name = "rateLimiterForADKListing")
	public ResponseEntity<ResponseAdcReceiptListing> inquireReceipt(@RequestBody RequestAdcReceiptListing request) {
        if (request.getAccount() != null && request.getCurrency() != null) {
            request.setAccount(request.getAccount() + "    " + request.getCurrency());
        }
		ResponseAdcReceiptListing response = receiptAlternativeDistributionChannelsService.getReceiptList(request);
		return new ResponseEntity<>(response, HttpStatus.OK);
	}
	
    @PostMapping("/receiptDisplay")
    @RateLimiter(name = "rateLimiterForADKReceiptDisplay")
    public ResponseEntity<ResponseAdcReceiptDisplayList> adcGetDisplay(@RequestBody RequestAdcReceiptDisplay requestAdcReceiptDisplay) throws ReceiptException {
        for (RequestReceiptAdcCriteria requestReceiptAdcCriteria : requestAdcReceiptDisplay.getRequestReceiptAdcCriteriaList()) {
            if (requestReceiptAdcCriteria.getAccount() != null && requestReceiptAdcCriteria.getCurrency() != null) {
                requestReceiptAdcCriteria.setAccountNo(requestReceiptAdcCriteria.getAccount() + "    " + requestReceiptAdcCriteria.getCurrency());
            }
        }
        try {
            ResponseAdcReceiptDisplayList responseList = new ResponseAdcReceiptDisplayList();
            List<ResponseAdcReceiptDisplay> response = receiptAlternativeDistributionChannelsService.getReceiptDisplayList(requestAdcReceiptDisplay);
            responseList.setResponseAdcReceiptDisplay(response);
            return new ResponseEntity<>(responseList, HttpStatus.OK);
        } catch (Exception e) {
            receiptLogService.insertErrorReceiptLog(receiptLogService.createRequestReceiptLog("AdcDisplay", requestAdcReceiptDisplay, e.getMessage()));
            return new ResponseEntity<>(createAdcErrorResponse(e.getMessage()), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    
	@PostMapping(path = "/sendMailAdc")
    @RateLimiter(name = "rateLimiterForADKSendMail")
	public ResponseEntity<ResponseAdcWrapperSendMail> sendEmailAdc(@RequestBody RequestReceiptSendMail request) {
		return new ResponseEntity<>(receiptMailWrapperService.sendMail(request), HttpStatus.OK);
	}


    private ResponseAdcReceiptDisplayList createAdcErrorResponse(String errorMessage) {
        ResponseAdcReceiptDisplayList responseList = new ResponseAdcReceiptDisplayList();
        List<ResponseAdcReceiptDisplay> responseObjectList = new ArrayList<>();
        ResponseAdcReceiptDisplay responseObject = ResponseAdcReceiptDisplay.builder().errorMessage(errorMessage).isSuccessful(true).build();
        responseObjectList.add(responseObject);
        responseList.setResponseAdcReceiptDisplay(responseObjectList);
        return responseList;
    }
}



package com.ykb.corebanking.tellerline.receipt.controller;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.ykb.corebaking.tellerline.receipt.exception.ReceiptException;
import com.ykb.corebanking.tellerline.receipt.controller.response.ResponseAdcReceiptDisplayList;
import com.ykb.corebanking.tellerline.receipt.controller.response.ResponseAdcReceiptListing;
import com.ykb.corebanking.tellerline.receipt.remote.service.interfaces.IAdcElectronicReceiptService;
import com.ykb.corebanking.tellerline.receipt.service.interfaces.IReceiptAlternativeDistributionChannelsService;
import com.ykb.corebanking.tellerline.receipt.service.interfaces.IReceiptDisplayService;
import com.ykb.corebanking.tellerline.receipt.service.interfaces.IReceiptLogService;
import com.ykb.corebanking.tellerline.receipt.util.ReceiptAlternativeDistributionChannelsServiceTestUtil;
import com.ykb.corebanking.tellerline.receipt.util.query.exception.QueryException;

@ExtendWith(SpringExtension.class)
class ReceiptAlternativeDistributionChannelsControllerTest {

	@InjectMocks
	ReceiptAlternativeDistributionChannelsController controller;
	
	@Mock
	IReceiptAlternativeDistributionChannelsService service;
	
	@Mock
	IReceiptDisplayService receiptDisplayService;
	
	@Mock
	IReceiptLogService receiptLogService;
	
	@Mock
	IAdcElectronicReceiptService adcElectronicReceiptService;

	@Test
	void whenInquired_shouldReturnHttpStatusOk() {
		when(service.getReceiptList(Mockito.any())).thenReturn(ReceiptAlternativeDistributionChannelsServiceTestUtil.getResponseReceiptAdcInquiry_Successfull());
		ResponseEntity<ResponseAdcReceiptListing> httpResponse = controller.inquireReceipt(ReceiptAlternativeDistributionChannelsServiceTestUtil.getRequestReceiptAdcInquiry_Fully());
		assertThat(httpResponse.getStatusCode()).isEqualTo(HttpStatus.OK);
		assertTrue(httpResponse.getBody().getIsSuccessful());
	}
	
	@Test
    void whenAdcGetDisplay_shouldReturnHttpStatusOk() throws ReceiptException, QueryException{
        when(receiptDisplayService.display(Mockito.any())).thenReturn(ReceiptAlternativeDistributionChannelsServiceTestUtil.getResponseReceiptDisplay());
        when(service.getReceiptDisplayList(Mockito.any())).thenReturn(ReceiptAlternativeDistributionChannelsServiceTestUtil.getResponseAdcReceiptDisplay());
        ResponseEntity<ResponseAdcReceiptDisplayList> httpResponse = controller.adcGetDisplay(ReceiptAlternativeDistributionChannelsServiceTestUtil.getRequestReceiptDisplayAdc());
        assertThat(httpResponse.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertFalse(httpResponse.getBody().getResponseAdcReceiptDisplay().get(0).getIsSuccessful());
        
    }
    @Test
    void whenAdcGetDisplay_shouldReturnInternalServerError() throws Exception{
        when(receiptDisplayService.display(Mockito.any())).thenReturn(ReceiptAlternativeDistributionChannelsServiceTestUtil.getResponseReceiptDisplay());
        when(service.getReceiptDisplayList(Mockito.any())).thenThrow(ReceiptException.class);
        ResponseEntity<ResponseAdcReceiptDisplayList> httpResponse = controller.adcGetDisplay(ReceiptAlternativeDistributionChannelsServiceTestUtil.getRequestReceiptDisplayAdc());
        assertThat(httpResponse.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);
        
    }
	
}
