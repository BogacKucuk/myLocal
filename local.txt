// İhtiyacın olan alanları ekleyebilirsin
export type ListParameter = {
  prmAttributeName: string;
  prmCode: string;
  // ... diğer alanlar
};

type GetParamError =
  | 'UNAVAILABLE'    // sessionStorage'da 'params' yok
  | 'PARSE_ERROR'    // JSON.parse hatası
  | 'INVALID_SHAPE'  // Beklenen dizi/alanlar yok
  | 'NOT_FOUND';     // BELGETRM içinde prmCode eşleşmedi

type Result<T> =
  | { ok: true; data: T }
  | { ok: false; reason: GetParamError };

export function getParameterSafe(prmCode: string): Result<ListParameter> {
  const raw = sessionStorage.getItem('params');
  if (!raw) return { ok: false, reason: 'UNAVAILABLE' };

  let parsed: unknown;
  try {
    parsed = JSON.parse(raw);
  } catch {
    return { ok: false, reason: 'PARSE_ERROR' };
  }

  if (!Array.isArray(parsed)) {
    return { ok: false, reason: 'INVALID_SHAPE' };
  }

  // Basit tip kontrolü ve arama
  const code = String(prmCode).trim();
  const found = (parsed as unknown[]).find((it: any) =>
    it &&
    typeof it.prmAttributeName === 'string' &&
    typeof it.prmCode === 'string' &&
    it.prmAttributeName === 'BELGETRM' &&
    it.prmCode === code
  ) as ListParameter | undefined;

  return found
    ? { ok: true, data: found }
    : { ok: false, reason: 'NOT_FOUND' };
}

// İstersen doğrudan fallback isteyenler için yardımcı:
export function getParameterOrDefault(
  prmCode: string,
  defaultValue: ListParameter | null = null
): ListParameter | null {
  const res = getParameterSafe(prmCode);
  return res.ok ? res.data : defaultValue;
}
