
    @Test
    void when_getCashTrxnSystemParametersContaining_withValidRequest_shouldReturnParameters() {
        RequestCashTrxnSystemParameter request = new RequestCashTrxnSystemParameter();
        request.setParameterName("testParam");
        
        CashTrxnSystemParameterEntity entity = createCashTrxnSystemParameterEntity();
        entity.setParameterName("testParam");
        entity.setValue("VAL");
        
        when(cashTrxnSystemParameterRepository.findByParameterNameContaining("testParam"))
            .thenReturn(Arrays.asList(entity));

        ResponseCashTrxnSystemParameterList response = cashTrxnSystemParameterService.getCashTrxnSystemParametersContaining(request);
        
        assertNotNull(response);
        assertNotNull(response.getCashTrxnParameterDTOList());
        assertEquals(1, response.getCashTrxnParameterDTOList().size());
        assertEquals("VAL", response.getCashTrxnParameterDTOList().get(0).getValue());
    }

    @Test
    void when_getCashTrxnSystemParametersContaining_withNoEntitiesFound_shouldReturnEmptyList() {
        RequestCashTrxnSystemParameter request = new RequestCashTrxnSystemParameter();
        request.setParameterName("nonExistingParam");

        when(cashTrxnSystemParameterRepository.findByParameterNameContaining("nonExistingParam"))
            .thenReturn(Collections.emptyList());

        ResponseCashTrxnSystemParameterList response = cashTrxnSystemParameterService.getCashTrxnSystemParametersContaining(request);

        assertNotNull(response);
        assertNull(response.getCashTrxnParameterDTOList());
    }

    @Test
    void when_createSystemParameter_withValidRequest_shouldReturnResponse() throws CashTrxnParameterException {
        CashTrxnSystemParameterEntity savedEntity = createCashTrxnSystemParameterEntity();
        savedEntity.setParameterName("NEW_PARAM");
        savedEntity.setValue("NEW_VALUE");
        
        when(cashTrxnSystemParameterRepository.saveAndFlush(any(CashTrxnSystemParameterEntity.class))).thenReturn(savedEntity);

        RequestCashTrxnCreateParameter request = new RequestCashTrxnCreateParameter();
        CashTrxnParameterDTO dto = new CashTrxnParameterDTO();
        dto.setParameterName("NEW_PARAM");
        dto.setValue("NEW_VALUE");
        request.setParameterDTO(dto);
        request.setTable("SYSTEM");

        ResponseCashTrxnCreateParameter response = cashTrxnSystemParameterService.createSystemParameter(request);
        assertNotNull(response);
        assertEquals("NEW_PARAM", response.getParameterName());
        assertEquals("NEW_VALUE", response.getParameterDTO().getValue());
    }

    @Test
    void when_updateCashTrxnSystemParameter_withValidRequest_shouldReturnUpdatedResponse() throws CashTrxnParameterException {
        CashTrxnSystemParameterEntity updatedEntity = createCashTrxnSystemParameterEntity();
        updatedEntity.setParameterName("UPDATED_PARAM");
        updatedEntity.setValue("UPDATED_VALUE");

        when(cashTrxnSystemParameterRepository.saveAndFlush(any(CashTrxnSystemParameterEntity.class))).thenReturn(updatedEntity);

        RequestCashTrxnUpdateParameter request = new RequestCashTrxnUpdateParameter();
        CashTrxnParameterDTO dto = new CashTrxnParameterDTO();
        dto.setParameterName("UPDATED_PARAM");
        dto.setValue("UPDATED_VALUE");
        request.setCashTrxnParameterDTO(dto);
        request.setTable("SYSTEM");

        ResponseCashTrxnUpdateParameter response = cashTrxnSystemParameterService.updateCashTrxnSystemParameter(request);
        assertNotNull(response);
        assertEquals("UPDATED_PARAM", response.getParameterName());
        assertEquals("UPDATED_VALUE", response.getCashTrxnParameterDTO().getValue());
    }

    @Test
    void when_deleteCashTrxnSystemParameter_withValidId_shouldNotThrowException() {
        doNothing().when(cashTrxnSystemParameterRepository).deleteById("PARAM_TO_DELETE");

        assertDoesNotThrow(() -> cashTrxnSystemParameterService.deleteCashTrxnSystemParameter("PARAM_TO_DELETE"));
        verify(cashTrxnSystemParameterRepository, times(1)).deleteById("PARAM_TO_DELETE");
    }
