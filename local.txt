// SmartControlServiceTest.java
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import java.util.Arrays;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class SmartControlServiceTest {

    @Mock
    ICashTrxnParameterService parameterService;

    @InjectMocks
    SmartControlService smartControlService;

    SmartControlServiceTest() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void getDocumentParameters_ShouldReturnParameterList() throws TrxnParameterNotFoundException {
        String parameterName = "testParam";
        List<CashTrxnParameterDTO> mockList = Arrays.asList(new CashTrxnParameterDTO());
        when(parameterService.getCashTrxnInfoParametersContainingWithCache(parameterName)).thenReturn(mockList);

        List<CashTrxnParameterDTO> result = smartControlService.getDocumentParameters(parameterName);

        assertNotNull(result);
        assertEquals(1, result.size());
        verify(parameterService, times(1)).getCashTrxnInfoParametersContainingWithCache(parameterName);
    }

    @Test
    void getDocumentParameters_ShouldThrowException_WhenNoParametersFound() {
        String parameterName = "testParam";
        when(parameterService.getCashTrxnInfoParametersContainingWithCache(parameterName)).thenReturn(null);

        assertThrows(TrxnParameterNotFoundException.class, () -> {
            smartControlService.getDocumentParameters(parameterName);
        });

        verify(parameterService, times(1)).getCashTrxnInfoParametersContainingWithCache(parameterName);
    }
}


// SmartControlControllerTest.java
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;
import java.util.Arrays;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class SmartControlControllerTest {

    @Mock
    ISmartControlService smartControlService;

    @InjectMocks
    SmartControlController controller;

    SmartControlControllerTest() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void getSmartControlDocuments_ShouldReturnOkResponse() throws TrxnParameterNotFoundException {
        String parameterName = "testParam";
        RequestSmartControlDocuments request = new RequestSmartControlDocuments();
        request.setParameterName(parameterName);

        List<CashTrxnParameterDTO> mockList = Arrays.asList(new CashTrxnParameterDTO());
        when(smartControlService.getDocumentParameters(parameterName)).thenReturn(mockList);

        ResponseEntity<List<CashTrxnParameterDTO>> response = controller.getSmartControlDocuments(request);

        assertNotNull(response);
        assertEquals(200, response.getStatusCodeValue());
        assertEquals(mockList, response.getBody());
        verify(smartControlService, times(1)).getDocumentParameters(parameterName);
    }

    @Test
    void getSmartControlDocuments_ShouldThrowException_WhenServiceFails() throws TrxnParameterNotFoundException {
        String parameterName = "testParam";
        RequestSmartControlDocuments request = new RequestSmartControlDocuments();
        request.setParameterName(parameterName);

        when(smartControlService.getDocumentParameters(parameterName)).thenThrow(new TrxnParameterNotFoundException("Not found"));

        assertThrows(TrxnParameterNotFoundException.class, () -> {
            controller.getSmartControlDocuments(request);
        });

        verify(smartControlService, times(1)).getDocumentParameters(parameterName);
    }
}
