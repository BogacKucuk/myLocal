import React, { JSX, useEffect, useMemo, useState } from 'react';
import {
  EfaCollapseDocumentScannerMultiCustomer
} from '@efa-web-components-multi-cust-doc/efa-collapse-document-scanner-multi-customer';
import { useAppSelector } from '../../store';
import { TransactionMaker } from '../../store/slices/transactionSlice';
import {
  DocumentInfo,
  makeDocumentInfoFromCode,
  parseDebitSets,
  toStr
} from '../../utils/DocumentScanner/documentScannerUtils';

type Person = {
  customerNum: string;
  mernisNum: string;
  taxNum: number;
  docPersonType: string;
  transferableDocClass: string;
};

type DocumentScanInfo = {
  processCode: string;
  processId: string;
  processLevelNum: string;
  processText: string;
  useMaxDisplay: string;
  maxDisplayPerSet: string;
};

type CustomerData = {
  customerNum: string;
  fullName: string;
  documentScannerData: {
    personListJson: Person[];
    documentListJson: DocumentInfo[];
    documentScanInfoJson: DocumentScanInfo;
  };
};

const DocumentScannerComponent = (): JSX.Element => {
  const { transactionMaker, documentSetDebit, extraDocSetsByCustomer, opCode } =
    useAppSelector((s) => s.transactionInfo);

  // ---- CUSTOMER SLICE ----
  const primaryCustomerNumberRaw = useAppSelector(
    (state) => state.customerInfoReducer.customerNumber as string | number | undefined
  );
  const primaryCustomerNumber = useMemo(
    () => String(primaryCustomerNumberRaw ?? ''),
    [primaryCustomerNumberRaw]
  );

  const primaryCustomerTcknRaw = useAppSelector(
    (state) => state.customerInfoReducer.tckn as string | number | undefined
  );
  const primaryCustomerTckn = useMemo(
    () => String(primaryCustomerTcknRaw ?? ''),
    [primaryCustomerTcknRaw]
  );

  const primaryCustomerFullName = useAppSelector(
    (state) => state.customerInfoReducer.customerFullName as string | undefined
  );

  // ---- MAKERS (transactionMaker + primary merge) ----
  const makers = useMemo(() => {
    const normalized = transactionMaker.map((tm: TransactionMaker) => ({
      ...tm,
      customerNumber: toStr(tm.customerNumber),
      mernisNum: toStr(tm.mernisNum),
    }));

    const exists =
      primaryCustomerNumber !== '' &&
      normalized.some((m) => m.customerNumber === primaryCustomerNumber);

    if (!exists && primaryCustomerNumber !== '') {
      normalized.unshift({
        name: '',
        surname: '',
        address: '',
        customerNumber: primaryCustomerNumber,
        mernisNum: primaryCustomerTckn,
      } as TransactionMaker);
    }

    const seen = new Set<string>();
    return normalized.filter((m) => {
      if (seen.has(m.customerNumber)) return false;
      seen.add(m.customerNumber);
      return true;
    });
  }, [transactionMaker, primaryCustomerNumber, primaryCustomerTckn]);

  // ---- PERSON LIST ----
  const [personListJson, setPersonListJson] = useState<Person[][]>([]);
  useEffect(() => {
    const next: Person[][] = makers.map((tm) => [
      {
        customerNum: tm.customerNumber,
        mernisNum: tm.mernisNum || primaryCustomerTckn,
        taxNum: 0,
        docPersonType: '01',
        transferableDocClass: '',
      },
    ]);
    setPersonListJson(next);
  }, [makers, primaryCustomerTckn]);

  // ---- BASE SETS (I/B ayrımı + PR-HES-KAS-FIS-T tekilleştirme) ----
  const baseSets = useMemo(() => {
    const parsed = parseDebitSets(documentSetDebit);
    if (opCode === 'PR-HES-KAS-FIS-T') {
      const uniq = <T extends string>(arr: T[]) => Array.from(new Set(arr));
      return { I: uniq(parsed.I), B: uniq(parsed.B) };
    }
    return parsed;
  }, [documentSetDebit, opCode]);

  // ---- SABİT SCAN INFO ----
  const documentScanInfoJson: DocumentScanInfo = useMemo(
    () => ({
      processCode: 'GENELADRES',
      processId: 'MN000000045003398',
      processLevelNum: '0',
      processText: '',
      useMaxDisplay: 'false',
      maxDisplayPerSet: '0',
    }),
    []
  );

  // ---- COMPDATA (asıl veri) ----
  const compData = useMemo<CustomerData[]>(() => {
    return makers.map((tm, i) => {
      const isPrimary =
        primaryCustomerNumber !== '' && tm.customerNumber === primaryCustomerNumber;

      // Herkese I set(ler)i
      let codes = [...baseSets.I];

      // Primary müşteriye ayrıca B set(ler)i (varsa)
      if (isPrimary && baseSets.B.length > 0) {
        codes = [...codes, ...baseSets.B];
      }

      // Ek (butonla gelen) setler
      const extraCodes = extraDocSetsByCustomer[tm.customerNumber] ?? [];
      const allCodes = [...codes, ...extraCodes];

      // DocumentInfo dizisine çevir
      const documentListJson: DocumentInfo[] = allCodes.map((c) =>
        makeDocumentInfoFromCode(c)
      );

      const personArr = personListJson[i] ?? [];

      // fullName: customerInfoReducer.customerFullName varsa onu kullan
      const fullName =
        (isPrimary && primaryCustomerFullName) ||
        `${tm.name ?? ''} ${tm.surname ?? ''}`.trim() ||
        `User ${i + 1}`;

      return {
        customerNum: tm.customerNumber,
        fullName,
        documentScannerData: {
          personListJson: personArr,
          documentListJson,
          documentScanInfoJson,
        },
      };
    });
  }, [
    makers,
    primaryCustomerNumber,
    baseSets,
    extraDocSetsByCustomer,
    personListJson,
    documentScanInfoJson,
    primaryCustomerFullName,
  ]);

  return <EfaCollapseDocumentScannerMultiCustomer data={compData} />;
};

export default DocumentScannerComponent;
