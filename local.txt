package com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.mapper;

import com.garantibbva.customerdossiermng.customerdocumentsbusiness.proto.DocumentScanServiceProto.*;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.grpc.mapper.config.GrpcMapperConfig;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.request.CreateDocumentDB2RequestDto;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.request.GroupListDto;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.request.GroupListItemDto;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.request.IdCardTxnDetailDto;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.request.IdCardTxnDto;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.request.ReferenceIdServerDataDto;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.response.ContextStringDto;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.response.CreateDocumentDB2ResponseDto;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.response.ErrorComponentDto;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

import java.util.List;
import java.util.stream.Collectors;

@Mapper(config = GrpcMapperConfig.class)
public interface DocumentProcessMapper {

  DocumentProcessMapper INSTANCE = Mappers.getMapper(DocumentProcessMapper.class);

  // ==================== Request Mappings ====================

  /**
   * Business DTO'dan External Service gRPC Request'e dönüşüm
   */
  default ProcessCreateGrpcRequest toProcessCreateGrpcRequest(CreateDocumentDB2RequestDto dto) {
    if (dto == null) {
      return null;
    }
    
    ProcessCreateGrpcRequest.Builder builder = ProcessCreateGrpcRequest.newBuilder();
    
    if (dto.getReferenceIdServerData() != null) {
      builder.setReferenceIdServerData(toProcessCreateReferenceIdServerData(dto.getReferenceIdServerData()));
    }
    
    if (dto.getIdCardTxn() != null) {
      builder.setIdCardTxn(toProcessCreateIdCardTxn(dto.getIdCardTxn()));
    }
    
    if (dto.getGroupList() != null) {
      builder.setGroupList(toProcessCreateGroupList(dto.getGroupList()));
    }
    
    if (dto.getCompanyCode() != null) {
      builder.setCompanyCode(dto.getCompanyCode());
    }
    
    return builder.build();
  }

  // ReferenceIdServerData mappings
  default ReferenceIdServerData toProcessCreateReferenceIdServerData(ReferenceIdServerDataDto dto) {
    if (dto == null) {
      return null;
    }
    return ReferenceIdServerData.newBuilder()
            .setUserId(dto.getUserId() != null ? dto.getUserId() : "")
            .setReferenceId(dto.getReferenceId() != null ? dto.getReferenceId() : "")
            .build();
  }
  
  ReferenceIdServerDataDto toReferenceIdServerDataDto(ReferenceIdServerData grpc);

  // ProcessCreateIdCardTxn mappings
  default ProcessCreateIdCardTxn toProcessCreateIdCardTxn(IdCardTxnDto dto) {
    if (dto == null) {
      return null;
    }
    return ProcessCreateIdCardTxn.newBuilder()
            .setTxnId(dto.getTxnId() != null ? dto.getTxnId() : "")
            .setSourceText(dto.getSourceText() != null ? dto.getSourceText() : "")
            .setUnitNum(dto.getUnitNum() != null ? dto.getUnitNum() : 0)
            .setProductCode(dto.getProductCode() != null ? dto.getProductCode() : "")
            .setProductId(dto.getProductId() != null ? dto.getProductId() : "")
            .setProcessId(dto.getProcessId() != null ? dto.getProcessId() : "")
            .setProcessCode(dto.getProcessCode() != null ? dto.getProcessCode() : "")
            .build();
  }
  
  IdCardTxnDto toIdCardTxnDto(ProcessCreateIdCardTxn grpc);

  // ProcessCreateGroupList mappings
  default ProcessCreateGroupList toProcessCreateGroupList(GroupListDto dto) {
    if (dto == null || dto.getGroupListItems() == null) {
      return ProcessCreateGroupList.newBuilder().build();
    }
    
    List<ProcessCreateGroupListItem> items = dto.getGroupListItems().stream()
            .map(this::toProcessCreateGroupListItem)
            .collect(Collectors.toList());
    
    return ProcessCreateGroupList.newBuilder()
            .addAllGroupListItems(items)
            .build();
  }
  
  GroupListDto toGroupListDto(ProcessCreateGroupList grpc);

  // ProcessCreateGroupListItem mappings
  default ProcessCreateGroupListItem toProcessCreateGroupListItem(GroupListItemDto dto) {
    if (dto == null) {
      return null;
    }
    
    ProcessCreateGroupListItem.Builder builder = ProcessCreateGroupListItem.newBuilder();
    
    if (dto.getIdCardTxn() != null) {
      builder.setIdCardTxn(toProcessCreateGroupListIdCardTxn(dto.getIdCardTxn()));
    }
    
    if (dto.getCustomerNum() != null) {
      builder.setCustomerNum(dto.getCustomerNum());
    }
    
    return builder.build();
  }
  
  GroupListItemDto toGroupListItemDto(ProcessCreateGroupListItem grpc);

  // ProcessCreateGroupListIdCardTxn mappings
  default ProcessCreateGroupListIdCardTxn toProcessCreateGroupListIdCardTxn(IdCardTxnDetailDto dto) {
    if (dto == null) {
      return null;
    }
    return ProcessCreateGroupListIdCardTxn.newBuilder()
            .setDocumentId(dto.getDocumentId() != null ? dto.getDocumentId() : "")
            .setDocPersonType(dto.getDocPersonType() != null ? dto.getDocPersonType() : "")
            .build();
  }
  
  IdCardTxnDetailDto toIdCardTxnDetailDto(ProcessCreateGroupListIdCardTxn grpc);

  // ==================== Response Mappings ====================

  /**
   * External Service gRPC Response'tan Business DTO'ya dönüşüm
   */
  @Mapping(target = "instanceId", source = "instanceId")
  @Mapping(target = "errorComponent", source = "errorComponent")
  CreateDocumentDB2ResponseDto toResponseDto(ProcessCreateGrpcResponse grpcResponse);

  // ErrorComponent mappings
  @Mapping(target = "severityCode", source = "severityCode")
  @Mapping(target = "rollbackIndicator", source = "rollbackIndicator")
  @Mapping(target = "originServId", source = "originServId")
  @Mapping(target = "contextString", source = "contextString")
  @Mapping(target = "returnCode", source = "returnCode")
  @Mapping(target = "reasonCode", source = "reasonCode")
  @Mapping(target = "checksum", source = "checksum")
  ErrorComponentDto toErrorComponentDto(ErrorComponent grpc);

  // ContextString mappings
  ContextString toProcessCreateContextString(ContextStringDto dto);
  ContextStringDto toContextStringDto(ContextString grpc);
}
