export type ListParameter = {
  prmAttributeName: string;
  prmCode: string;
  // ... ihtiyaç olan diğer alanlar
};

type GetParamError =
  | 'UNAVAILABLE'
  | 'PARSE_ERROR'
  | 'INVALID_SHAPE'
  | 'NOT_FOUND';

type Result<T> =
  | { ok: true; data: T }
  | { ok: false; reason: GetParamError };

/** object mi? */
function isRecord(v: unknown): v is Record<string, unknown> {
  return typeof v === 'object' && v !== null;
}

/** tek eleman ListParameter mı? */
function isListParameter(v: unknown): v is ListParameter {
  if (!isRecord(v)) return false;
  return (
    typeof v.prmAttributeName === 'string' &&
    typeof v.prmCode === 'string'
  );
}

export function getParameterSafe(prmCode: string): Result<ListParameter> {
  const raw = sessionStorage.getItem('params');
  if (!raw) return { ok: false, reason: 'UNAVAILABLE' };

  let parsed: unknown;
  try {
    parsed = JSON.parse(raw);
  } catch {
    return { ok: false, reason: 'PARSE_ERROR' };
  }

  if (!Array.isArray(parsed)) {
    return { ok: false, reason: 'INVALID_SHAPE' };
  }

  const code = String(prmCode).trim();

  // find içinde type predicate kullanıyoruz -> bulunursa tipi ListParameter
  const found = parsed.find(
    (it): it is ListParameter =>
      isListParameter(it) &&
      it.prmAttributeName === 'BELGETRM' &&
      it.prmCode === code
  );

  return found
    ? { ok: true, data: found }
    : { ok: false, reason: 'NOT_FOUND' };
}

export function getParameterOrDefault(
  prmCode: string,
  defaultValue: ListParameter | null = null
): ListParameter | null {
  const res = getParameterSafe(prmCode);
  return res.ok ? res.data : defaultValue;
}
