package com.ykb.corebanking.vault.money.deposit.withdraw.service.impl;

import com.ykb.corebanking.vault.money.deposit.withdraw.dto.CashSealApprovalDTO;
import com.ykb.corebanking.vault.money.deposit.withdraw.entity.CashSealApprovalEntity;
import com.ykb.corebanking.vault.money.deposit.withdraw.exception.CashSealApprovalNotFoundException;
import com.ykb.corebanking.vault.money.deposit.withdraw.exception.CashSealApprovalSaveException;
import com.ykb.corebanking.vault.money.deposit.withdraw.mapper.ICashSealApprovalMapper;
import com.ykb.corebanking.vault.money.deposit.withdraw.repository.ICashSealApprovalRepository;
import com.ykb.corebanking.vault.money.deposit.withdraw.request.RequestCreateCashSealApproval;
import com.ykb.corebanking.vault.money.deposit.withdraw.response.ResponseCreateCashSealApproval;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mapstruct.factory.Mappers;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.util.Date;
import java.util.Optional;

@ExtendWith(SpringExtension.class)
class CashSealApprovalServiceTest {

    @Mock
    ICashSealApprovalRepository repository;

    @InjectMocks
    CashSealApprovalService service;

    ICashSealApprovalMapper mapper = Mappers.getMapper(ICashSealApprovalMapper.class);

    @BeforeEach
    void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void createCashSealApprovalRecord_success() throws CashSealApprovalSaveException {
        CashSealApprovalDTO dto = new CashSealApprovalDTO();
        dto.setProcessCode("DEPOSIT");
        dto.setCustomerNo(369L);
        dto.setUserCode("U073485");
        dto.setBranchCode("326");
        dto.setApprovalType("S");
        dto.setCreateDate(new Date());

        RequestCreateCashSealApproval request = new RequestCreateCashSealApproval();
        request.setCashSealApprovalDTO(dto);

        CashSealApprovalEntity entity = mapper.dtoToEntity(dto);
        entity.setId(1L);

        Mockito.when(repository.saveAndFlush(Mockito.any(CashSealApprovalEntity.class))).thenReturn(entity);

        ResponseCreateCashSealApproval response = service.createCashSealApprovalRecord(request);

        Assertions.assertNotNull(response);
        Assertions.assertEquals(1L, response.getId());
        Assertions.assertNotNull(response.getCashSealApprovalDTO());
        Assertions.assertEquals("DEPOSIT", response.getCashSealApprovalDTO().getProcessCode());
    }

    @Test
    void createCashSealApprovalRecord_nullRequest_throwsException() {
        Assertions.assertThrows(CashSealApprovalSaveException.class, () -> service.createCashSealApprovalRecord(null));
    }

    @Test
    void createCashSealApprovalRecord_nullInnerDto_throwsException() {
        RequestCreateCashSealApproval request = new RequestCreateCashSealApproval();
        request.setCashSealApprovalDTO(null);

        Assertions.assertThrows(CashSealApprovalSaveException.class, () -> service.createCashSealApprovalRecord(request));
    }

    @Test
    void createCashSealApprovalRecord_repositoryException_throwsException() {
        CashSealApprovalDTO dto = new CashSealApprovalDTO();
        dto.setProcessCode("WITHDRAW");
        dto.setCustomerNo(369L);
        dto.setUserCode("U073485");
        dto.setBranchCode("326");
        dto.setApprovalType("O");
        dto.setCreateDate(new Date());

        RequestCreateCashSealApproval request = new RequestCreateCashSealApproval();
        request.setCashSealApprovalDTO(dto);

        Mockito.when(repository.saveAndFlush(Mockito.any())).thenThrow(new RuntimeException("DB error"));

        Assertions.assertThrows(CashSealApprovalSaveException.class, () -> service.createCashSealApprovalRecord(request));
    }

    @Test
    void findById_success() throws CashSealApprovalSaveException, CashSealApprovalNotFoundException {
        CashSealApprovalEntity entity = new CashSealApprovalEntity();
        entity.setId(1L);
        entity.setProcessCode("DEPOSIT");
        entity.setCustomerNo(369L);
        entity.setUserCode("U073485");
        entity.setBranchCode("326");
        entity.setApprovalType("S");
        entity.setCreateDate(new Date());

        Mockito.when(repository.findById(1L)).thenReturn(Optional.of(entity));

        CashSealApprovalDTO result = service.findById(1L);

        Assertions.assertNotNull(result);
        Assertions.assertEquals("DEPOSIT", result.getProcessCode());
        Assertions.assertEquals(369L, result.getCustomerNo());
        Assertions.assertEquals("U073485", result.getUserCode());
        Assertions.assertEquals("326", result.getBranchCode());
        Assertions.assertEquals("S", result.getApprovalType());
    }

    @Test
    void findById_notFound_throwsException() {
        Mockito.when(repository.findById(99L)).thenReturn(Optional.empty());

        Assertions.assertThrows(CashSealApprovalNotFoundException.class, () -> service.findById(99L));
    }

    @Test
    void findById_repositoryException_throwsSaveException() {
        Mockito.when(repository.findById(Mockito.anyLong())).thenThrow(new RuntimeException("DB error"));
        Assertions.assertThrows(CashSealApprovalSaveException.class, () -> service.findById(2L));
    }

}
