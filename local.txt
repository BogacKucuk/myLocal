import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.times;

import java.util.Arrays;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit.jupiter.SpringExtension;

@ExtendWith(SpringExtension.class)
class SafeDepositBoxClosingIdentityControlControllerTest {

    @InjectMocks
    SafeDepositBoxClosingIdentityControlController controller;

    @Mock
    ISafeDepositBoxClosingIdentityControlService identityControlService;

    @BeforeEach
    void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void checkIdentitySuccess() throws Exception {
        RequestSafeDepositBoxClosingIdentityControl request = new RequestSafeDepositBoxClosingIdentityControl();
        request.setClientType("PERSONAL");
        request.setClientNo(1);
        request.setBranchCode("001");
        request.setUserCode("user123");

        ResponseSafeDepositBoxClosingIdentityControl response = new ResponseSafeDepositBoxClosingIdentityControl();
        response.setIdentityControlNecessary(true);
        response.setProcessTypeCodes(Arrays.asList("TYPE1", "TYPE2"));
        response.setChannelCode("CH001");
        response.setClientNo(1);
        response.setBranchCode("001");
        response.setClientType("PERSONAL");
        response.setThirdPerson(false);

        when(identityControlService.checkIdentity(request)).thenReturn(response);

        ResponseEntity<ResponseSafeDepositBoxClosingIdentityControl> result = controller.checkIdentity(request);

        assertEquals(HttpStatus.OK, result.getStatusCode());
        assertEquals(response, result.getBody());
        verify(identityControlService, times(1)).checkIdentity(request);
    }

    @Test
    void checkIdentityThrowsException() throws Exception {
        RequestSafeDepositBoxClosingIdentityControl request = new RequestSafeDepositBoxClosingIdentityControl();
        request.setClientType("BUSINESS");
        request.setClientNo(2);
        request.setBranchCode("002");
        request.setUserCode("user456");

        when(identityControlService.checkIdentity(request))
                .thenThrow(new SafeDepositBoxClosingIdentityControlException("Test Exception"));

        assertThrows(SafeDepositBoxClosingIdentityControlException.class, () -> controller.checkIdentity(request));
        verify(identityControlService, times(1)).checkIdentity(request);
    }
}
