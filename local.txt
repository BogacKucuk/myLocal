package com.ykb.corebanking.vault.money.deposit.withdraw.service.impl;

import com.ykb.corebanking.vault.money.deposit.withdraw.constant.AccountConstant;
import com.ykb.corebanking.vault.money.deposit.withdraw.constant.NotificationConstants;
import com.ykb.corebanking.vault.money.deposit.withdraw.dto.*;
import com.ykb.corebanking.vault.money.deposit.withdraw.exception.AccountException;
import com.ykb.corebanking.vault.money.deposit.withdraw.kafka.producer.CustomerNotificationProducer;
import com.ykb.corebanking.vault.money.deposit.withdraw.micro.clients.AccountClient;
import com.ykb.corebanking.vault.money.deposit.withdraw.response.AccountInfoResponse;
import com.ykb.corebanking.vault.money.deposit.withdraw.service.ICustomerNotificationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

@Service
public class CustomerNotificationService implements ICustomerNotificationService {
    private AccountClient accountClient;
    private CustomerNotificationProducer notificationProducer;

    @Autowired
    public CustomerNotificationService(AccountClient accountClient, CustomerNotificationProducer notificationProducer) {
        this.accountClient = accountClient;
        this.notificationProducer = notificationProducer;
    }

    @Override
    public void sendToNotificationQueue(CashTransactionDTO cashTransactionDTO, List<CashTransactionDetailDTO> cashTransactionDetailDTOList) throws AccountException {
        CustomerNotificationDTO customerNotificationDTO = getParameters(cashTransactionDTO, cashTransactionDetailDTOList);
        notificationProducer.sendMessageToNotificationQueue(customerNotificationDTO);
    }

    public CustomerNotificationDTO getParameters(CashTransactionDTO cashTransactionDTO, List<CashTransactionDetailDTO> cashTransactionDetailDTOList) throws AccountException {
        CustomerNotificationDTO customerNotificationDTO = new CustomerNotificationDTO();

        ResponseBalanceInfo balanceInfo = null;
        AccountInfoResponse accountInfoResponse;
        try {
            ResponseEntity<ResponseBalanceInfo> responseBalanceInfo = accountClient.getBalanceInfo(cashTransactionDetailDTOList.get(0).getAccountNo(), Boolean.FALSE);
            if (responseBalanceInfo != null && responseBalanceInfo.getBody() != null) {
                balanceInfo = responseBalanceInfo.getBody();
            }
            ResponseEntity<AccountInfoResponse> accountNumberWithCurrency = accountClient.getAccountByAccountNoWithoutException(cashTransactionDetailDTOList.get(0).getAccountNo());
            if (accountNumberWithCurrency != null && accountNumberWithCurrency.getBody() != null) {
                accountInfoResponse = accountNumberWithCurrency.getBody();
            }
            else {
                throw new AccountException(AccountConstant.ACCOUNT_NOT_FOUND_ERROR_MESSAGE);
            }

        }
        catch (Exception e) {
            throw new AccountException("Hesap bilgileri bulunamadÄ±.");
        }

        List<TransactionDetails> transactionDetailsList = getTransactionDetail(cashTransactionDTO, cashTransactionDetailDTOList, balanceInfo, accountInfoResponse);
        TransactionHeader transactionHeader = getTransactionHeaders(cashTransactionDTO, cashTransactionDetailDTOList, accountInfoResponse);
        customerNotificationDTO.setTransactionHeader(transactionHeader);
        customerNotificationDTO.setTransactionDetails(transactionDetailsList);

        return customerNotificationDTO;
    }

    private List<TransactionDetails> getTransactionDetail(CashTransactionDTO cashTransactionDTO, List<CashTransactionDetailDTO> cashTransactionDetailDTOList,
                                                          ResponseBalanceInfo balanceInfo, AccountInfoResponse accountInfoResponse) {
        List<TransactionDetails> transactionDetailsList = new ArrayList<>();

        // Add fixed transaction details
        addFixedTransactionDetails(transactionDetailsList, cashTransactionDTO, cashTransactionDetailDTOList, accountInfoResponse);

        // Calculate amountText and isKgvIncluded
        AmountCalculationResult amountResult = calculateAmountTextAndIsKgvIncluded(cashTransactionDetailDTOList);

        // Add amountText
        TransactionDetails transactionDetail = new TransactionDetails();
        transactionDetail.setTransactionId(cashTransactionDetailDTOList.get(0).getTransactionId());
        transactionDetail.setParameterName("amountText");
        transactionDetail.setParameterValue(amountResult.getAmountText());
        transactionDetailsList.add(transactionDetail);

        // Add availableBalance
        transactionDetail = new TransactionDetails();
        transactionDetail.setTransactionId(cashTransactionDetailDTOList.get(0).getTransactionId());
        transactionDetail.setParameterName("availableBalance");
        transactionDetail.setParameterValue(balanceInfo.getBalanceDTO().getAvailableBalance().toString());
        transactionDetailsList.add(transactionDetail);

        // Add totalBalance
        transactionDetail = new TransactionDetails();
        transactionDetail.setTransactionId(cashTransactionDetailDTOList.get(0).getTransactionId());
        transactionDetail.setParameterName("totalBalance");
        transactionDetail.setParameterValue(balanceInfo.getBalanceDTO().getValueBalance().toString());
        transactionDetailsList.add(transactionDetail);

        // Add IsTaxIncluded
        transactionDetail = new TransactionDetails();
        transactionDetail.setTransactionId(cashTransactionDetailDTOList.get(0).getTransactionId());
        transactionDetail.setParameterName("IsTaxIncluded");
        transactionDetail.setParameterValue(amountResult.getIsKgvIncluded().toString());
        transactionDetailsList.add(transactionDetail);

        return transactionDetailsList;
    }

    private void addFixedTransactionDetails(List<TransactionDetails> transactionDetailsList,
                                            CashTransactionDTO cashTransactionDTO,
                                            List<CashTransactionDetailDTO> cashTransactionDetailDTOList,
                                            AccountInfoResponse accountInfoResponse) {
        TransactionDetails transactionDetail;

        transactionDetail = createTransactionDetail(cashTransactionDetailDTOList.get(0).getTransactionId(),
                "IsFlexibleAccount",
                accountInfoResponse.getIsFlexibleAccount());
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail(cashTransactionDetailDTOList.get(0).getTransactionId(),
                "customerName", cashTransactionDetailDTOList.get(0).getCashTransactionStoredRequest().getClientInfo().getNameSurname());
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail(cashTransactionDetailDTOList.get(0).getTransactionId(),
                "accountCurrency", cashTransactionDetailDTOList.get(0).getAccountCurrency());
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail(cashTransactionDetailDTOList.get(0).getTransactionId(), "iban", accountInfoResponse.getIban());
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail(cashTransactionDetailDTOList.get(0).getTransactionId(),
                "transactionDate", cashTransactionDTO.getCreateDate());
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail(cashTransactionDetailDTOList.get(0).getTransactionId(),
                "transactionTime", formatDate(cashTransactionDTO.getCreateDate()));
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail(cashTransactionDetailDTOList.get(0).getTransactionId(),
                "branchCode", cashTransactionDTO.getBranchCode());
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail(cashTransactionDetailDTOList.get(0).getTransactionId(),
                "MVTProductId", cashTransactionDetailDTOList.get(0).getAccountNo() + NotificationConstants.ACCOUNT_SPACE + cashTransactionDetailDTOList.get(0).getAccountCurrency());
        transactionDetailsList.add(transactionDetail);
    }

    private TransactionDetails createTransactionDetail(String transactionId, String parameterName,
                                                       Object parameterValue) {
        TransactionDetails transactionDetail = new TransactionDetails();
        transactionDetail.setTransactionId(transactionId);
        transactionDetail.setParameterName(parameterName);
        if(parameterValue != null) {
            transactionDetail.setParameterValue(parameterValue.toString());
        }
        else {
            transactionDetail.setParameterValue(null);
        }

        return transactionDetail;
    }

    private AmountCalculationResult calculateAmountTextAndIsKgvIncluded(List<CashTransactionDetailDTO> cashTransactionDetailDTOList) {
        String amountText = "";
        Boolean isKgvIncluded = Boolean.FALSE;
        BigDecimal totalAmount = calculateTotalAmount(cashTransactionDetailDTOList);
        CashTransactionDetailDTO firstDetailDTO = cashTransactionDetailDTOList.get(0);

        if (shouldCalculateAmountText(firstDetailDTO)) {
            BigDecimal commissionAmount = calculateCommissionAmount(cashTransactionDetailDTOList);

            if (isCurrencyEqualToAccountCurrency(firstDetailDTO)) {
                amountText = calculateAmountTextForEqualCurrency(totalAmount, commissionAmount, firstDetailDTO);
            }
            else if (hasKmvAmountGreaterThanZero(firstDetailDTO)) {
                isKgvIncluded = Boolean.TRUE;
                amountText = calculateAmountTextForKmvAmount(totalAmount, firstDetailDTO);
            }
            else {
                amountText = calculateDefaultAmountText(totalAmount);

                if (isCurrencyEqualToAccountCurrency(firstDetailDTO)) {
                    amountText += " " + firstDetailDTO.getAccountCurrency();
                }
                else if (hasKmvAmountGreaterThanZero(firstDetailDTO)) {
                    isKgvIncluded = Boolean.TRUE;
                    amountText = calculateAmountTextForKmvAmount(totalAmount, firstDetailDTO);
                }
            }
        }

        return new AmountCalculationResult(amountText, isKgvIncluded);
    }

    private boolean shouldCalculateAmountText(CashTransactionDetailDTO detailDTO) {
        return hasCommissionAmount(detailDTO) && isCommissionNotTakenFromTransactionAmount(detailDTO);
    }

    private BigDecimal calculateTotalAmount(List<CashTransactionDetailDTO> cashTransactionDetailDTOList) {
        BigDecimal totalAmount = BigDecimal.ZERO;
        for (CashTransactionDetailDTO detailDTO : cashTransactionDetailDTOList) {
            totalAmount = totalAmount.add(detailDTO.getAmount());
        }
        return totalAmount;
    }

    private BigDecimal calculateCommissionAmount(List<CashTransactionDetailDTO> cashTransactionDetailDTOList) {
        BigDecimal commissionAmount = BigDecimal.ZERO;
        for (CashTransactionDetailDTO detailDTO : cashTransactionDetailDTOList) {
            if (detailDTO.getCommissionAmount() != null) {
                commissionAmount = commissionAmount.add(detailDTO.getCommissionAmount());
            }
        }
        return commissionAmount;
    }

    private String calculateAmountTextForEqualCurrency(BigDecimal totalAmount, BigDecimal commissionAmount,
                                                       CashTransactionDetailDTO detailDTO) {
        String amountText = formatCurrency(totalAmount, "#,##") + " " + detailDTO.getCurrency();
        amountText += " " + formatCurrency(commissionAmount, "#,##") + detailDTO.getCurrency();
        return amountText;
    }

    private String calculateAmountTextForKmvAmount(BigDecimal totalAmount, CashTransactionDetailDTO detailDTO) {
        return totalAmount + " " + detailDTO.getCurrency() + NotificationConstants.NOTIFICATION_EQUIVALENT
                + detailDTO.getKmvAmount() + detailDTO.getCurrency();
    }

    private String calculateDefaultAmountText(BigDecimal totalAmount) {
        return formatCurrency(totalAmount, "#,##");
    }

    private boolean hasCommissionAmount(CashTransactionDetailDTO detailDTO) {
        return detailDTO.getCommissionAmount() != null && detailDTO.getCommissionAmount().compareTo(BigDecimal.ZERO) > 0;
    }

    private boolean isCommissionNotTakenFromTransactionAmount(CashTransactionDetailDTO detailDTO) {
        return !Boolean.TRUE
                .equals(detailDTO.getCashTransactionStoredRequest().getTakeCommissionFromTransactionAmount());
    }

    private boolean isCurrencyEqualToAccountCurrency(CashTransactionDetailDTO detailDTO) {
        return detailDTO.getCurrency().equals(detailDTO.getAccountCurrency());
    }

    private boolean hasKmvAmountGreaterThanZero(CashTransactionDetailDTO detailDTO) {
        return detailDTO.getKmvAmount() != null && detailDTO.getKmvAmount().compareTo(BigDecimal.ZERO) > 0;
    }

    private TransactionHeader getTransactionHeaders(CashTransactionDTO cashTransactionDTO, List<CashTransactionDetailDTO> cashTransactionDetailDTOList, AccountInfoResponse accountInfoResponse) {
        TransactionHeader transactionHeader = new TransactionHeader();
        transactionHeader.setClientNo(cashTransactionDetailDTOList.get(0).getCashTransactionStoredRequest()
                .getClientInfo().getClientNo());
        transactionHeader.setCreatedBy(cashTransactionDTO.getCreatedBy());
        transactionHeader.setCreateDate(cashTransactionDTO.getCreateDate());
        transactionHeader.setUpdateDate(cashTransactionDTO.getUpdateDate());
        transactionHeader.setUpdatedBy(cashTransactionDTO.getUpdatedBy());
        transactionHeader.setId(cashTransactionDTO.getId());
        if(cashTransactionDTO.getProcessCode().equals("DEPOSIT")) {
            if (Boolean.TRUE.equals(accountInfoResponse.getIsFlexibleAccount())) {
                transactionHeader.setJobCode(NotificationConstants.PARYAT_NOTIFICATION_SHORTNAME2);
            }
            transactionHeader.setJobCode(NotificationConstants.PARCEK_NOTIFICATION_SHORTNAME);
        }
        else {
            transactionHeader.setJobCode(NotificationConstants.PARCEK_NOTIFICATION_SHORTNAME);
        }
        return transactionHeader;
    }

    private String formatCurrency(BigDecimal number, String format) {
        Locale currentLocale = new Locale("en", "US");
        DecimalFormatSymbols unusualSymbols = new DecimalFormatSymbols(currentLocale);
        DecimalFormat formatter = new DecimalFormat(format, unusualSymbols);
        return formatter.format(number).replace(".", "#").replace(",", ".").replace("#", ",");
    }

    private String formatDate (Date date) {
        SimpleDateFormat formatter = new SimpleDateFormat("HH:mm");
        return formatter.format(date);
    }

    static class AmountCalculationResult {
        private String amountText;
        private Boolean isKgvIncluded;

        public AmountCalculationResult(String amountText, Boolean isKgvIncluded) {
            this.amountText = amountText;
            this.isKgvIncluded = isKgvIncluded;
        }

        public String getAmountText() {
            return amountText;
        }

        public Boolean getIsKgvIncluded() {
            return isKgvIncluded;
        }
    }
}
