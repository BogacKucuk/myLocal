package com.ykb.corebanking.safedepositbox.safedepositboxbe;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/*
// Şart değil ama eklemek isterseniz:
@ExtendWith(SpringExtension.class)
*/

// Eğer bean'leri yüklemek istemiyorsanız @SpringBootTest zorunlu değil.
// Tek coverage için genelde plain unit test yaklaşımı yeter.
@SpringBootTest
class SafedepositboxBeApplicationTest {

    // Basit SecurityManager türevimiz. System.exit(exitCode) geldiğinde
    // bir SecurityException fırlatır, testte yakalarız.
    static class NoExitSecurityManager extends SecurityManager {
        @Override
        public void checkPermission(java.security.Permission perm) {
            // Her şeye izin
        }
        @Override
        public void checkPermission(java.security.Permission perm, Object context) {
            // Her şeye izin
        }
        @Override
        public void checkExit(int status) {
            super.checkExit(status);
            throw new SecurityException("System.exit called, status=" + status);
        }
    }

    @Test
    void testMain_NoArgs() {
        // ARRANGE
        String[] args = new String[0];
        SecurityManager originalSm = System.getSecurityManager();

        try {
            System.setSecurityManager(new NoExitSecurityManager());
            // ACT
            SafedepositboxBeApplication.main(args);
            // ASSERT
            // main metodu argüman olmadığı için batch logic'e girmez,
            // System.exit() çağrılmaz, dolayısıyla SecurityException atılmaz
            // Dolayısıyla normal "web projesi" akışı.
        } catch (SecurityException se) {
            // Test fails if System.exit is called
            Assertions.fail("System.exit was called unexpectedly (no args). " + se.getMessage());
        } finally {
            System.setSecurityManager(originalSm);
        }
    }

    @Test
    void testMain_SpringArgumentOnly() {
        // Örneğin, user "arg0" = "--spring.config=..." gibi
        String[] args = {"--spring.profiles.active=local"};
        SecurityManager originalSm = System.getSecurityManager();

        try {
            System.setSecurityManager(new NoExitSecurityManager());
            SafedepositboxBeApplication.main(args);
            // Beklenti: arg[0] startsWith("--") => batch logic'e girmez => no System.exit
        } catch (SecurityException se) {
            Assertions.fail("System.exit was called unexpectedly (spring arg). " + se.getMessage());
        } finally {
            System.setSecurityManager(originalSm);
        }
    }

    @Test
    void testMain_BatchArgument() {
        // Arg[0] = "dummyParameterInsertJob" => batch logic devreye girebilir
        String[] args = {"dummyParameterInsertJob"};
        SecurityManager originalSm = System.getSecurityManager();
        boolean exited = false;

        try {
            System.setSecurityManager(new NoExitSecurityManager());
            SafedepositboxBeApplication.main(args);

            // Eğer batch logic stepinde System.exit(0 or 1) çağrılırsa
            // test SecurityException fırlatır => catch'e düşer
            // Yakalanmazsa => fail, demek ki batch bitmeden normal akış oldu
            // ya da batch bitince system.exit
            Assertions.fail("We expected System.exit to be called for batch mode, but it wasn't.");
        } catch (SecurityException se) {
            exited = true;
            // Burada normaldir, batch logic bitti => system.exit
            // Kontrol edilebilir: status code vb.
        } finally {
            System.setSecurityManager(originalSm);
        }

        Assertions.assertTrue(exited, "System.exit was called (expected in batch mode).");
    }
}
