package com.ykb.corebanking.safedepositbox.safedepositboxbe.batch.config;

import org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.batch.core.launch.support.SimpleJobLauncher;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.transaction.PlatformTransactionManager;

/**
 * Bu konfigürasyon, Spring Batch'in JobLauncher'ını
 * "jobLauncher" yerine "springBatchJobLauncher" ismiyle
 * bean olarak kaydeder. Böylece user-defined "jobLauncher"
 * ile çakışma olmadan batch işlemleri yapılabilir.
 */
@Configuration
@EnableBatchProcessing
public class CustomBatchConfig extends DefaultBatchConfigurer {

    private final PlatformTransactionManager transactionManager;

    public CustomBatchConfig(PlatformTransactionManager transactionManager) {
        this.transactionManager = transactionManager;
    }

    /**
     * DefaultBatchConfigurer, "createJobLauncher()" metoduyla
     * varsayılan bir launcher döndürüyor.
     * Biz bu bean'i "springBatchJobLauncher" adıyla kayıt ediyoruz.
     */
    @Bean(name = "springBatchJobLauncher")
    @Override
    public JobLauncher getJobLauncher() {
        // DefaultBatchConfigurer'daki getJobLauncher() 
        // eğer henüz oluşturulmadıysa createJobLauncher() çağırır.
        return super.getJobLauncher();
    }

    /**
     * İsteğe bağlı: createJobLauncher'ı override ederek
     * concurrency ayarları vs. ekleyebilirsiniz.
     */
    @Override
    protected JobLauncher createJobLauncher() throws Exception {
        JobRepository jobRepository = getJobRepository();
        SimpleJobLauncher launcher = new SimpleJobLauncher();
        launcher.setJobRepository(jobRepository);
        launcher.afterPropertiesSet();
        return launcher;
    }

    /**
     * Eğer transactionManager'ı da set etmek isterseniz
     * protected method setTransactionManager(transactionManager) vb. 
     * override edebilirsiniz. 
     * Varsayılanda "null" olabilir, ancak chunk transaction'lar 
     * jobRepository üzerinden de yönetilebilir.
     */
    @Override
    protected PlatformTransactionManager getTransactionManager() {
        return this.transactionManager;
    }
}



package com.ykb.corebanking.safedepositbox.safedepositboxbe;

import com.ykb.corebanking.safedepositbox.safedepositboxbe.batch.common.CustomJobParameters;
import lombok.extern.slf4j.Slf4j;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.batch.core.JobParametersBuilder;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.actuate.autoconfigure.security.servlet.ManagementWebSecurityAutoConfiguration;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.cloud.openfeign.EnableFeignClients;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.annotation.ComponentScan;

@Slf4j
@SpringBootApplication
@ComponentScan(basePackages = {"com.ykb.corebanking.safedepositbox.safedepositboxbe"})
@EnableCaching
@EnableFeignClients
@EnableDiscoveryClient
@EnableAutoConfiguration(exclude = {SecurityAutoConfiguration.class, ManagementWebSecurityAutoConfiguration.class})
public class SafedepositboxBeApplication {

    public static void main(String[] args) {
        String name = System.getenv("SPRING_APPLICATION_NAME");
        if (name != null) {
            System.setProperty("spring.application.name", name);
        }

        ConfigurableApplicationContext ctx = SpringApplication.run(SafedepositboxBeApplication.class, args);

        // Batch argüman kontrolü
        if (args != null && args.length > 0) {
            String jobName = args[0]; // "dummyParameterInsertJob" vb.
            int exitCode = 0;
            try {
                // parse extra args
                CustomJobParameters<String, Object> customParams = ctx.getBean(CustomJobParameters.class);
                for (int i = 1; i < args.length; i++) {
                    String[] kv = args[i].split("=");
                    if (kv.length == 2) {
                        customParams.addParameter(kv[0], kv[1]);
                    }
                }

                // FARK: Bean name "springBatchJobLauncher"
                JobLauncher batchLauncher = 
                        ctx.getBean("springBatchJobLauncher", JobLauncher.class);

                Job job = ctx.getBean(jobName, Job.class);

                JobExecution execution = batchLauncher.run(
                        job,
                        new JobParametersBuilder()
                                .addLong("startTime", System.currentTimeMillis())
                                .toJobParameters()
                );

                if (!ExitStatus.COMPLETED.equals(execution.getExitStatus())) {
                    exitCode = 1;
                }
            } catch (Exception e) {
                log.error("Batch run failed with exception", e);
                exitCode = 1;
            } finally {
                ctx.close();
                System.exit(exitCode);
            }
        }
        // Argüman yoksa normal web akışı
    }
}
