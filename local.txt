import React, { JSX, useEffect, useMemo, useRef } from 'react';
import {
  EfaCollapseDocumentScannerMultiCustomer
} from '@efa-web-components-multi-cust-doc/efa-collapse-document-scanner-multi-customer';
import { useAppSelector } from '../../store';
import { TransactionMaker } from '../../store/slices/transactionSlice';
import {
  DocumentInfo,
  makeDocumentInfoFromCode,
  parseDebitSets,
  toStr
} from '../../utils/DocumentScanner/documentScannerUtils';

// ---------- Types ----------
type Person = {
  customerNum: string;
  mernisNum: string;
  taxNum: number;
  docPersonType: string;
  transferableDocClass: string;
};

type DocumentScanInfo = {
  processCode: string;
  processId: string;
  processLevelNum: string;
  processText: string;
  useMaxDisplay: string;
  maxDisplayPerSet: string;
};

type CustomerData = {
  customerNum: string;
  fullName: string;
  documentScannerData: {
    personListJson: Person[];         // inner array (tek Person objesi)
    documentListJson: DocumentInfo[]; // inner array (çoklu set olabilir)
    documentScanInfoJson: DocumentScanInfo;
  };
};

// ---------- Helpers ----------
const cleanedOrUndef = (val: string | undefined): string | undefined => {
  const t = (val ?? '').trim();
  return t === '' ? undefined : t;
};

// "0", "00000000000", "", whitespace → boş say
const isBlankOrZero = (val?: string) => {
  const s = String(val ?? '').trim();
  return s === '' || /^0+$/.test(s);
};

// mernis boş/0 ise tckn'yi kullan
const preferTckn = (mernis: string | undefined, tckn: string) =>
  isBlankOrZero(mernis) ? tckn : String(mernis);

// "Ad" "Soyad" birleştir (boşları ele)
const joinName = (a?: string, b?: string): string | undefined => {
  const first = cleanedOrUndef(a);
  const last = cleanedOrUndef(b);
  const joined = [first ?? '', last ?? ''].filter(Boolean).join(' ').trim();
  return joined === '' ? undefined : joined;
};

const DocumentScannerComponent = (): JSX.Element => {
  // ---------- Slices ----------
  const { transactionMaker, documentSetDebit, extraDocSetsByCustomer, opCode } =
    useAppSelector((s) => s.transactionInfo);

  // Hesap sahibi (primary) müşteri bilgileri
  const primaryCustomerNumberRaw = useAppSelector(
    (state) => state.customerInfoReducer.customerNumber as string | number | undefined
  );
  const primaryCustomerNumber = useMemo(
    () => String(primaryCustomerNumberRaw ?? ''),
    [primaryCustomerNumberRaw]
  );

  // Eğer slice bir an için boş/undefined gelirse, son bilinen primary'yi koru
  const stablePrimaryRef = useRef<string>('');
  useEffect(() => {
    if ((primaryCustomerNumber ?? '') !== '') {
      stablePrimaryRef.current = primaryCustomerNumber;
    }
  }, [primaryCustomerNumber]);
  const stablePrimary = stablePrimaryRef.current;

  const primaryCustomerTcknRaw = useAppSelector(
    (state) => state.customerInfoReducer.tckn as string | number | undefined
  );
  const primaryCustomerTckn = useMemo(
    () => String(primaryCustomerTcknRaw ?? ''),
    [primaryCustomerTcknRaw]
  );

  const primaryCustomerFullNameRaw = useAppSelector(
    (state) => state.customerInfoReducer.customerFullName as string | undefined
  );
  const primaryCustomerFullName = useMemo(
    () => cleanedOrUndef(primaryCustomerFullNameRaw),
    [primaryCustomerFullNameRaw]
  );

  // ---------- Makers: normalize + primary'yi (listede yoksa) ekle + duplicate temizle ----------
  const makers = useMemo(() => {
    // normalize & mernis'ı mümkünse burada da tckn ile düzelt
    const normalized = transactionMaker.map((tm: TransactionMaker) => ({
      ...tm,
      customerNumber: toStr(tm.customerNumber),
      mernisNum: preferTckn(toStr(tm.mernisNum), primaryCustomerTckn),
    }));

    const exists =
      (stablePrimary ?? '') !== '' &&
      normalized.some((m) => m.customerNumber === stablePrimary);

    if (!exists && (stablePrimary ?? '') !== '') {
      normalized.unshift({
        name: '',
        surname: '',
        address: '',
        customerNumber: stablePrimary,
        mernisNum: primaryCustomerTckn,
      } as TransactionMaker);
    }

    const seen = new Set<string>();
    return normalized.filter((m) => {
      if (seen.has(m.customerNumber)) return false;
      seen.add(m.customerNumber);
      return true;
    });
  }, [transactionMaker, stablePrimary, primaryCustomerTckn]);

  // ---------- Base sets: parse + opCode özel tekilleştirme ----------
  const baseSets = useMemo(() => {
    const parsed = parseDebitSets(documentSetDebit);
    if (opCode === 'PR-HES-KAS-FIS-T') {
      const uniq = <T extends string>(arr: T[]) => Array.from(new Set(arr));
      return { I: uniq(parsed.I), B: uniq(parsed.B) };
    }
    return parsed;
  }, [documentSetDebit, opCode]);

  // ---------- Document scan info (sabit) ----------
  const documentScanInfoJson = useMemo<DocumentScanInfo>(
    () => ({
      processCode: 'GENELADRES',
      processId: 'MN000000045003398',
      processLevelNum: '0',
      processText: '',
      useMaxDisplay: 'false',
      maxDisplayPerSet: '0',
    }),
    []
  );

  // ---------- Person map: customerNumber -> [Person] (index'e bağımlılığı kaldırır) ----------
  const personMap = useMemo<Record<string, Person[]>>(() => {
    const map: Record<string, Person[]> = {};
    makers.forEach((tm) => {
      const mernis = preferTckn(tm.mernisNum, primaryCustomerTckn);
      map[tm.customerNumber] = [
        {
          customerNum: tm.customerNumber,
          mernisNum: mernis,
          taxNum: 0,
          docPersonType: '01',
          transferableDocClass: '',
        },
      ];
    });
    return map;
  }, [makers, primaryCustomerTckn]);

  // ---------- Final data ----------
  const compData = useMemo<CustomerData[]>(() => {
    return makers.map((tm, i) => {
      const isPrimary =
        (stablePrimary ?? '') !== '' && tm.customerNumber === stablePrimary;

      // Herkese "I" set(ler)i
      let codes = [...baseSets.I];

      // Primary'ye ayrıca "B" set(ler)i (varsa)
      if (isPrimary && baseSets.B.length > 0) {
        codes = [...codes, ...baseSets.B];
      }

      // Buton/aksiyonla eklenen setler
      const extraCodes = extraDocSetsByCustomer[tm.customerNumber] ?? [];
      const allCodes = [...codes, ...extraCodes];

      // DocumentInfo dizisine çevir
      const documentListJson: DocumentInfo[] = allCodes.map((c) =>
        makeDocumentInfoFromCode(c)
      );

      // Person list: index yerine customerNumber'a göre al
      const personArr = personMap[tm.customerNumber] ?? [];

      // Ad/Soyad: primary ise customerInfo.fullName > maker adı > "User X"
      const makerName = joinName(tm.name, tm.surname);
      const defaultName = `User ${i + 1}`;
      const fullName = isPrimary
        ? (primaryCustomerFullName ?? makerName ?? defaultName)
        : (makerName ?? defaultName);

      return {
        customerNum: tm.customerNumber,
        fullName,
        documentScannerData: {
          personListJson: personArr,
          documentListJson,
          documentScanInfoJson,
        },
      };
    });
  }, [
    makers,
    stablePrimary,
    primaryCustomerFullName,
    baseSets,
    extraDocSetsByCustomer,
    personMap,
    documentScanInfoJson,
  ]);

  return <EfaCollapseDocumentScannerMultiCustomer data={compData} />;
};

export default DocumentScannerComponent;
