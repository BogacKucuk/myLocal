package com.garantibbva.depositwithdrawalmngmt.moneywithdrawbusiness.grpc.impl;

import com.garantibbva.depositwithdrawalmngmt.moneywithdrawbusiness.proto.TransactionProto.FindTransactionByCustomerNumberGrpcRequest;
import com.garantibbva.depositwithdrawalmngmt.moneywithdrawbusiness.proto.TransactionProto.FindTransactionByCustomerNumberGrpcResponse;
import com.garantibbva.depositwithdrawalmngmt.moneywithdrawbusiness.proto.TransactionProto.Transaction;
import com.garantibbva.depositwithdrawalmngmt.moneywithdrawbusiness.service.contract.TransactionService;
import com.garantibbva.depositwithdrawalmngmt.moneywithdrawbusiness.service.contract.model.TransactionDto;
import com.garantibbva.depositwithdrawalmngmt.moneywithdrawbusiness.service.contract.model.response.TransactionListDto;
import com.garantibbvaportfoy.utility.bigdecimal.proto.BigDecimalProto.BigDecimal;
import io.grpc.Status;
import io.grpc.StatusRuntimeException;
import io.grpc.stub.StreamObserver;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class TransactionGrpcServiceImplTest {

    @Mock
    private TransactionService transactionService;
    
    @Mock
    private StreamObserver<FindTransactionByCustomerNumberGrpcResponse> responseObserver;

    private TransactionGrpcServiceImpl transactionGrpcService;

    @BeforeEach
    void setUp() {
        transactionGrpcService = new TransactionGrpcServiceImpl(transactionService);
    }

    @Test
    void testFindTransactionByCustomerNumber_Success() throws Exception {
        // Given
        Integer customerNumber = 123456;
        FindTransactionByCustomerNumberGrpcRequest request = 
                FindTransactionByCustomerNumberGrpcRequest.newBuilder()
                        .setCustomerNumber(customerNumber)
                        .build();

        TransactionDto transactionDto = TransactionDto.builder()
                .operationType("DEPOSIT")
                .customerNumber(customerNumber)
                .customerAccount("ACC123456")
                .transactionAmount(new java.math.BigDecimal("1000.00"))
                .currency("TRY")
                .opCode("OP001")
                .storedRequest("REQUEST_001")
                .channel("MOBILE")
                .build();

        TransactionListDto transactionListDto = new TransactionListDto();
        transactionListDto.setTransactions(List.of(transactionDto));

        when(transactionService.findTransactionByCustomerNumber(customerNumber))
                .thenReturn(transactionListDto);

        // When
        transactionGrpcService.findTransactionByCustomerNumber(request, responseObserver);

        // Then
        ArgumentCaptor<FindTransactionByCustomerNumberGrpcResponse> responseCaptor = 
                ArgumentCaptor.forClass(FindTransactionByCustomerNumberGrpcResponse.class);
        
        verify(transactionService).findTransactionByCustomerNumber(customerNumber);
        verify(responseObserver).onNext(responseCaptor.capture());
        verify(responseObserver).onCompleted();
        verify(responseObserver, never()).onError(any());

        FindTransactionByCustomerNumberGrpcResponse response = responseCaptor.getValue();
        assertNotNull(response);
        assertEquals(1, response.getTransactionsCount());
        
        Transaction grpcTransaction = response.getTransactions(0);
        assertEquals("DEPOSIT", grpcTransaction.getOperationType());
        assertEquals(customerNumber, grpcTransaction.getCustomerNumber());
        assertEquals("ACC123456", grpcTransaction.getCustomerAccount());
        assertEquals("TRY", grpcTransaction.getCurrency());
        assertEquals("OP001", grpcTransaction.getOpCode());
        assertEquals("REQUEST_001", grpcTransaction.getStoredRequest());
        assertEquals("MOBILE", grpcTransaction.getChannel());
    }

    @Test
    void testFindTransactionByCustomerNumber_EmptyResult() throws Exception {
        // Given
        Integer customerNumber = 999999;
        FindTransactionByCustomerNumberGrpcRequest request = 
                FindTransactionByCustomerNumberGrpcRequest.newBuilder()
                        .setCustomerNumber(customerNumber)
                        .build();

        TransactionListDto emptyListDto = new TransactionListDto();
        emptyListDto.setTransactions(Collections.emptyList());

        when(transactionService.findTransactionByCustomerNumber(customerNumber))
                .thenReturn(emptyListDto);

        // When
        transactionGrpcService.findTransactionByCustomerNumber(request, responseObserver);

        // Then
        ArgumentCaptor<FindTransactionByCustomerNumberGrpcResponse> responseCaptor = 
                ArgumentCaptor.forClass(FindTransactionByCustomerNumberGrpcResponse.class);
        
        verify(responseObserver).onNext(responseCaptor.capture());
        verify(responseObserver).onCompleted();
        
        FindTransactionByCustomerNumberGrpcResponse response = responseCaptor.getValue();
        assertEquals(0, response.getTransactionsCount());
    }

    @Test
    void testFindTransactionByCustomerNumber_SQLException() throws Exception {
        // Given
        Integer customerNumber = 666666;
        FindTransactionByCustomerNumberGrpcRequest request = 
                FindTransactionByCustomerNumberGrpcRequest.newBuilder()
                        .setCustomerNumber(customerNumber)
                        .build();

        SQLException sqlException = new SQLException("Database connection error");
        
        when(transactionService.findTransactionByCustomerNumber(customerNumber))
                .thenThrow(sqlException);

        // When
        transactionGrpcService.findTransactionByCustomerNumber(request, responseObserver);

        // Then
        ArgumentCaptor<StatusRuntimeException> errorCaptor = 
                ArgumentCaptor.forClass(StatusRuntimeException.class);
        
        verify(responseObserver).onError(errorCaptor.capture());
        verify(responseObserver, never()).onNext(any());
        verify(responseObserver, never()).onCompleted();

        StatusRuntimeException capturedError = errorCaptor.getValue();
        assertEquals(Status.INTERNAL.getCode(), capturedError.getStatus().getCode());
        assertEquals("Database connection error", capturedError.getStatus().getDescription());
    }

    @Test
    void testFindTransactionByCustomerNumber_RuntimeException() throws Exception {
        // Given
        Integer customerNumber = 555555;
        FindTransactionByCustomerNumberGrpcRequest request = 
                FindTransactionByCustomerNumberGrpcRequest.newBuilder()
                        .setCustomerNumber(customerNumber)
                        .build();

        RuntimeException runtimeException = new RuntimeException("Unexpected error");
        
        when(transactionService.findTransactionByCustomerNumber(customerNumber))
                .thenThrow(runtimeException);

        // When
        transactionGrpcService.findTransactionByCustomerNumber(request, responseObserver);

        // Then
        ArgumentCaptor<StatusRuntimeException> errorCaptor = 
                ArgumentCaptor.forClass(StatusRuntimeException.class);
        
        verify(responseObserver).onError(errorCaptor.capture());
        
        StatusRuntimeException capturedError = errorCaptor.getValue();
        assertEquals(Status.INTERNAL.getCode(), capturedError.getStatus().getCode());
        assertEquals("Unexpected error", capturedError.getStatus().getDescription());
    }

    @Test
    void testFindTransactionByCustomerNumber_NullPointerException() throws Exception {
        // Given
        Integer customerNumber = 444444;
        FindTransactionByCustomerNumberGrpcRequest request = 
                FindTransactionByCustomerNumberGrpcRequest.newBuilder()
                        .setCustomerNumber(customerNumber)
                        .build();

        when(transactionService.findTransactionByCustomerNumber(customerNumber))
                .thenThrow(new NullPointerException("Null value encountered"));

        // When
        transactionGrpcService.findTransactionByCustomerNumber(request, responseObserver);

        // Then
        ArgumentCaptor<StatusRuntimeException> errorCaptor = 
                ArgumentCaptor.forClass(StatusRuntimeException.class);
        
        verify(responseObserver).onError(errorCaptor.capture());
        
        StatusRuntimeException capturedError = errorCaptor.getValue();
        assertEquals(Status.INTERNAL.getCode(), capturedError.getStatus().getCode());
        assertEquals("Null value encountered", capturedError.getStatus().getDescription());
    }

    @Test
    void testFindTransactionByCustomerNumber_MultipleTransactions() throws Exception {
        // Given
        Integer customerNumber = 777777;
        FindTransactionByCustomerNumberGrpcRequest request = 
                FindTransactionByCustomerNumberGrpcRequest.newBuilder()
                        .setCustomerNumber(customerNumber)
                        .build();

        List<TransactionDto> multipleDtos = new ArrayList<>();
        TransactionDto dto1 = TransactionDto.builder()
                .operationType("DEPOSIT")
                .customerNumber(customerNumber)
                .customerAccount("ACC1")
                .transactionAmount(new java.math.BigDecimal("1000.00"))
                .currency("TRY")
                .opCode("OP001")
                .storedRequest("REQ001")
                .channel("MOBILE")
                .build();
        TransactionDto dto2 = TransactionDto.builder()
                .operationType("WITHDRAWAL")
                .customerNumber(customerNumber)
                .customerAccount("ACC2")
                .transactionAmount(new java.math.BigDecimal("500.00"))
                .currency("USD")
                .opCode("OP002")
                .storedRequest("REQ002")
                .channel("WEB")
                .build();
        multipleDtos.add(dto1);
        multipleDtos.add(dto2);

        TransactionListDto multipleListDto = new TransactionListDto();
        multipleListDto.setTransactions(multipleDtos);

        when(transactionService.findTransactionByCustomerNumber(customerNumber))
                .thenReturn(multipleListDto);

        // When
        transactionGrpcService.findTransactionByCustomerNumber(request, responseObserver);

        // Then
        ArgumentCaptor<FindTransactionByCustomerNumberGrpcResponse> responseCaptor = 
                ArgumentCaptor.forClass(FindTransactionByCustomerNumberGrpcResponse.class);
        
        verify(responseObserver).onNext(responseCaptor.capture());
        verify(responseObserver).onCompleted();
        
        FindTransactionByCustomerNumberGrpcResponse response = responseCaptor.getValue();
        assertEquals(2, response.getTransactionsCount());
        
        Transaction firstTransaction = response.getTransactions(0);
        assertEquals("DEPOSIT", firstTransaction.getOperationType());
        assertEquals("ACC1", firstTransaction.getCustomerAccount());
        
        Transaction secondTransaction = response.getTransactions(1);
        assertEquals("WITHDRAWAL", secondTransaction.getOperationType());
        assertEquals("ACC2", secondTransaction.getCustomerAccount());
    }

    @Test
    void testConstructor() {
        // Given
        TransactionService mockService = mock(TransactionService.class);

        // When
        TransactionGrpcServiceImpl service = new TransactionGrpcServiceImpl(mockService);

        // Then
        assertNotNull(service);
    }

    @Test
    void testFindTransactionByCustomerNumber_ZeroCustomerNumber() throws Exception {
        // Given
        FindTransactionByCustomerNumberGrpcRequest request = 
                FindTransactionByCustomerNumberGrpcRequest.newBuilder()
                        .setCustomerNumber(0)
                        .build();

        TransactionListDto emptyListDto = new TransactionListDto();
        emptyListDto.setTransactions(Collections.emptyList());

        when(transactionService.findTransactionByCustomerNumber(0))
                .thenReturn(emptyListDto);

        // When
        transactionGrpcService.findTransactionByCustomerNumber(request, responseObserver);

        // Then
        verify(transactionService).findTransactionByCustomerNumber(0);
        verify(responseObserver).onNext(any());
        verify(responseObserver).onCompleted();
    }

    @Test
    void testFindTransactionByCustomerNumber_NegativeCustomerNumber() throws Exception {
        // Given
        FindTransactionByCustomerNumberGrpcRequest request = 
                FindTransactionByCustomerNumberGrpcRequest.newBuilder()
                        .setCustomerNumber(-12345)
                        .build();

        TransactionListDto emptyListDto = new TransactionListDto();
        emptyListDto.setTransactions(Collections.emptyList());

        when(transactionService.findTransactionByCustomerNumber(-12345))
                .thenReturn(emptyListDto);

        // When
        transactionGrpcService.findTransactionByCustomerNumber(request, responseObserver);

        // Then
        verify(transactionService).findTransactionByCustomerNumber(-12345);
        verify(responseObserver).onNext(any());
        verify(responseObserver).onCompleted();
    }

    @Test
    void testFindTransactionByCustomerNumber_NullTransactionInList() throws Exception {
        // Given
        Integer customerNumber = 333333;
        FindTransactionByCustomerNumberGrpcRequest request = 
                FindTransactionByCustomerNumberGrpcRequest.newBuilder()
                        .setCustomerNumber(customerNumber)
                        .build();

        List<TransactionDto> dtoList = new ArrayList<>();
        dtoList.add(null); // Null transaction in list
        
        TransactionListDto listDto = new TransactionListDto();
        listDto.setTransactions(dtoList);

        when(transactionService.findTransactionByCustomerNumber(customerNumber))
                .thenReturn(listDto);

        // When
        transactionGrpcService.findTransactionByCustomerNumber(request, responseObserver);

        // Then
        ArgumentCaptor<FindTransactionByCustomerNumberGrpcResponse> responseCaptor = 
                ArgumentCaptor.forClass(FindTransactionByCustomerNumberGrpcResponse.class);
        
        verify(responseObserver).onNext(responseCaptor.capture());
        verify(responseObserver).onCompleted();
        verify(responseObserver, never()).onError(any());
        
        // MapStruct genellikle null değerleri skip eder veya boş response döner
        FindTransactionByCustomerNumberGrpcResponse response = responseCaptor.getValue();
        assertNotNull(response);
        // Null transaction skip edilmiş olabilir veya boş transaction olarak eklenmiş olabilir
        assertTrue(response.getTransactionsCount() == 0 || response.getTransactionsCount() == 1);
    }

    @Test
    void testFindTransactionByCustomerNumber_ServiceReturnsNull() throws Exception {
        // Given
        Integer customerNumber = 888888;
        FindTransactionByCustomerNumberGrpcRequest request = 
                FindTransactionByCustomerNumberGrpcRequest.newBuilder()
                        .setCustomerNumber(customerNumber)
                        .build();

        when(transactionService.findTransactionByCustomerNumber(customerNumber))
                .thenReturn(null); // Service null dönüyor

        // When
        transactionGrpcService.findTransactionByCustomerNumber(request, responseObserver);

        // Then
        ArgumentCaptor<StatusRuntimeException> errorCaptor = 
                ArgumentCaptor.forClass(StatusRuntimeException.class);
        
        verify(responseObserver).onError(errorCaptor.capture());
        verify(responseObserver, never()).onNext(any());
        verify(responseObserver, never()).onCompleted();
        
        StatusRuntimeException capturedError = errorCaptor.getValue();
        assertEquals(Status.INTERNAL.getCode(), capturedError.getStatus().getCode());
    }

    @Test
    void testFindTransactionByCustomerNumber_TransactionWithNullFields() throws Exception {
        // Given
        Integer customerNumber = 222222;
        FindTransactionByCustomerNumberGrpcRequest request = 
                FindTransactionByCustomerNumberGrpcRequest.newBuilder()
                        .setCustomerNumber(customerNumber)
                        .build();

        TransactionDto dtoWithNulls = TransactionDto.builder()
                .operationType(null)
                .customerNumber(customerNumber)
                .customerAccount(null)
                .transactionAmount(null)
                .currency(null)
                .opCode(null)
                .storedRequest(null)
                .channel(null)
                .build();

        TransactionListDto listDto = new TransactionListDto();
        listDto.setTransactions(List.of(dtoWithNulls));

        when(transactionService.findTransactionByCustomerNumber(customerNumber))
                .thenReturn(listDto);

        // When
        transactionGrpcService.findTransactionByCustomerNumber(request, responseObserver);

        // Then
        ArgumentCaptor<FindTransactionByCustomerNumberGrpcResponse> responseCaptor = 
                ArgumentCaptor.forClass(FindTransactionByCustomerNumberGrpcResponse.class);
        
        verify(responseObserver).onNext(responseCaptor.capture());
        verify(responseObserver).onCompleted();
        
        FindTransactionByCustomerNumberGrpcResponse response = responseCaptor.getValue();
        assertEquals(1, response.getTransactionsCount());
        
        Transaction grpcTransaction = response.getTransactions(0);
        assertEquals(customerNumber, grpcTransaction.getCustomerNumber());
        // Proto3'te default değerler: string -> "", BigDecimal -> default instance
        assertEquals("", grpcTransaction.getOperationType());
        assertEquals("", grpcTransaction.getCustomerAccount());
    }

    @Test
    void testFindTransactionByCustomerNumber_LargeDataSet() throws Exception {
        // Given
        Integer customerNumber = 111111;
        FindTransactionByCustomerNumberGrpcRequest request = 
                FindTransactionByCustomerNumberGrpcRequest.newBuilder()
                        .setCustomerNumber(customerNumber)
                        .build();

        List<TransactionDto> largeDtoList = new ArrayList<>();
        for (int i = 0; i < 100; i++) {
            TransactionDto dto = TransactionDto.builder()
                    .operationType("TYPE_" + i)
                    .customerNumber(customerNumber)
                    .customerAccount("ACC_" + i)
                    .transactionAmount(new java.math.BigDecimal(i * 100))
                    .currency("TRY")
                    .opCode("OP_" + i)
                    .storedRequest("REQ_" + i)
                    .channel("CHANNEL_" + i)
                    .build();
            largeDtoList.add(dto);
        }

        TransactionListDto largeListDto = new TransactionListDto();
        largeListDto.setTransactions(largeDtoList);

        when(transactionService.findTransactionByCustomerNumber(customerNumber))
                .thenReturn(largeListDto);

        // When
        transactionGrpcService.findTransactionByCustomerNumber(request, responseObserver);

        // Then
        ArgumentCaptor<FindTransactionByCustomerNumberGrpcResponse> responseCaptor = 
                ArgumentCaptor.forClass(FindTransactionByCustomerNumberGrpcResponse.class);
        
        verify(responseObserver).onNext(responseCaptor.capture());
        verify(responseObserver).onCompleted();
        
        FindTransactionByCustomerNumberGrpcResponse response = responseCaptor.getValue();
        assertEquals(100, response.getTransactionsCount());
        
        // Verify first and last transactions
        assertEquals("TYPE_0", response.getTransactions(0).getOperationType());
        assertEquals("TYPE_99", response.getTransactions(99).getOperationType());
    }
}
