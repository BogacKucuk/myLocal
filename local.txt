bir table componentim var. "Uygun" isimli sütunda bazı kayıtlarda checkbox'ı backendten gelen dataya göre checkboxları dinamik olarak oluşturuyorum. 

getDocuments fonksiyonu backende istek atıp data alıyor. gelen datada bizim senaryomuz için bbtDocuments içindeki datalar önemli. 1702 - Tüm Kimlikler, Ad Soyad, İmza, Tarih dataları için tabloda kayıt oluşturulacak. karşılarında checkboxlar olacak

// backendten gelen data (bir örnek. dinamik olarak değişebilir)
{
    "bbtDocuments": [
        {
            "parameterName": "1702 - Tüm Kimlikler",
            "description": null,
            "key": "1702 - Tüm Kimlikler",
            "isExist": false,
            "documentRemoteId": 18119734,
            "children": [
                {
                    "parameterName": "Ad Soyad",
                    "description": "Belge üzerindeki ad soyadı bilgisini kontrol ediniz.",
                    "key": "Ad Soyad",
                    "isExist": false,
                    "documentRemoteId": null,
                    "children": null
                },
                {
                    "parameterName": "İmza",
                    "description": "İmza kontrolü yapınız.",
                    "key": "İmza",
                    "isExist": false,
                    "documentRemoteId": null,
                    "children": null
                },
                {
                    "parameterName": "Tarih",
                    "description": "Belge üzerindeki tarih bilgisini kontrol ediniz.",
                    "key": "Tarih",
                    "isExist": false,
                    "documentRemoteId": null,
                    "children": null
                }
            ]
        }
    ],
    "notExistsDocs": [
        {
            "parameterName": "Ankes",
            "description": "Şube ankesini kontrol ediniz ve gişe personeline bilgi veriniz.",
            "key": "app.micro.moneydeposit_smartcontrol_ankes",
            "isExist": false,
            "documentRemoteId": null,
            "children": null
        },
        {
            "parameterName": "İşlem Yaptıran Kişi Kontrolü",
            "description": "Kendisi, Talimatlı, Vekaletnameli (vekaletname içeriği) seçimini ve kimliği kontrol ediniz.",
            "key": "app.micro.moneydeposit_smartcontrol_transactionMaker",
            "isExist": false,
            "documentRemoteId": null,
            "children": null
        },
        {
            "parameterName": "Müşteri Varlık Kontrolü",
            "description": " Şubede veya şube içi kameradan müşterinin şubede olduğunu kontrol ediniz.",
            "key": "app.micro.moneydeposit_smartcontrol_customerPresenceControl",
            "isExist": false,
            "documentRemoteId": null,
            "children": null
        }
    ]
}


backendten data geldikten sonra generateTableData fonksiyonu ile tabloya dataları dolduruyor (başlıkları). eğer callApi metodu ile backend'e atılan istek başarılı işe tablodakş başlıkların altındaki datalar dolduruluyor(bbtDocuments ve notExistsDocs'un children kısmı. bizim senaryomuzda bbtDocuments kısmı önemli). datalar doldurulduktan sonra balşıkların altına kayıtar geliyor(1702 - Tüm Kimlikler, Ad Soyad, İmza, Tarih). Ad Soyad, İmza, Tarih alanları, 1702 - Tüm Kimlikler alanı altında geliyor çünkü onlar 1702 - Tüm Kimlikler kaydının children alanında. ama hepsinin bir checkbox'ı var. kayıtlar oluştururken generateCheckButtons metodunda checkboxlar dinamik olarak oluşturuyor ve propsları veriliyor.

return (
<Checkbox
  id={record.key}
  checked={setCheckState(record.key)}
  onChange={toggleChecked}
></Checkbox>
);

bu kısım bizim ilgilendiğimiz checkboxları oluşturuyor. onChange kısmındaki toggleChecked kısmı bu checkboxlar için oluşturulan state'te id'ye göre bir arama yapıp ilgili checkboxın checked alanını değiştiriyor. generateCheckboxStates fonksiyonu backendten data geldikten sonra checkboxlar için state'i oluşturuyor.

[{id: "Ad Soyad", checked: false}, {id: "İmza", checked: false}] örneğin bu şekilde bir state oluşuyor. bir checkboxa tıklandığında id'sini kullanıp state'teki id ile karşılaştırıp ilgili state'i güncelliyorum fakat checkbox ön yüzde değişmiyor. tahminimce checkbox'ı yaratırkten setCheckState(record.key) fonksiyonu gerçek state'in referansını fönmüyor sadece true veya false dönüyor olabilir. bu yüzden  state'teki değer ne kadar değişirse değişsin checkbox'ın checked propu hep sabir kalıyor o yüzden değişmiyor. tabi bu benim varsayımım eğer hata başka bir şeyden kaynaklanıyorsa çözüm önerini söyle. şimdi sana kodları veriyorum. bu sorunu çözelim.


import React, { useEffect, useState } from "react";
import { Table, Checkbox, Typography, Icon, Button } from "ykb-ui";
import { useShellCommunicator } from "ykb-shell";
import { useSelector, useDispatch } from "react-redux";
import { moneyDepositActions } from "../../store/moneyDeposit-store";
import { ApprovalType } from "../../constants/CommonConstants";
import { getCashApprovalType } from "../../utils/common/MoneyDepositUtils";
import { getDocumentsApi } from "../../API/MoneyDepositAPI";

const { Text } = Typography;

const MoneyDepositSmartControlTable = (props) => {
  const groupId = useSelector((state) => state.groupId);
  const dispatch = useDispatch();
  const notificationMode = useSelector((state) => state.notificationMode);
  const [tableData, setTableData] = useState(null);
  const [transactionMakerCheck, setTransactionMakerCheck] = useState(false);
  const [customerPresenceControlCheck, setCustomerPresenceControlCheck] =
    useState(false);
  const [ankesCheck, setAnkesCheck] = useState(false);
  const { openTeslaViewerWithUrl, fireModuleEvent, callApi } =
    useShellCommunicator();
  const [selectedRow, setSelectedRow] = useState(null);
  const [bbtDocsChecks, setBbtDocsChecks] = useState([]);

  useEffect(() => {
    getDocuments();
  }, [groupId]);

  const columns = [
    {
      title: "Kontrol Adı",
      dataIndex: "parameterName",
      key: "parameterName",
      render: (text, record) => generateLinks(text, record),
    },
    {
      title: "Kontrol Açıklaması",
      dataIndex: "description",
      key: "description",
    },
    {
      title: "Uygun",
      dataIndex: "status",
      width: "30%",
      key: "status",
      render: (text, record) => generateCheckButtons(text, record),
    },
  ];

  const generateTableData = () => {
    let data;
    if (groupId === "") {
      data = [
        {
          key: 1,
          parameterName: "Diğer İşlem Kontrolleri",
          description: "",
          isHeader: true,
          children: [],
        },
      ];
    } else {
      data = [
        {
          key: 1,
          parameterName: "Belge Kontrolleri",
          description: "",
          isHeader: true,
          children: [],
        },
        {
          key: 2,
          parameterName: "Diğer İşlem Kontrolleri",
          description: "",
          isHeader: true,
          children: [],
        },
      ];
    }
    setTableData(data);
    return data;
  };

  const generateLinks = (text, record) => {
    if (record.isHeader) {
      return <Text>{record.parameterName}</Text>;
    } else if (!record.isExist) {
      return <Text>{record.parameterName}</Text>;
    } else {
      return (
        <Text type="secondary" underline>
          {record.parameterName}
          <Icon name="external-link" />
        </Text>
      );
    }
  };

  function openTesla(remoteId) {
    fireModuleEvent("wsGetDocumentUrl", {
      documentId: remoteId,
      documentUniqueKey: "undefined",
      userID: props?.externalData?.shellData?.user?.userCode,
      //environment: context.externalData.scopeData.environment,
      callbackContext: this,
      callbackFunction: function (documentUrl) {
        openTeslaViewerWithUrl({
          data: {
            urls: [documentUrl],
          },
        });
      },
    });
  }

  const generateCheckButtons = (text, record) => {
    if (record.isHeader) {
      return null;
    }
    if (record.isExist) {
      return <Checkbox checked={true} disabled={true}></Checkbox>;
    } else {
      switch (record.key) {
        case "app.micro.moneydeposit_smartcontrol_transactionMaker":
          return (
            <Checkbox
              checked={transactionMakerCheck}
              onChange={toggleTransactionMaker}
            ></Checkbox>
          );
          break;
        case "app.micro.moneydeposit_smartcontrol_customerPresenceControl":
          return (
            <Checkbox
              checked={customerPresenceControlCheck}
              onChange={togglePresenceControl}
            ></Checkbox>
          );
          break;
        case "app.micro.moneydeposit_smartcontrol_ankes":
          return (
            <Checkbox checked={ankesCheck} onChange={toggleAnkes}></Checkbox>
          );
          break;
      }
      // üstteki switch case özel checkboxlar için o kısmı görmezden gelebilirsin. özel checkboxlar için özel state ve toggle metotları mevcut.
      // aşağıda backendten gelen dataya göre checkboxlar oluşturuluyor.
      return (
        <Checkbox
          id={record.key}
          checked={setCheckState(record.key)}
          onChange={toggleChecked}
        ></Checkbox>
      );
    }
  };

  // dinamik oluşturulan checkboxlar için toggle metodu. burada state'i güncelleyince checkbox'ın da güncellenmesini bekliyorum.
  const toggleChecked = (e) => {
    const id = e.target.id;
    const updatedChecks = bbtDocsChecks.map((item) => {
      if (item.id === id) {
        return { ...item, checked: !item.checked };
      }
      return item;
    });
    setBbtDocsChecks(updatedChecks);
    //setCheckState(e.target.id);
  };

  // burada backendten data geldikten sonra checkoxlar için ilk oluşturulurken state setleniyor.
  // başka bir metotla dene forEach olabilir. burada state'teki objenin referansı gitmediği için çalışmıyor olabilir. yada tekrar render edildiği için olabilir?
  const setCheckState = (id) => {
    bbtDocsChecks.forEach((item) => {
      if (item.id === id) {
        return item.checked;
      }
    });
  };

  const toggleTransactionMaker = () => {
    setTransactionMakerCheck(!transactionMakerCheck);
  };

  const togglePresenceControl = () => {
    setCustomerPresenceControlCheck(!customerPresenceControlCheck);
  };

  const toggleAnkes = () => {
    setAnkesCheck(!ankesCheck);
  };

  useEffect(() => {
    dispatch(moneyDepositActions.setAnkesCheck(ankesCheck));
  }, [ankesCheck]);

  useEffect(() => {
    dispatch(
      moneyDepositActions.setCustomerPresenceControlCheck(
        customerPresenceControlCheck
      )
    );
  }, [customerPresenceControlCheck]);

  useEffect(() => {
    dispatch(
      moneyDepositActions.setTransactionMakerCheck(transactionMakerCheck)
    );
  }, [transactionMakerCheck]);

  // oluşturulan state'i konsolda görmek için bir butonun onClick fonksiyonuna atadım. test amaçlı
  const showCheckState = () => {
    console.log(bbtDocsChecks);
  };

  // burada checkboxlar için state oluşturuluyor. [{id: "checkbox1", checked: false}, {id: "checkbox2", checked: false}] şeklinde bir object array
  // children varsa onlar içinde checkbox oluşturulacağı için metot kendi içinde tekrar çağırılıyor.
  const generateCheckboxStates = (data) => {
    const response = bbtDocsChecks;
    data.map((doc) => {
      const check = {
        id: doc?.key,
        checked: false,
      };
      response.push(check);
      if (doc.children) {
        generateCheckboxStates(doc.children);
      }
    });
    return response;
  };

  const getDocuments = async () => {
    if (groupId === null || groupId === undefined) {
      return;
    }
    const data = generateTableData();
    const documentRequest = {
      parameterName: "moneydeposit_smartcontrol",
      groupId: groupId,
      //processCode: "PARYATVISION" // eklenecek
    };
    dispatch(moneyDepositActions.setLoading(true));
    await callApi(getDocumentsApi(documentRequest))
      .then((response) => {
        // set checkbox states
        setBbtDocsChecks(generateCheckboxStates(response?.bbtDocuments));

        if (groupId === "") {
          data[0].children = response.notExistsDocs;
        } else {
          data[0].children = response.bbtDocuments;
          data[1].children = response.notExistsDocs;
        }
        setTableData(data);
        dispatch(moneyDepositActions.setLoading(false));
      })
      .catch((ex) => {
        dispatch(moneyDepositActions.setLoading(false));
      });
  };

  const onRowSelected = (_, selectedRow) => {
    setSelectedRow(selectedRow[0]);
    if (selectedRow[0]?.documentRemoteId) {
      openTesla(selectedRow[0].documentRemoteId);
    }
  };

  const onRowClicked = (record) => {
    onRowSelected([record.key], [record]);
  };

  return (
    getCashApprovalType(notificationMode) === ApprovalType.LIMIT && (
      <>
        <Table
          columns={columns}
          data={tableData}
          expandable={{ defaultExpandAllRows: true }}
          onRow={(record) => {
            return {
              onClick: (event) => {
                onRowClicked(record);
              },
            };
          }}
        />
        <Button onClick={showCheckState}>Show state</Button>
      </>
    )
  );
};

export default MoneyDepositSmartControlTable;
