@Test
void whenInquired_withNullAccountNumber_shouldNotModifyAccountField() {
    var request = ReceiptAlternativeDistributionChannelsServiceTestUtil.getRequestReceiptAdcInquiry_Fully();
    request.setAccountNumber(null);       // <-- AccountNumber null
    request.setAccountCurrency("USD");    // <-- Currency dolu
    
    when(service.getReceiptList(Mockito.any()))
        .thenReturn(ReceiptAlternativeDistributionChannelsServiceTestUtil.getResponseReceiptAdcInquiry_Successfull());
    
    ResponseEntity<ResponseAdcReceiptListing> httpResponse = controller.inquireReceipt(request);
    
    assertThat(httpResponse.getStatusCode()).isEqualTo(HttpStatus.OK);
    // 'accountNo' set edilmemiş olmalı (if'in false dalı)
    assertThat(request.getAccountNo()).isNull(); 
}

@Test
void whenInquired_withNullAccountCurrency_shouldNotModifyAccountField() {
    var request = ReceiptAlternativeDistributionChannelsServiceTestUtil.getRequestReceiptAdcInquiry_Fully();
    request.setAccountNumber("123456");
    request.setAccountCurrency(null);     // <-- Currency null
    
    when(service.getReceiptList(Mockito.any()))
        .thenReturn(ReceiptAlternativeDistributionChannelsServiceTestUtil.getResponseReceiptAdcInquiry_Successfull());
    
    ResponseEntity<ResponseAdcReceiptListing> httpResponse = controller.inquireReceipt(request);
    
    assertThat(httpResponse.getStatusCode()).isEqualTo(HttpStatus.OK);
    // 'accountNo' yine set edilmemiş olmalı (if'in false dalı)
    assertThat(request.getAccountNo()).isNull();
}


@Test
void whenAdcGetDisplay_withNullAccountNumber_shouldNotModifyAccount() throws ReceiptException {
    var request = ReceiptAlternativeDistributionChannelsServiceTestUtil.getRequestReceiptDisplayAdc();
    // İlk elemana null accountNumber veriyoruz
    request.getRequestReceiptAdcCriteriaList().get(0).setAccountNumber(null);
    request.getRequestReceiptAdcCriteriaList().get(0).setAccontCurrency("EUR");

    when(service.getReceiptDisplayList(Mockito.any()))
        .thenReturn(ReceiptAlternativeDistributionChannelsServiceTestUtil.getResponseAdcReceiptDisplay());

    ResponseEntity<ResponseAdcReceiptDisplayList> httpResponse = controller.adcGetDisplay(request);

    assertThat(httpResponse.getStatusCode()).isEqualTo(HttpStatus.OK);
    // 'account' set edilmemiş olmalı
    assertThat(request.getRequestReceiptAdcCriteriaList().get(0).getAccount()).isNull();
}

@Test
void whenSendEmailAdc_withEmptyProcessReceiptList_shouldReturnOkWithoutProcessing() {
    var request = ReceiptAlternativeDistributionChannelsServiceTestUtil.getRequestReceiptSendMailAdc();
    request.setProcessReceiptList(Collections.emptyList()); // <-- Boş liste

    when(receiptMailWrapperService.sendMail(Mockito.any()))
        .thenReturn(new ResponseAdcWrapperSendMail());

    ResponseEntity<ResponseAdcWrapperSendMail> httpResponse = controller.sendEmailAdc(request);

    assertThat(httpResponse.getStatusCode()).isEqualTo(HttpStatus.OK);
    // Boş liste olduğu için döngüye girmeyecek, bu sayede if’in false dalı test edilmiş olur
}

@Test
void whenSendEmailAdc_withNullAccountNumber_shouldNotModifyAccountNo() {
    var request = ReceiptAlternativeDistributionChannelsServiceTestUtil.getRequestReceiptSendMailAdc();
    request.getProcessReceiptList().get(0).setAccountNumber(null);
    request.getProcessReceiptList().get(0).setAccountCurrency("USD");

    var mockResponse = new ResponseAdcWrapperSendMail();
    mockResponse.setIsSuccessful(true);
    when(receiptMailWrapperService.sendMail(Mockito.any())).thenReturn(mockResponse);

    ResponseEntity<ResponseAdcWrapperSendMail> httpResponse = controller.sendEmailAdc(request);

    assertThat(httpResponse.getStatusCode()).isEqualTo(HttpStatus.OK);
    // accountNo set edilmemiş olmalı
    assertThat(request.getProcessReceiptList().get(0).getAccountNo()).isNull();
    assertTrue(httpResponse.getBody().getIsSuccessful());
}
