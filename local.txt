// 1. BigDecimal Converter sınıfı oluşturun
package com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.mapper.converter;

import com.garantibbva.ark.custom.proto.BigDecimalProto;
import org.springframework.stereotype.Component;

import java.math.BigDecimal;

@Component
public class BigDecimalConverter {

    /**
     * Java BigDecimal'ı gRPC BigDecimal'a çevirir
     */
    public BigDecimalProto.BigDecimal toProtoBigDecimal(BigDecimal bigDecimal) {
        if (bigDecimal == null) {
            return null;
        }
        
        return BigDecimalProto.BigDecimal.newBuilder()
                .setScale(bigDecimal.scale())
                .setPrecision(bigDecimal.precision())
                .setValue(com.google.protobuf.ByteString.copyFrom(bigDecimal.unscaledValue().toByteArray()))
                .build();
    }

    /**
     * gRPC BigDecimal'ı Java BigDecimal'a çevirir
     */
    public BigDecimal fromProtoBigDecimal(BigDecimalProto.BigDecimal protoBigDecimal) {
        if (protoBigDecimal == null) {
            return null;
        }
        
        return new BigDecimal(
            new java.math.BigInteger(protoBigDecimal.getValue().toByteArray()),
            protoBigDecimal.getScale()
        );
    }
}

// 2. Güncellenmiş DigitalOrderMapper
package com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.mapper;

import com.garanti.ark.base.utility.grpc.mapper.GrpcMapperConfig;
import com.garanti.branchinstructionmanagement.business.proto.v0.BranchInstruction.ReadBranchInstructionDepositWithdrawalRequest;
import com.garanti.branchinstructionmanagement.business.proto.v0.BranchInstruction.ReadBranchInstructionDepositWithdrawalResponse;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.request.DigitalOrderReadRequestDto;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.response.DigitalOrderReadResponseDto;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.mapper.converter.BigDecimalConverter;
import com.garantibbva.ark.custom.proto.BigDecimalProto;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

import java.math.BigDecimal;

@Mapper(config = GrpcMapperConfig.class, uses = BigDecimalConverter.class)
public interface DigitalOrderMapper {

    DigitalOrderMapper INSTANCE = Mappers.getMapper(DigitalOrderMapper.class);

    @Mapping(target = "amount", source = "amount", qualifiedByName = "toProtoBigDecimal")
    ReadBranchInstructionDepositWithdrawalRequest toDigitalOrderGrpcRequest(
            DigitalOrderReadRequestDto requestDto);

    @Mapping(target = "amount", source = "amount", qualifiedByName = "fromProtoBigDecimal") 
    DigitalOrderReadResponseDto toResponseDto(ReadBranchInstructionDepositWithdrawalResponse grpcResponse);

    // Custom mapping methodları
    @org.mapstruct.Named("toProtoBigDecimal")
    default BigDecimalProto.BigDecimal toProtoBigDecimal(BigDecimal bigDecimal) {
        if (bigDecimal == null) {
            return null;
        }
        
        return BigDecimalProto.BigDecimal.newBuilder()
                .setScale(bigDecimal.scale())
                .setPrecision(bigDecimal.precision())
                .setValue(com.google.protobuf.ByteString.copyFrom(bigDecimal.unscaledValue().toByteArray()))
                .build();
    }

    @org.mapstruct.Named("fromProtoBigDecimal")
    default BigDecimal fromProtoBigDecimal(BigDecimalProto.BigDecimal protoBigDecimal) {
        if (protoBigDecimal == null) {
            return null;
        }
        
        return new BigDecimal(
            new java.math.BigInteger(protoBigDecimal.getValue().toByteArray()),
            protoBigDecimal.getScale()
        );
    }
}

// 3. Alternatif çözüm - Ayrı BigDecimalMapper ile
package com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.mapper;

import com.garantibbva.ark.custom.proto.BigDecimalProto;
import org.mapstruct.Mapper;

import java.math.BigDecimal;

@Mapper
public interface BigDecimalMapper {

    default BigDecimalProto.BigDecimal map(BigDecimal bigDecimal) {
        if (bigDecimal == null) {
            return null;
        }
        
        return BigDecimalProto.BigDecimal.newBuilder()
                .setScale(bigDecimal.scale())
                .setPrecision(bigDecimal.precision())
                .setValue(com.google.protobuf.ByteString.copyFrom(bigDecimal.unscaledValue().toByteArray()))
                .build();
    }

    default BigDecimal map(BigDecimalProto.BigDecimal protoBigDecimal) {
        if (protoBigDecimal == null) {
            return null;
        }
        
        return new BigDecimal(
            new java.math.BigInteger(protoBigDecimal.getValue().toByteArray()),
            protoBigDecimal.getScale()
        );
    }
}

// Bu durumda DigitalOrderMapper'ı şöyle güncelleyin:
@Mapper(config = GrpcMapperConfig.class, uses = BigDecimalMapper.class)
public interface DigitalOrderMapper {
    // mapping methodları aynı kalır, BigDecimalMapper otomatik olarak kullanılır
}
