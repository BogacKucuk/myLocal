// src/features/documents/utils/documentSets.ts
export type DocumentInfo = {
  processMainCode: string;
  processSubCode: string;
  documentDisplayName: string;
  docPersonType: string;
  levelNum: number;
};

/**
 * "B:GISESET2;I:KIMLIK1;" -> { I: ['KIMLIK1'], B: ['GISESET2'] }
 */
export function parseDebitSets(setStr: string | undefined | null): { I: string[]; B: string[] } {
  const res = { I: [] as string[], B: [] as string[] };
  if (!setStr) return res;

  setStr
    .split(";")
    .map((s) => s.trim())
    .filter(Boolean)
    .forEach((tok) => {
      const [prefix, code] = tok.split(":");
      if (!code) return;
      if (prefix === "I") res.I.push(code);
      else if (prefix === "B") res.B.push(code);
    });

  return res;
}

/**
 * DocumentInfo’yu dinamik üret (katalog yok → kurala dayalı).
 */
export function makeDocumentInfoFromCode(code: string): DocumentInfo {
  const upper = String(code ?? "").toUpperCase();
  const processMainCode = upper.startsWith("GISE") ? "GENELGISE" : "GENELGISE"; // istersen burada kuralları genişlet
  return {
    processMainCode,
    processSubCode: upper,
    documentDisplayName: "",
    docPersonType: "01",
    levelNum: 0,
  };
}

/**
 * Güvenli string dönüştürücü
 */
export const toStr = (v: unknown) => String(v ?? "");


----------------------------------------------------------------------------------------------------------------

// src/store/transactionInfoSlice.ts
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

export type TransactionMaker = {
  name: string;
  surname: string;
  address: string;
  customerNumber: string; // string olarak tutuyoruz
  mernisNum: string;
};

export type TransactionInfo = {
  opCode: string;
  transactionMaker: TransactionMaker[];
  documentSetDebit: string;
  documentSetCredit: string;
  extraDocSetsByCustomer: Record<string, string[]>; // müşteri bazında ek setler
};

export type TransactionInfoPatch = Partial<TransactionInfo>;

const initialState: TransactionInfo = {
  opCode: "",
  transactionMaker: [],
  documentSetDebit: "",
  documentSetCredit: "",
  extraDocSetsByCustomer: {},
};

export const transactionInfoSlice = createSlice({
  name: "transactionInfo",
  initialState,
  reducers: {
    setAll: (state, action: PayloadAction<TransactionInfo>) => {
      Object.assign(state, action.payload);
    },
    patch: (state, action: PayloadAction<TransactionInfoPatch>) => {
      Object.assign(state, action.payload);
    },

    addTransactionMaker: (state, action: PayloadAction<TransactionMaker>) => {
      state.transactionMaker.push(action.payload);
    },
    setTransactionMaker: (state, action: PayloadAction<TransactionMaker[]>) => {
      state.transactionMaker = [...action.payload];
    },

    // ek set yönetimi
    addExtraDocSet: (
      state,
      action: PayloadAction<{ customerNumber: string; setCode: string }>
    ) => {
      const { customerNumber, setCode } = action.payload;
      const arr = state.extraDocSetsByCustomer[customerNumber] ?? [];
      if (!arr.includes(setCode)) {
        state.extraDocSetsByCustomer[customerNumber] = [...arr, setCode];
      }
    },
    removeExtraDocSet: (
      state,
      action: PayloadAction<{ customerNumber: string; setCode: string }>
    ) => {
      const { customerNumber, setCode } = action.payload;
      const arr = state.extraDocSetsByCustomer[customerNumber] ?? [];
      state.extraDocSetsByCustomer[customerNumber] = arr.filter((c) => c !== setCode);
    },
    clearExtraDocSetsFor: (state, action: PayloadAction<{ customerNumber: string }>) => {
      delete state.extraDocSetsByCustomer[action.payload.customerNumber];
    },
    clearAllExtraDocSets: (state) => {
      state.extraDocSetsByCustomer = {};
    },

    clear: (state) => {
      Object.assign(state, initialState);
    },
  },
});

export const transactionInfoActions = transactionInfoSlice.actions;
export const transactionInfoReducer = transactionInfoSlice.reducer;




---------------------------------------------------------------------------------------------------------------------------



// src/features/documents/DocumentScannerComponent.tsx
import React, { JSX, useEffect, useMemo, useState } from "react";
import { useAppSelector } from "../../store";
import { EfaCollapseDocumentScannerMultiCustomer } from "@efa-web-components-multi-cust-doc/efa-collapse-document-scanner-multi-customer";
import type { TransactionMaker } from "../../store/transactionInfoSlice";
import { parseDebitSets, makeDocumentInfoFromCode, toStr, type DocumentInfo } from "./utils/documentSets";

type Person = {
  customerNum: string;
  mernisNum: string;
  taxNum: number;
  docPersonType: string;
  transferableDocClass: string;
};

type DocumentScanInfo = {
  processCode: string;
  processId: string;
  processLevelNum: string;
  processText: string;
  useMaxDisplay: string;
  maxDisplayPerSet: string;
};

type CustomerData = {
  customerNum: string;
  fullName: string;
  documentScannerData: {
    personListJson: Person[];
    documentListJson: DocumentInfo[];
    documentScanInfoJson: DocumentScanInfo;
  };
};

const DocumentScannerComponent = (): JSX.Element => {
  const { transactionMaker, documentSetDebit, extraDocSetsByCustomer } =
    useAppSelector((s) => s.transactionInfo);

  // acting customer number diğer slice'tan number olabilir → normalize et
  const actingCustomerNumberRaw = useAppSelector(
    (s) => s.customerInfo?.actingCustomerNumber as string | number | undefined
  );
  const actingCustomerNumber = useMemo(
    () => toStr(actingCustomerNumberRaw),
    [actingCustomerNumberRaw]
  );

  // maker listesini normalize et (customerNumber & mernisNum string'e)
  const makers = useMemo(
    () =>
      transactionMaker.map((tm: TransactionMaker) => ({
        ...tm,
        customerNumber: toStr(tm.customerNumber),
        mernisNum: toStr(tm.mernisNum),
      })),
    [transactionMaker]
  );

  // PersonListJson
  const [personListJson, setPersonListJson] = useState<Person[][]>([]);
  useEffect(() => {
    const next: Person[][] = makers.map((tm) => [
      {
        customerNum: tm.customerNumber,
        mernisNum: tm.mernisNum,
        taxNum: 0,
        docPersonType: "01",
        transferableDocClass: "",
      },
    ]);
    setPersonListJson(next);
  }, [makers]);

  const baseSets = useMemo(() => parseDebitSets(documentSetDebit), [documentSetDebit]);

  const documentScanInfoJson: DocumentScanInfo = useMemo(
    () => ({
      processCode: "GENELADRES",
      processId: "MN000000045003398",
      processLevelNum: "0",
      processText: "",
      useMaxDisplay: "false",
      maxDisplayPerSet: "0",
    }),
    []
  );

  const compData = useMemo<CustomerData[]>(() => {
    return makers.map((tm, i) => {
      const isActing =
        actingCustomerNumber !== "" && tm.customerNumber === actingCustomerNumber;

      const baseCodes = isActing ? baseSets.I : baseSets.B;
      const extraCodes = extraDocSetsByCustomer[tm.customerNumber] ?? [];
      const allCodes = [...baseCodes, ...extraCodes];

      const documentListJson: DocumentInfo[] = allCodes.map((c) => makeDocumentInfoFromCode(c));
      const personArr = personListJson[i] ?? [];
      const fullName =
        `${tm.name ?? ""} ${tm.surname ?? ""}`.trim() || `User ${i + 1}`;

      return {
        customerNum: tm.customerNumber,
        fullName,
        documentScannerData: {
          personListJson: personArr,
          documentListJson,
          documentScanInfoJson,
        },
      };
    });
  }, [makers, actingCustomerNumber, baseSets, extraDocSetsByCustomer, personListJson, documentScanInfoJson]);

  // debug için
  // useEffect(() => { console.log("compData", compData); }, [compData]);

  return <EfaCollapseDocumentScannerMultiCustomer data={compData} />;
};

export default DocumentScannerComponent;




-----------------------------------------------------------------------------------------------------------------------------------------

// src/features/money-withdraw/MainMoneyWithdraw.tsx
import React from "react";
import { useAppDispatch, useAppSelector } from "../../store";
import { transactionInfoActions } from "../../store/transactionInfoSlice";
import DocumentScannerComponent from "../documents/DocumentScannerComponent";

const MainMoneyWithdraw = (): JSX.Element => {
  const dispatch = useAppDispatch();
  const actingCustomerNumberRaw = useAppSelector(
    (s) => s.customerInfo?.actingCustomerNumber as string | number | undefined
  );
  const actingCustomerNumber = String(actingCustomerNumberRaw ?? "");

  const createAndGetDocument = async () => {
    try {
      // ... RTK Query create + get ...
      // getDocResponse.pdfData geldikten sonra:
      if (actingCustomerNumber) {
        dispatch(
          transactionInfoActions.addExtraDocSet({
            customerNumber: actingCustomerNumber,
            setCode: "GISESET9",
          })
        );
      }
    } catch (e) {
      console.error(e);
    }
  };

  return (
    <>
      <button onClick={createAndGetDocument}>Create & Get Document</button>
      <DocumentScannerComponent />
    </>
  );
};

export default MainMoneyWithdraw;
