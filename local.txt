package com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.grpc.impl;

import static org.mockito.ArgumentMatchers.argThat;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.grpc.impl.GoldDocumentGrpcServiceImpl;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.GoldDocumentService;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.request.CreateSinglePdfRequestDto;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.request.GetSinglePdfRequestDto;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.response.CreateSinglePdfResponseDto;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.response.GetPdfResponseDto;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.proto.GoldDocumentProto.CreateSinglePdfGrpcRequest;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.proto.GoldDocumentProto.CreateSinglePdfGrpcResponse;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.proto.GoldDocumentProto.GetPdfGrpcResponse;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.proto.GoldDocumentProto.GetSinglePdfGrpcRequest;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.grpc.mapper.GoldDocumentGrpcMapper;
import io.grpc.stub.StreamObserver;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
class GoldDocumentGrpcServiceImplTest {

    @Mock
    private GoldDocumentService goldDocumentService;

    @InjectMocks
    private GoldDocumentGrpcServiceImpl grpcService;

    @Mock
    private StreamObserver<CreateSinglePdfGrpcResponse> createObserver;

    @Mock
    private StreamObserver<GetPdfGrpcResponse> getObserver;

    private CreateSinglePdfResponseDto serviceCreateResponse;
    private GetPdfResponseDto serviceGetResponse;

    @BeforeEach
    void setUp() {
        serviceCreateResponse = CreateSinglePdfResponseDto.builder()
                .returnCode("00")
                .returnMsg("OK")
                .documentId("DOC123")
                .build();

        serviceGetResponse = GetPdfResponseDto.builder()
                .returnCode("00")
                .returnMsg("OK")
                .printType("PT1")
                .paperTrayText("PTT")
                .secPaperTrayText("SPTT")
                .pdfData("PDFDATA")
                .build();
    }

    @Test
    void createSinglePdf_ShouldUsePrepareTestRequestAndReturnGrpcResponse() {
        // Given
        when(goldDocumentService.createSinglePdf(any(CreateSinglePdfRequestDto.class)))
                .thenReturn(serviceCreateResponse);

        // When
        grpcService.createSinglePdf(mock(CreateSinglePdfGrpcRequest.class), createObserver);

        // Then: verify that the service was called with the hard-coded prepareTestRequest values
        verify(goldDocumentService).createSinglePdf(argThat(dto ->
                "ALTIN_SOZLESMESI_TR_EN_IMZA_BARKODLU".equals(dto.getDocumentType()) &&
                "A".equals(dto.getDocumentStatus()) &&
                "TEST".equals(dto.getUserId()) &&
                "TEST".equals(dto.getAuthUserId()) &&
                "1".equals(dto.getAsync()) &&
                dto.getXmlData().contains("<test>testXml</test>")
        ));

        // Verify gRPC response
        CreateSinglePdfGrpcResponse expectedGrpc = GoldDocumentGrpcMapper.INSTANCE.toGrpcResponse(serviceCreateResponse);
        verify(createObserver).onNext(expectedGrpc);
        verify(createObserver).onCompleted();
    }

    @Test
    void getSinglePdf_ShouldMapRequestAndReturnGrpcResponse() {
        // Given
        GetSinglePdfGrpcRequest grpcRequest = GetSinglePdfGrpcRequest.newBuilder()
                .setDocumentId("DOC123")
                .setUserId("USER1")
                .setAuthUserId("AUTH1")
                .build();
        when(goldDocumentService.getSinglePdf(any(GetSinglePdfRequestDto.class)))
                .thenReturn(serviceGetResponse);

        // When
        grpcService.getSinglePdf(grpcRequest, getObserver);

        // Then: verify that mapper converted gRPC request correctly
        verify(goldDocumentService).getSinglePdf(argThat(dto ->
                "DOC123".equals(dto.getDocumentId()) &&
                "USER1".equals(dto.getUserId()) &&
                "AUTH1".equals(dto.getAuthUserId())
        ));

        // Verify gRPC response
        GetPdfGrpcResponse expectedGrpc = GoldDocumentGrpcMapper.INSTANCE.toGetSinglePdfGrpcResponse(serviceGetResponse);
        verify(getObserver).onNext(expectedGrpc);
        verify(getObserver).onCompleted();
    }
}
