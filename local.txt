package com.ykb.corebanking.vault.money.deposit.withdraw.bff.service.impl;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.util.Collections;
import java.util.List;

import com.ykb.corebanking.vault.money.deposit.withdraw.bff.client.BbtBranchOpsWorkflowClient;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.client.SmartControlClient;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.dto.CashTrxnParameterDTO;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.dto.DocumentControlResultDTO;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.dto.ResultBBTListDocumentControlResultDTO;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.dto.SmartControlDataDTO;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.dto.SmartControlDocumentDTO;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.exception.SmartControlException;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.request.RequestBranchOperationControlResult;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.request.RequestSmartControlDocuments;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit.jupiter.SpringExtension;

@ExtendWith(SpringExtension.class)
class SmartControlServiceTest {

    @InjectMocks
    SmartControlService smartControlService;

    @Mock
    SmartControlClient smartControlClient;

    @Mock
    BbtBranchOpsWorkflowClient bbtBranchOpsWorkflowClient;

    /**
     * BBT dokümanları boş gelirse "BBT dokümanları bulunamadı." hatası beklenir.
     */
    @Test
    void getSmartControlDocuments_ShouldThrowException_WhenBBTDocsNotFound() throws SmartControlException {
        // Arrange
        RequestSmartControlDocuments request = new RequestSmartControlDocuments();
        request.setGroupId("123");
        request.setParameterName("testParameter");

        // BBT tarafında boş data döndürelim
        ResultBBTListDocumentControlResultDTO bbtResponse = new ResultBBTListDocumentControlResultDTO();
        bbtResponse.setData(Collections.emptyList()); // <-- boş liste

        when(bbtBranchOpsWorkflowClient.getBBTBranchOperationControlResults(any(RequestBranchOperationControlResult.class)))
                .thenReturn(bbtResponse);

        // Act & Assert
        SmartControlException exception = assertThrows(SmartControlException.class, () -> {
            smartControlService.getSmartControlDocuments(request);
        });

        assertEquals("BBT dokümanları bulunamadı.", exception.getMessage());
    }

    /**
     * SmartControlClient null dönerse "Gerekli dokümanlar bulunamadı." hatası beklenir.
     */
    @Test
    void getSmartControlDocuments_ShouldThrowException_WhenClientResponseIsNull() throws SmartControlException {
        // Arrange
        RequestSmartControlDocuments request = new RequestSmartControlDocuments();
        request.setGroupId("123");
        request.setParameterName("testParameter");

        // BBT mock: Boş olmayan bir liste dönsün ki BBTException'a düşmeyelim
        ResultBBTListDocumentControlResultDTO bbtResponse = createMockBBTResponse();
        when(bbtBranchOpsWorkflowClient.getBBTBranchOperationControlResults(any(RequestBranchOperationControlResult.class)))
                .thenReturn(bbtResponse);

        // SmartControl client'tan null geliyor
        when(smartControlClient.getSmartControlDocuments(any(RequestSmartControlDocuments.class)))
                .thenReturn(null);

        // Act & Assert
        SmartControlException exception = assertThrows(SmartControlException.class, () -> {
            smartControlService.getSmartControlDocuments(request);
        });

        assertEquals("Gerekli dokümanlar bulunamadı.", exception.getMessage());
    }

    /**
     * BBT ve SmartControlClient'tan geçerli veriler dönüyorsa data döndürür.
     */
    @Test
    void getSmartControlDocuments_ShouldReturnData_WhenAllDataIsValid() throws SmartControlException {
        // Arrange
        RequestSmartControlDocuments request = new RequestSmartControlDocuments();
        request.setGroupId("123");
        request.setParameterName("smart");

        // BBT client mock
        ResultBBTListDocumentControlResultDTO bbtResponse = createMockBBTResponse();
        when(bbtBranchOpsWorkflowClient.getBBTBranchOperationControlResults(any(RequestBranchOperationControlResult.class)))
                .thenReturn(bbtResponse);

        // SmartControl client mock
        CashTrxnParameterDTO cashTrxnParameterDTO = new CashTrxnParameterDTO();
        cashTrxnParameterDTO.setParameterName("paramKey");
        cashTrxnParameterDTO.setValue("paramValue;paramDescription");

        ResponseEntity<List<CashTrxnParameterDTO>> clientResponse =
                ResponseEntity.ok(Collections.singletonList(cashTrxnParameterDTO));

        when(smartControlClient.getSmartControlDocuments(any(RequestSmartControlDocuments.class)))
                .thenReturn(clientResponse);

        // Act
        SmartControlDataDTO result = smartControlService.getSmartControlDocuments(request);

        // Assert
        assertNotNull(result);
        assertNotNull(result.getBbtDocuments());
        assertNotNull(result.getNotExistsDocs());
        assertFalse(result.getBbtDocuments().isEmpty());
        assertFalse(result.getNotExistsDocs().isEmpty());

        // BBT'den gelen ilk doküman
        SmartControlDocumentDTO bbtDoc = result.getBbtDocuments().get(0);
        // Mock BBT doküman adımız: "Vekaletname"
        // (bkz. createMockBBTResponse'da set ediliyor)
        assertEquals("Vekaletname", bbtDoc.getParameterName(), 
                "BBT doküman adının 'Vekaletname' olması bekleniyor");
        // BBT dokümanlarında description'ı isterseniz testte kontrol edebilirsiniz
        // (Örneğin "BBT doc description" vs.)
        // Fakat service’te default bir "description" verilmiyor gibi gözüküyor.
        // Biz testte "Sistemde Mevcut" atamıyoruz, o yüzden isterseniz assertion'ı 
        // buradan kaldırabilirsiniz veya sample veriler ekleyebilirsiniz.

        // "isExist" default false set ediliyor SmartControlService içinde;
        // eğer testte true bekliyorsanız service kodunu güncellemeniz gerekir.
        // Örnek olarak test kodunuzu false beklemeye ayarlayabilirsiniz.
        assertFalse(bbtDoc.getIsExist(), 
                "Yeni serviste BBT dokümanları 'isExist = false' olarak dönüyor.");

        // SmartControlClient'tan dönmeyen (eksik) dokümanlar
        SmartControlDocumentDTO notExistDoc = result.getNotExistsDocs().get(0);
        assertEquals("paramValue", notExistDoc.getParameterName());
        assertEquals("paramDescription", notExistDoc.getDescription());
        assertFalse(notExistDoc.getIsExist());
    }

    /**
     * BBT tarafı için sahte (mock) veri oluşturuyoruz.
     */
    private ResultBBTListDocumentControlResultDTO createMockBBTResponse() {
        ResultBBTListDocumentControlResultDTO bbtResponse = new ResultBBTListDocumentControlResultDTO();
        bbtResponse.setSuccess(Boolean.TRUE);
        bbtResponse.setMessage("Message");

        DocumentControlResultDTO documentControlResultDTO = new DocumentControlResultDTO();
        documentControlResultDTO.setDocumentName("Vekaletname");
        // resultDescriptionDTO vs. alanlarını da isterseniz burada doldurabilirsiniz.

        bbtResponse.setData(Collections.singletonList(documentControlResultDTO));
        return bbtResponse;
    }
}
