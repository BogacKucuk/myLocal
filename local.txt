package com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.impl;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.GoldDocumentService;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.request.CreateSinglePdfRequestDto;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.request.GetSinglePdfRequestDto;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.response.CreateSinglePdfResponseDto;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.contract.model.response.GetPdfResponseDto;
import com.garantibbva.depositwithdrawalmngt.moneywithdrawbusiness.service.external.DocumentService;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
class GoldDocumentServiceImplTest {

    @Mock
    private DocumentService documentService;

    @InjectMocks
    private GoldDocumentServiceImpl goldDocumentService;

    @Test
    void createSinglePdf_ShouldDelegateToDocumentService() {
        // Given
        CreateSinglePdfRequestDto requestDto = CreateSinglePdfRequestDto.builder()
                .documentType("TYPE")
                .documentStatus("STATUS")
                .async("1")
                .userId("user")
                .authUserId("auth")
                .xmlData("<xml/>")
                .build();

        CreateSinglePdfResponseDto expectedResponse = CreateSinglePdfResponseDto.builder()
                .returnCode("00")
                .returnMsg("OK")
                .documentId("DOC_ID")
                .build();

        when(documentService.createSinglePdf(requestDto)).thenReturn(expectedResponse);

        // When
        CreateSinglePdfResponseDto actualResponse = goldDocumentService.createSinglePdf(requestDto);

        // Then
        verify(documentService).createSinglePdf(requestDto);
        assertEquals(expectedResponse, actualResponse);
    }

    @Test
    void getSinglePdf_ShouldDelegateToDocumentService() {
        // Given
        GetSinglePdfRequestDto requestDto = GetSinglePdfRequestDto.builder()
                .documentId("DOC_ID")
                .userId("user")
                .authUserId("auth")
                .build();

        GetPdfResponseDto expectedResponse = GetPdfResponseDto.builder()
                .returnCode("00")
                .returnMsg("OK")
                .printType("PT")
                .paperTrayText("PTT")
                .secPaperTrayText("SPTT")
                .pdfData("PDFDATA")
                .build();

        when(documentService.getSinglePdf(requestDto)).thenReturn(expectedResponse);

        // When
        GetPdfResponseDto actualResponse = goldDocumentService.getSinglePdf(requestDto);

        // Then
        verify(documentService).getSinglePdf(requestDto);
        assertEquals(expectedResponse, actualResponse);
    }
}
