import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(SpringExtension.class)
class CustomerNotificationServiceTest {

    @InjectMocks
    CustomerNotificationService customerNotificationService;

    @Mock
    AccountClient accountClient;

    @Mock
    CustomerNotificationProducer notificationProducer;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    // Test metotları buraya gelecek
	
	@Test
	void testSendToNotificationQueue_Success() throws AccountException {
		// Arrange
		CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
		cashTransactionDTO.setCreateDate(new Date());
		cashTransactionDTO.setBranchCode("123");
		cashTransactionDTO.setCreatedBy("testUser");
		cashTransactionDTO.setUpdatedBy("testUser");

		CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
		storedRequest.setCheckedFlexibleAccount(Boolean.TRUE);
		storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
		storedRequest.setClientInfo(new ClientDTO());

		CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
		detailDTO.setTransactionId("txn123");
		detailDTO.setAccountNo("acc123");
		detailDTO.setAccountCurrency("TRY");
		detailDTO.setCurrency("TRY");
		detailDTO.setAmount(BigDecimal.valueOf(1000));
		detailDTO.setCashTransactionStoredRequest(storedRequest);
		detailDTO.setCommissionAmount(BigDecimal.ZERO);

		List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

		BalanceDTO balanceDTO = new BalanceDTO();
		balanceDTO.setAvailableBalance("5000");
		balanceDTO.setOverdraftBalance(BigDecimal.valueOf(10000));

		ResponseBalanceInfo balanceInfo = new ResponseBalanceInfo();
		balanceInfo.setBalanceDTO(balanceDTO);

		ResponseEntity<ResponseBalanceInfo> responseBalanceInfo = ResponseEntity.ok(balanceInfo);

		ResponseAccountNumberWithCurrencyClient accountNumberResponse = new ResponseAccountNumberWithCurrencyClient();
		accountNumberResponse.setIban("TRXXXXXX");

		ResponseEntity<ResponseAccountNumberWithCurrencyClient> accountNumberEntity = ResponseEntity.ok(accountNumberResponse);

		// Mocking AccountClient methods
		when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenReturn(responseBalanceInfo);
		when(accountClient.accountNumberWithCurrency(anyString())).thenReturn(accountNumberEntity);

		// Act
		customerNotificationService.sendToNotificationQueue(cashTransactionDTO, detailDTOList);

		// Assert
		verify(notificationProducer, times(1)).sendMessageToNotificationQueue(any(CustomerNotificationDTO.class));
	}
	
	
	@Test
	void testSendToNotificationQueue_AccountException() {
		// Arrange
		CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
		List<CashTransactionDetailDTO> detailDTOList = new ArrayList<>();

		CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
		storedRequest.setCheckedFlexibleAccount(Boolean.TRUE);
		storedRequest.setClientInfo(new ClientDTO());

		CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
		detailDTO.setAccountNo("acc123");
		detailDTO.setCashTransactionStoredRequest(storedRequest);
		detailDTOList.add(detailDTO);

		// Mocking AccountClient to throw MicroException
		when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenThrow(new MicroException("Error"));

		// Act & Assert
		assertThrows(AccountException.class, () -> {
			customerNotificationService.sendToNotificationQueue(cashTransactionDTO, detailDTOList);
		});
	}


	@Test
	void testGetParameters_Success() throws AccountException {
		// Arrange
		CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
		cashTransactionDTO.setCreateDate(new Date());
		cashTransactionDTO.setBranchCode("123");
		cashTransactionDTO.setCreatedBy("testUser");
		cashTransactionDTO.setUpdatedBy("testUser");

		CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
		storedRequest.setCheckedFlexibleAccount(Boolean.TRUE);
		storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
		storedRequest.setClientInfo(new ClientDTO());

		CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
		detailDTO.setTransactionId("txn123");
		detailDTO.setAccountNo("acc123");
		detailDTO.setAccountCurrency("TRY");
		detailDTO.setCurrency("TRY");
		detailDTO.setAmount(BigDecimal.valueOf(1000));
		detailDTO.setCashTransactionStoredRequest(storedRequest);
		detailDTO.setCommissionAmount(BigDecimal.ZERO);

		List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

		BalanceDTO balanceDTO = new BalanceDTO();
		balanceDTO.setAvailableBalance("5000");
		balanceDTO.setOverdraftBalance(BigDecimal.valueOf(10000));

		ResponseBalanceInfo balanceInfo = new ResponseBalanceInfo();
		balanceInfo.setBalanceDTO(balanceDTO);

		ResponseEntity<ResponseBalanceInfo> responseBalanceInfo = ResponseEntity.ok(balanceInfo);

		ResponseAccountNumberWithCurrencyClient accountNumberResponse = new ResponseAccountNumberWithCurrencyClient();
		accountNumberResponse.setIban("TRXXXXXX");

		ResponseEntity<ResponseAccountNumberWithCurrencyClient> accountNumberEntity = ResponseEntity.ok(accountNumberResponse);

		// Mocking AccountClient methods
		when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenReturn(responseBalanceInfo);
		when(accountClient.accountNumberWithCurrency(anyString())).thenReturn(accountNumberEntity);

		// Act
		CustomerNotificationDTO result = customerNotificationService.getParameters(cashTransactionDTO, detailDTOList);

		// Assert
		assertNotNull(result);
		assertNotNull(result.getTransactionHeader());
		assertNotNull(result.getTransactionDetails());
		assertEquals(7, result.getTransactionDetails().size()); // Beklenen parametre sayısı
	}

	@Test
	void testSendToNotificationQueue_NullDetailList() {
		// Arrange
		CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();

		// Act & Assert
		assertThrows(NullPointerException.class, () -> {
			customerNotificationService.sendToNotificationQueue(cashTransactionDTO, null);
		});
	}

}
