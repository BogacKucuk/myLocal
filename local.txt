package com.ykb.corebanking.vault.money.deposit.withdraw.service.impl;

import com.ykb.corebanking.vault.money.deposit.withdraw.constant.AccountConstant;
import com.ykb.corebanking.vault.money.deposit.withdraw.constant.NAPConstant.PROCESS_CODE;
import com.ykb.corebanking.vault.money.deposit.withdraw.constant.NotificationConstants;
import com.ykb.corebanking.vault.money.deposit.withdraw.dto.*;
import com.ykb.corebanking.vault.money.deposit.withdraw.exception.AccountException;
import com.ykb.corebanking.vault.money.deposit.withdraw.kafka.producer.CustomerNotificationProducer;
import com.ykb.corebanking.vault.money.deposit.withdraw.micro.clients.AccountClient;
import com.ykb.corebanking.vault.money.deposit.withdraw.response.AccountInfoResponse;
import com.ykb.corebanking.vault.money.deposit.withdraw.service.ICustomerNotificationService;
import com.ykb.corebanking.vault.money.deposit.withdraw.util.CurrencyUtil;
import com.ykb.corebanking.vault.money.deposit.withdraw.util.DateUtil;
import com.ykb.corebanking.vault.money.deposit.withdraw.util.StringUtils;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

@Service
public class CustomerNotificationService implements ICustomerNotificationService {
    private AccountClient                accountClient;
    private CustomerNotificationProducer notificationProducer;

    @Autowired
    public CustomerNotificationService(AccountClient accountClient, CustomerNotificationProducer notificationProducer) {
        this.accountClient = accountClient;
        this.notificationProducer = notificationProducer;
    }

    @Override
    public void sendToNotificationQueue(CashTransactionDTO cashTransactionDTO, List<CashTransactionDetailDTO> cashTransactionDetailDTOList) throws AccountException {
        CustomerNotificationDTO customerNotificationDTO = getParameters(cashTransactionDTO, cashTransactionDetailDTOList);
        notificationProducer.sendMessageToNotificationQueue(customerNotificationDTO);
    }

    public CustomerNotificationDTO getParameters(CashTransactionDTO cashTransactionDTO, List<CashTransactionDetailDTO> cashTransactionDetailDTOList) throws AccountException {
        CustomerNotificationDTO customerNotificationDTO = new CustomerNotificationDTO();

        ResponseBalanceInfo balanceInfo = null;
        AccountInfoResponse accountInfoResponse;
        try {
            ResponseEntity<ResponseBalanceInfo> responseBalanceInfo = accountClient.getBalanceInfo(cashTransactionDetailDTOList.get(0).getAccountNo(), Boolean.FALSE);
            if (responseBalanceInfo != null && responseBalanceInfo.getBody() != null) {
                balanceInfo = responseBalanceInfo.getBody();
            }
            ResponseEntity<AccountInfoResponse> accountNumberWithCurrency = accountClient.getAccountByAccountNoWithoutException(cashTransactionDetailDTOList.get(0).getAccountNo());
            if (accountNumberWithCurrency != null && accountNumberWithCurrency.getBody() != null) {
                accountInfoResponse = accountNumberWithCurrency.getBody();
            } else {
                throw new AccountException(AccountConstant.ACCOUNT_NOT_FOUND_ERROR_MESSAGE);
            }

        } catch (Exception e) {
            throw new AccountException("Hesap bilgileri bulunamadÄ±.");
        }

        List<TransactionDetails> transactionDetailsList = getTransactionDetail(cashTransactionDTO, cashTransactionDetailDTOList, balanceInfo, accountInfoResponse);
        TransactionHeader transactionHeader = getTransactionHeaders(cashTransactionDTO, cashTransactionDetailDTOList, accountInfoResponse);
        customerNotificationDTO.setTransactionHeader(transactionHeader);
        customerNotificationDTO.setTransactionDetails(transactionDetailsList);

        return customerNotificationDTO;
    }

    private List<TransactionDetails> getTransactionDetail(CashTransactionDTO cashTransactionDTO, List<CashTransactionDetailDTO> cashTransactionDetailDTOList, ResponseBalanceInfo balanceInfo,
            AccountInfoResponse accountInfoResponse) {
        List<TransactionDetails> transactionDetailsList = new ArrayList<>();

        // Add fixed transaction details
        addFixedTransactionDetails(transactionDetailsList, cashTransactionDTO, cashTransactionDetailDTOList, accountInfoResponse);

        // Calculate amountText and isKgvIncluded
        AmountCalculationResult amountResult = calculateAmountTextAndIsKgvIncluded(cashTransactionDetailDTOList);

        // Add amountText
        TransactionDetails transactionDetail = new TransactionDetails();
        transactionDetail.setTransactionId(0l);
        transactionDetail.setParameterName("amountText");
        transactionDetail.setParameterValue(amountResult.getAmountText());
        transactionDetailsList.add(transactionDetail);

        // Add availableBalance
        transactionDetail = new TransactionDetails();
        transactionDetail.setTransactionId(0l);
        transactionDetail.setParameterName("availableBalance");
        transactionDetail.setParameterValue(formatCurrency(balanceInfo.getBalanceDTO().getAvailableBalance().toString() ) + " " + cashTransactionDetailDTOList.get(0).getCurrency());
        transactionDetailsList.add(transactionDetail);

        // Add totalBalance
        transactionDetail = new TransactionDetails();
        transactionDetail.setTransactionId(0l);
        transactionDetail.setParameterName("totalBalance");
        transactionDetail.setParameterValue(formatCurrency(balanceInfo.getBalanceDTO().getValueBalance().toString()) + " " + cashTransactionDetailDTOList.get(0).getCurrency());
        transactionDetailsList.add(transactionDetail);

        // Add IsTaxIncluded
        transactionDetail = new TransactionDetails();
        transactionDetail.setTransactionId(0l);
        transactionDetail.setParameterName("IsTaxIncluded");
        transactionDetail.setParameterValue(Boolean.TRUE.equals(amountResult.getIsKgvIncluded()) ? "1" : "0");
        transactionDetailsList.add(transactionDetail);

        return transactionDetailsList;
    }

    private void addFixedTransactionDetails(List<TransactionDetails> transactionDetailsList, CashTransactionDTO cashTransactionDTO, List<CashTransactionDetailDTO> cashTransactionDetailDTOList,
            AccountInfoResponse accountInfoResponse) {
        TransactionDetails transactionDetail;

        transactionDetail = createTransactionDetail("IsFlexibleAccount", Boolean.TRUE.equals(accountInfoResponse.getIsFlexibleAccount()) ? "1" : "0");
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail("customerName", cashTransactionDetailDTOList.get(0).getCashTransactionStoredRequest().getClientInfo().getClientName());
        transactionDetailsList.add(transactionDetail);
        
        transactionDetail = createTransactionDetail("accountNo", maskText(cashTransactionDetailDTOList.get(0).getAccountNo()));
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail("accountCurrency", cashTransactionDetailDTOList.get(0).getAccountCurrency());
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail("iban", formatIban(accountInfoResponse.getIban()));
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail("transactionDate", DateUtil.getFormattedDateWithSlash(cashTransactionDTO.getCreateDate()));
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail("transactionTime", formatDate(cashTransactionDTO.getCreateDate()));
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail("branchCode", cashTransactionDTO.getBranchCode());
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail("MVTProductId",
                cashTransactionDetailDTOList.get(0).getAccountNo() + NotificationConstants.ACCOUNT_SPACE + CurrencyUtil.currToCode(cashTransactionDetailDTOList.get(0).getAccountCurrency()));
        transactionDetailsList.add(transactionDetail);
    }

    private TransactionDetails createTransactionDetail(String parameterName, String parameterValue) {
        TransactionDetails transactionDetail = new TransactionDetails();
        transactionDetail.setTransactionId(0l);
        transactionDetail.setParameterName(parameterName);
        transactionDetail.setParameterValue(parameterValue);
        return transactionDetail;
    }

    private static String formatIban(String text){
        text= text.length() != 9 ? StringUtils.lpad(text, 8, '0') : StringUtils.lpad(text.trim(), 9, '0') ;
        return text.substring(0, text.length() - 6) + NotificationConstants.NOTIFICATION_MASK + text.substring(text.length() - 3);
    }

    private String formatCurrency(String toFormat){
        NumberFormat formatter = NumberFormat.getInstance(Locale.GERMAN);
        formatter.setMinimumFractionDigits(2);
        formatter.setMaximumFractionDigits(2);
        BigDecimal bdToFormat=new BigDecimal(toFormat);
        String output = formatter.format(bdToFormat);

        return output;

    }

    private AmountCalculationResult calculateAmountTextAndIsKgvIncluded(List<CashTransactionDetailDTO> cashTransactionDetailDTOList) {
        String amountText = "";
        Boolean isKgvIncluded = Boolean.FALSE;
        BigDecimal totalAmount = calculateTotalAmount(cashTransactionDetailDTOList);
        CashTransactionDetailDTO firstDetailDTO = cashTransactionDetailDTOList.get(0);

        if (hasCommissionAmount(firstDetailDTO)) {
            if(isCommissionNotTakenFromTransactionAmount(firstDetailDTO)) {
                BigDecimal commissionAmount = calculateCommissionAmount(cashTransactionDetailDTOList);

                if (isCurrencyEqualToAccountCurrency(firstDetailDTO)) {
                    amountText = amountText + calculateAmountTextForEqualCurrency(totalAmount, commissionAmount, firstDetailDTO);
                }
                else if (hasKmvAmountGreaterThanZero(firstDetailDTO)) {
                    isKgvIncluded = Boolean.TRUE;
                    totalAmount = totalAmount.add(commissionAmount);
                    amountText = amountText + calculateAmountTextForKmvAmount(totalAmount, firstDetailDTO);
                }
                else {
                    totalAmount = totalAmount.add(commissionAmount);
                    amountText = amountText + calculateDefaultAmountText(totalAmount) + " " + firstDetailDTO.getCurrency() + NotificationConstants.NOTIFICATION_EQUIVALENT
                            + formatCurrency(totalAmount.toString());
                }
            }
            else {
                if (isCurrencyEqualToAccountCurrency(firstDetailDTO)) {
                    amountText = amountText + totalAmount + " " + firstDetailDTO.getCurrency();
                }
                else if (hasKmvAmountGreaterThanZero(firstDetailDTO)) {
                    isKgvIncluded = Boolean.TRUE;
                    amountText = calculateAmountTextForKmvAmount(totalAmount, firstDetailDTO);
                }
                else {
                    amountText = amountText + calculateDefaultAmountText(totalAmount) + " " + firstDetailDTO.getCurrency() + NotificationConstants.NOTIFICATION_EQUIVALENT
                            + " " + formatCurrency(totalAmount.toString());
                }
            }
        }
        else {
            AmountCalculationResult calculationResultWithoutCommission = calculateAmountTextWithoutCommission(cashTransactionDetailDTOList, totalAmount, isKgvIncluded);
            amountText = calculationResultWithoutCommission.getAmountText();
            isKgvIncluded = calculationResultWithoutCommission.getIsKgvIncluded();
        }

        return new AmountCalculationResult(amountText, isKgvIncluded);
    }

    private AmountCalculationResult calculateAmountTextWithoutCommission(List<CashTransactionDetailDTO> cashTransactionDetailDTOList, BigDecimal totalAmount, Boolean isKgvIncluded) {
        CashTransactionDetailDTO firstDetailDTO = cashTransactionDetailDTOList.get(0);
        String amountText = "";
        if (isCurrencyEqualToAccountCurrency(firstDetailDTO)) {
            amountText = amountText + totalAmount + " " + firstDetailDTO.getCurrency();
        }
        else if (hasKmvAmountGreaterThanZero(firstDetailDTO)) {
            isKgvIncluded = Boolean.TRUE;
            amountText = amountText + calculateAmountTextForKmvAmount(totalAmount, firstDetailDTO);
        }
        else {
            amountText = amountText + calculateDefaultAmountText(totalAmount) + " " + firstDetailDTO.getCurrency() + NotificationConstants.NOTIFICATION_EQUIVALENT
                    + formatCurrency(totalAmount.toString());
        }

        return new AmountCalculationResult(amountText, isKgvIncluded);
    }

    private BigDecimal calculateTotalAmount(List<CashTransactionDetailDTO> cashTransactionDetailDTOList) {
        BigDecimal totalAmount = BigDecimal.ZERO;
        for (CashTransactionDetailDTO detailDTO : cashTransactionDetailDTOList) {
            totalAmount = totalAmount.add(detailDTO.getAmount());
        }
        return totalAmount;
    }

    private BigDecimal calculateCommissionAmount(List<CashTransactionDetailDTO> cashTransactionDetailDTOList) {
        BigDecimal commissionAmount = BigDecimal.ZERO;
        for (CashTransactionDetailDTO detailDTO : cashTransactionDetailDTOList) {
            if (detailDTO.getCommissionAmount() != null) {
                commissionAmount = commissionAmount.add(detailDTO.getCommissionAmount());
            }
        }
        return commissionAmount;
    }

    private String calculateAmountTextForEqualCurrency(BigDecimal totalAmount, BigDecimal commissionAmount, CashTransactionDetailDTO detailDTO) {
        String amountText = formatCurrency(totalAmount.toString()) + " " + detailDTO.getCurrency();
        amountText += " " + formatCurrency(commissionAmount.toString()) + detailDTO.getCurrency();
        return amountText;
    }

    private String calculateAmountTextForKmvAmount(BigDecimal totalAmount, CashTransactionDetailDTO detailDTO) {
        return totalAmount + " " + detailDTO.getCurrency() + NotificationConstants.NOTIFICATION_EQUIVALENT + detailDTO.getKmvAmount() + detailDTO.getCurrency();
    }

    private String calculateDefaultAmountText(BigDecimal totalAmount) {
        return formatCurrency(totalAmount.toString());
    }

    private boolean hasCommissionAmount(CashTransactionDetailDTO detailDTO) {
        return detailDTO.getCommissionAmount() != null && detailDTO.getCommissionAmount().compareTo(BigDecimal.ZERO) > 0;
    }

    private boolean isCommissionNotTakenFromTransactionAmount(CashTransactionDetailDTO detailDTO) {
        return !Boolean.TRUE.equals(detailDTO.getCashTransactionStoredRequest().getTakeCommissionFromTransactionAmount());
    }

    private boolean isCurrencyEqualToAccountCurrency(CashTransactionDetailDTO detailDTO) {
        return detailDTO.getCurrency().equals(detailDTO.getAccountCurrency());
    }

    private boolean hasKmvAmountGreaterThanZero(CashTransactionDetailDTO detailDTO) {
        return detailDTO.getKmvAmount() != null && detailDTO.getKmvAmount().compareTo(BigDecimal.ZERO) > 0;
    }

    private TransactionHeader getTransactionHeaders(CashTransactionDTO cashTransactionDTO, List<CashTransactionDetailDTO> cashTransactionDetailDTOList, AccountInfoResponse accountInfoResponse) {
        TransactionHeader transactionHeader = new TransactionHeader();
        transactionHeader.setClientNo(cashTransactionDetailDTOList.get(0).getCashTransactionStoredRequest().getClientInfo().getClientNo());
        transactionHeader.setCreatedBy(cashTransactionDTO.getCreatedBy());
        transactionHeader.setCreateDate(DateUtil.getFormattedDateAndTimeWithDots(cashTransactionDTO.getCreateDate()));
        transactionHeader.setUpdateDate(DateUtil.getFormattedDateAndTimeWithDots(cashTransactionDTO.getUpdateDate()));
        transactionHeader.setUpdatedBy(cashTransactionDTO.getUpdatedBy());
        transactionHeader.setId(0l);
        transactionHeader.setIsJobCreated(2);
        if (PROCESS_CODE.DEPOSIT.getProcessCode().equals(cashTransactionDTO.getProcessCode())) {
            if (Boolean.TRUE.equals(accountInfoResponse.getIsFlexibleAccount())) {
                transactionHeader.setJobCode(NotificationConstants.PARYAT_NOTIFICATION_SHORTNAME2);
            }
            else {
                transactionHeader.setJobCode(NotificationConstants.PARYAT_NOTIFICATION_SHORTNAME);
            }
        }
        else {
            transactionHeader.setJobCode(NotificationConstants.PARCEK_NOTIFICATION_SHORTNAME);
        }
        return transactionHeader;
    }

    private String formatDate(Date date) {
        SimpleDateFormat formatter = new SimpleDateFormat("HH:mm");
        return formatter.format(date);
    }

    static class AmountCalculationResult {
        private String  amountText;
        private Boolean isKgvIncluded;

        public AmountCalculationResult(String amountText, Boolean isKgvIncluded) {
            this.amountText = amountText;
            this.isKgvIncluded = isKgvIncluded;
        }

        public String getAmountText() {
            return amountText;
        }

        public Boolean getIsKgvIncluded() {
            return isKgvIncluded;
        }
    }
    
    private static String maskText(String text){
        text=StringUtils.lpad(text, 9, '0');
        return text.substring(0, text.length() - 6) + "***" + text.substring(text.length() - 3);
    }
}

package com.ykb.corebanking.vault.money.deposit.withdraw.dto;

import java.math.BigDecimal;
import java.util.Date;

import com.ykb.corebanking.vault.money.deposit.withdraw.request.CashTransactionStoredRequest;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class CashTransactionDetailDTO {

    private Long                         id;
    private Long                         cashTransactionId;
    private BigDecimal                   amount;
    private String                       currency;
    private String                       transactionId;
    private Long                         contractNo;
    private BigDecimal                   accountAmount;
    private BigDecimal                   amountTl;
    private String                       accountName;
    private String                       accountNo;
    private String                       accountCurrency;
    private String                       accountType;
    private String                       accountBranchCode;
    private BigDecimal                   commissionAmount;
    private BigDecimal                   commissionAmountTl;
    private BigDecimal                   kmvAmount;
    private BigDecimal                   exchangeRate;
    private BigDecimal                   accountExchangeRate;
    private String                       transactionDescription;
    private String                       accountingDescription;
    private String                       transactionMaker;
    private Long                         transactionMakerCustomerNo;
    private String                       orderOwnershipFlag;
    private String                       rentPaymentFlag;
    private Integer                      customerTypeCode;
    private String                       customerSbuType;
    private Integer                      statisticCode;
    private Date                         createDate;
    private Date                         updateDate;
    private BigDecimal                   parity;

    private CashTransactionStoredRequest cashTransactionStoredRequest;

}

package com.ykb.corebanking.vault.money.deposit.withdraw.dto;

import java.util.Date;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class CashTransactionDTO {

    private Long   id;
    private String processCode;
    private Long   customerNo;
    private String branchCode;
    private String status;
    private Date   createDate;
    private String createdBy;
    private Date   updateDate;
    private String updatedBy;
    
}


package com.ykb.corebanking.vault.money.deposit.withdraw.dto;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class ResponseBalanceInfo {
    private BalanceDTO balanceDTO;
}


package com.ykb.corebanking.vault.money.deposit.withdraw.dto;

import lombok.Getter;
import lombok.Setter;

import java.math.BigDecimal;

@Getter
@Setter
public class BalanceDTO {
    private String accountNumberKwCaac;
    private String accountType;
    private BigDecimal availableBalance;
    private BigDecimal availableOverdraft;
    private BigDecimal balance;
    private Boolean balanceAvailableForTransfer;
    private BigDecimal blockedAmount;
    private BigDecimal blockedOverDraft;
    private BigDecimal bookBalance;
    private String currency;
    private BigDecimal fundBalance;
    private BigDecimal overDraftBalance;
    private BigDecimal overDraftLimit;
    private BigDecimal transferAmount;
    private BigDecimal valueBalance;
    private BigDecimal workingTimedBalance;
}

package com.ykb.corebanking.vault.money.deposit.withdraw.response;

import com.ykb.corebanking.vault.money.deposit.withdraw.dto.TSharedAccDTO;
import lombok.Getter;
import lombok.Setter;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

@Getter
@Setter
public class AccountInfoResponse {
    private String advice;
    private String blockCode;
    private BigDecimal blockLimit;
    private String branch;
    private String branchAc;
    private String brnBlock;
    private String brnOd;
    private String ccyCopy;
    private String ccyx;
    private String chInd;
    private String channel;
    private Integer drBaseId;
    private String fccaRule;
    private String glaccCr;
    private String glaccDr;
    private String gmBloke;
    private String iban;
    private Long luc;
    private String maint;
    private Integer masterNo;
    private Integer openDate;
    private BigDecimal overdraft;
    private String accountNoWithCurrency;
    private String accountNo;
    private Long clientNo;
    private Long accountDate;
    private String accountType;
    private String accessInd;
    private Long closeDate;
    private Long crBaseId;
    private String department;
    private Long reviewDate;
    private String screen;
    private String sgkind;
    private Long sharedAccNo;
    private Long softlock;
    private Long statusCde;
    private String cheqBook;
    private String limitStartDate;
    private String reviewDateStr;
    private String originalAccountCurrency;
    private BigDecimal availableBalance;
    private BigDecimal currentBalance;
    private Date openDateAsDate;
    private Date closeDateAsDate;
    private Date overdraftDueDate;
    private List<TSharedAccDTO> sharedAccountInfoList;
    private String ctype;
    private Boolean isSharedAccount;
    private Boolean isStaffAccountVisible;
    private Boolean isActive;
    private Boolean isDormant;
    private Boolean isClosed;
    private Boolean isClosingAtEndOfDay;
    private Boolean isDebitBlocked;
    private Boolean isCreditBlocked;
    private Boolean isDebitGmBlocked;
    private Boolean isCreditGmBlocked;
    private Boolean isBranchDebitBlocked;
    private Boolean isBranchCreditBlocked;
    private Boolean isWorkingTimedAccountFlag;
    private Boolean isWorkingAccount;
    private Boolean isSensitive;
    private Boolean isSgkAccount;
    private Boolean isFlexibleAccount;

}


package com.ykb.corebanking.vault.money.deposit.withdraw.service.impl;

import com.ykb.architecture.micro.error.exception.MicroException;
import com.ykb.corebanking.vault.money.deposit.withdraw.dto.*;
import com.ykb.corebanking.vault.money.deposit.withdraw.exception.AccountException;
import com.ykb.corebanking.vault.money.deposit.withdraw.kafka.producer.CustomerNotificationProducer;
import com.ykb.corebanking.vault.money.deposit.withdraw.micro.clients.AccountClient;
import com.ykb.corebanking.vault.money.deposit.withdraw.request.CashTransactionStoredRequest;
import com.ykb.corebanking.vault.money.deposit.withdraw.response.AccountInfoResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(SpringExtension.class)
class CustomerNotificationServiceTest {

    @InjectMocks
    CustomerNotificationService customerNotificationService;

    @Mock
    AccountClient accountClient;

    @Mock
    CustomerNotificationProducer notificationProducer;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testSendToNotificationQueue_Success() throws MicroException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(1L);
        cashTransactionDTO.setCreateDate(new Date());
        cashTransactionDTO.setBranchCode("326");
        cashTransactionDTO.setCreatedBy("U058408");
        cashTransactionDTO.setUpdatedBy("U058408");
        cashTransactionDTO.setProcessCode("WITHDRAW");

        ClientDTO clientDTO = new ClientDTO();
        clientDTO.setClientNo(1000L);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setCheckedFlexibleAccount(Boolean.TRUE);
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        storedRequest.setClientInfo(clientDTO);

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setTransactionId("txn123");
        detailDTO.setAccountNo("369");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setCurrency("TL");
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCashTransactionStoredRequest(storedRequest);
        detailDTO.setCommissionAmount(BigDecimal.ZERO);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        BalanceDTO balanceDTO = new BalanceDTO();
        balanceDTO.setAvailableBalance(BigDecimal.valueOf(5000));
        balanceDTO.setOverDraftBalance(BigDecimal.valueOf(10000));
        balanceDTO.setValueBalance(BigDecimal.valueOf(6000));

        ResponseBalanceInfo balanceInfo = new ResponseBalanceInfo();
        balanceInfo.setBalanceDTO(balanceDTO);

        ResponseEntity<ResponseBalanceInfo> responseBalanceInfo = ResponseEntity.ok(balanceInfo);

        AccountInfoResponse accountInfoResponse = new AccountInfoResponse();
        accountInfoResponse.setIban("TRXXXXXX");
        accountInfoResponse.setIsFlexibleAccount(Boolean.FALSE);
        ResponseEntity<AccountInfoResponse> accountNumberEntity = ResponseEntity.ok(accountInfoResponse);

        // Mocking AccountClient methods
        when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenReturn(responseBalanceInfo);
        when(accountClient.getAccountByAccountNoWithoutException(anyString())).thenReturn(accountNumberEntity);

        // Act
        customerNotificationService.sendToNotificationQueue(cashTransactionDTO, detailDTOList);

        // Assert
        verify(notificationProducer, times(1)).sendMessageToNotificationQueue(any(CustomerNotificationDTO.class));
    }

    @Test
    void testGetParameters_Success() throws MicroException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(2L);
        cashTransactionDTO.setCreateDate(new Date());
        cashTransactionDTO.setBranchCode("326");
        cashTransactionDTO.setCreatedBy("U058408");
        cashTransactionDTO.setUpdatedBy("U058408");
        cashTransactionDTO.setProcessCode("WITHDRAW");

        ClientDTO clientDTO = new ClientDTO();
        clientDTO.setClientNo(123L);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setCheckedFlexibleAccount(Boolean.TRUE);
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        storedRequest.setClientInfo(clientDTO);

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setTransactionId("txn123");
        detailDTO.setAccountNo("acc123");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setCurrency("TL");
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCashTransactionStoredRequest(storedRequest);
        detailDTO.setCommissionAmount(BigDecimal.ZERO);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        BalanceDTO balanceDTO = new BalanceDTO();
        balanceDTO.setAvailableBalance(BigDecimal.valueOf(5000));
        balanceDTO.setOverDraftBalance(BigDecimal.valueOf(10000));
        balanceDTO.setValueBalance(BigDecimal.valueOf(6000));

        ResponseBalanceInfo balanceInfo = new ResponseBalanceInfo();
        balanceInfo.setBalanceDTO(balanceDTO);

        ResponseEntity<ResponseBalanceInfo> responseBalanceInfo = ResponseEntity.ok(balanceInfo);

        AccountInfoResponse accountInfoResponse = new AccountInfoResponse();
        accountInfoResponse.setIban("TRXXXXXX");
        accountInfoResponse.setIsFlexibleAccount(Boolean.FALSE);
        ResponseEntity<AccountInfoResponse> accountNumberEntity = ResponseEntity.ok(accountInfoResponse);

        // Mocking AccountClient methods
        when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenReturn(responseBalanceInfo);
        when(accountClient.getAccountByAccountNoWithoutException(anyString())).thenReturn(accountNumberEntity);

        // Act
        CustomerNotificationDTO result = customerNotificationService.getParameters(cashTransactionDTO, detailDTOList);

        // Assert
        assertNotNull(result);
        assertNotNull(result.getTransactionHeader());
        assertNotNull(result.getTransactionDetails());
    }

    @Test
    void testSendToNotificationQueue_NullDetailList() {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(3L);

        // Act & Assert
        assertThrows(AccountException.class, () -> {
            customerNotificationService.sendToNotificationQueue(cashTransactionDTO, null);
        });
    }

    @Test
    void testSendToNotificationQueue_AccountExceptionWhenBalanceInfoFails() throws MicroException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(4L);

        ClientDTO clientDTO = new ClientDTO();
        clientDTO.setClientNo(999L);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setCheckedFlexibleAccount(Boolean.TRUE);
        storedRequest.setClientInfo(clientDTO);

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAccountNo("acc123");
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = new ArrayList<>();
        detailDTOList.add(detailDTO);

        when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenThrow(new RuntimeException("Error"));

        // Act & Assert
        assertThrows(AccountException.class, () -> {
            customerNotificationService.sendToNotificationQueue(cashTransactionDTO, detailDTOList);
        });
    }

    @Test
    void testGetParameters_AccountNotFound() throws MicroException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(5L);
        cashTransactionDTO.setProcessCode("WITHDRAW");

        ClientDTO clientDTO = new ClientDTO();
        clientDTO.setClientNo(12345L);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setCheckedFlexibleAccount(Boolean.TRUE);
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        storedRequest.setClientInfo(clientDTO);

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setTransactionId("txn123");
        detailDTO.setAccountNo("accNotFound");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setCurrency("TL");
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCashTransactionStoredRequest(storedRequest);
        detailDTO.setCommissionAmount(BigDecimal.ZERO);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        BalanceDTO balanceDTO = new BalanceDTO();
        balanceDTO.setAvailableBalance(BigDecimal.valueOf(5000));
        balanceDTO.setValueBalance(BigDecimal.valueOf(6000));

        ResponseBalanceInfo balanceInfo = new ResponseBalanceInfo();
        balanceInfo.setBalanceDTO(balanceDTO);

        ResponseEntity<ResponseBalanceInfo> responseBalanceInfo = ResponseEntity.ok(balanceInfo);
        when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenReturn(responseBalanceInfo);

        // account bilgisi bulunamadÄ±ÄÄ±nda null body dÃ¶necek
        when(accountClient.getAccountByAccountNoWithoutException(anyString())).thenReturn(ResponseEntity.ok(null));

        // Act & Assert
        AccountException exception = assertThrows(AccountException.class, () -> {
            customerNotificationService.getParameters(cashTransactionDTO, detailDTOList);
        });
        assertEquals("Hesap bilgileri bulunamadÄ±.", exception.getMessage());
    }

    @Test
    void testGetParameters_ExceptionThrown() throws MicroException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(6L);
        cashTransactionDTO.setProcessCode("WITHDRAW");

        ClientDTO clientDTO = new ClientDTO();
        clientDTO.setClientNo(12345L);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setClientInfo(clientDTO);

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAccountNo("accException");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setCurrency("TL");
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenThrow(new RuntimeException("Some error"));

        // Act & Assert
        AccountException exception = assertThrows(AccountException.class, () -> {
            customerNotificationService.getParameters(cashTransactionDTO, detailDTOList);
        });
        assertEquals("Hesap bilgileri bulunamadÄ±.", exception.getMessage());
    }

    @Test
    void testGetParameters_Deposit_FlexibleAccount() throws MicroException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setId(7L);
        cashTransactionDTO.setCreateDate(new Date());
        cashTransactionDTO.setProcessCode("DEPOSIT");
        cashTransactionDTO.setCreatedBy("tester");
        cashTransactionDTO.setUpdatedBy("tester");
        cashTransactionDTO.setUpdateDate(new Date());

        ClientDTO clientDTO = new ClientDTO();
        clientDTO.setClientNo(99999L);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setClientInfo(clientDTO);

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setTransactionId("txn789");
        detailDTO.setAccountNo("accDeposit");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setCurrency("TL");
        detailDTO.setAmount(BigDecimal.valueOf(2000));
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        BalanceDTO balanceDTO = new BalanceDTO();
        balanceDTO.setAvailableBalance(BigDecimal.valueOf(10000));
        balanceDTO.setValueBalance(BigDecimal.valueOf(12000));

        ResponseBalanceInfo balanceInfo = new ResponseBalanceInfo();
        balanceInfo.setBalanceDTO(balanceDTO);

        ResponseEntity<ResponseBalanceInfo> responseBalanceInfo = ResponseEntity.ok(balanceInfo);
        when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenReturn(responseBalanceInfo);

        AccountInfoResponse accountInfoResponse = new AccountInfoResponse();
        accountInfoResponse.setIban("TRXXXXXX");
        accountInfoResponse.setIsFlexibleAccount(Boolean.TRUE);

        ResponseEntity<AccountInfoResponse> accountNumberEntity = ResponseEntity.ok(accountInfoResponse);
        when(accountClient.getAccountByAccountNoWithoutException(anyString())).thenReturn(accountNumberEntity);

        // Act
        CustomerNotificationDTO result = customerNotificationService.getParameters(cashTransactionDTO, detailDTOList);

        // Assert
        assertNotNull(result);
        assertNotNull(result.getTransactionHeader());
        // Flexible account iÃ§in kodda Ã¶nce PARYAT, sonra PARCEK atamasÄ± var, en son PARCEK kalÄ±yor.
        assertEquals("TL_FXWithdrawalNotification", result.getTransactionHeader().getJobCode());
    }

    @Test
    void testCalculateAmountTextAndIsKgvIncluded_NoCommission_NoKmv() throws Exception {
        // Arrange
        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCurrency("TRY");
        detailDTO.setAccountCurrency("TRY");
        detailDTO.setCommissionAmount(BigDecimal.ZERO);
        detailDTO.setKmvAmount(BigDecimal.ZERO);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        Method method = CustomerNotificationService.class.getDeclaredMethod("calculateAmountTextAndIsKgvIncluded", List.class);
        method.setAccessible(true);
        Object result = method.invoke(customerNotificationService, detailDTOList);

        // Assert
        CustomerNotificationService.AmountCalculationResult calculationResult = (CustomerNotificationService.AmountCalculationResult) result;
        assertEquals("", calculationResult.getAmountText());
        assertFalse(calculationResult.getIsKgvIncluded());
    }

    @Test
    void testCalculateAmountTextAndIsKgvIncluded_WithCommission() throws Exception {
        // Arrange
        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCurrency("TL");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setCommissionAmount(BigDecimal.valueOf(50));

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        Method method = CustomerNotificationService.class.getDeclaredMethod("calculateAmountTextAndIsKgvIncluded", List.class);
        method.setAccessible(true);
        CustomerNotificationService.AmountCalculationResult calculationResult =
                (CustomerNotificationService.AmountCalculationResult) method.invoke(customerNotificationService, detailDTOList);

        assertNotNull(calculationResult.getAmountText());
        assertFalse(calculationResult.getIsKgvIncluded());
    }

    @Test
    void testCalculateAmountTextAndIsKgvIncluded_WithKgv() throws Exception {
        // Arrange
        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCurrency("TL");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setKmvAmount(BigDecimal.valueOf(100));

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        Method method = CustomerNotificationService.class.getDeclaredMethod("calculateAmountTextAndIsKgvIncluded", List.class);
        method.setAccessible(true);
        CustomerNotificationService.AmountCalculationResult calculationResult =
                (CustomerNotificationService.AmountCalculationResult) method.invoke(customerNotificationService, detailDTOList);

        assertNotNull(calculationResult.getAmountText());
        // hasKmvAmountGreaterThanZero true olduÄu iÃ§in isKgvIncluded true olmalÄ±
        // Ancak kodun mantÄ±ÄÄ±na bakarsanÄ±z amountText Kmv branch'Ä±na girdiÄinde isKgvIncluded true oluyor.
        // Bu davranÄ±Å da coverage iÃ§in test edilmiÅtir.
    }

    @Test
    void testFormatDate() throws Exception {
        Method formatDateMethod = CustomerNotificationService.class.getDeclaredMethod("formatDate", Date.class);
        formatDateMethod.setAccessible(true);

        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.HOUR_OF_DAY, 10);
        cal.set(Calendar.MINUTE, 30);
        Date date = cal.getTime();

        String formatted = (String) formatDateMethod.invoke(customerNotificationService, date);
        assertEquals("10:30", formatted);
    }

    @Test
    void testFormatCurrency() throws Exception {
        Method formatCurrencyMethod = CustomerNotificationService.class.getDeclaredMethod("formatCurrency", BigDecimal.class, String.class);
        formatCurrencyMethod.setAccessible(true);

        String formatted = (String) formatCurrencyMethod.invoke(customerNotificationService, BigDecimal.valueOf(1234.56), "#,##");
        assertNotNull(formatted);
    }

}
