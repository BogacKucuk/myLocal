package com.garantibbva.depositwithdrawalmngt.depositwithdrawalevent.service.impl;

import com.garanti.ark.base.logging.Logger;
import com.garanti.ark.base.logging.LoggerManager;
import com.garantibbva.depositwithdrawalmngt.depositwithdrawalevent.service.contract.DepositWithdrawEventService;
import com.garantibbva.depositwithdrawalmngt.depositwithdrawalevent.service.contract.model.DepositWithdrawEventRequestDto;
import org.springframework.stereotype.Service;

@Service
public class DepositWithdrawEventServiceImpl implements DepositWithdrawEventService {

  private final Logger logger;

  /** Spring için varsayılan ctor (public bırakıyoruz). */
  public DepositWithdrawEventServiceImpl() {
    this(LoggerManager.getLogger(DepositWithdrawEventServiceImpl.class));
  }

  /** Test kolaylığı için ikinci ctor (package-private). */
  DepositWithdrawEventServiceImpl(Logger logger) {
    this.logger = logger;
  }

  @Override
  public void consumeMessage(DepositWithdrawEventRequestDto requestDto) {
    // dummy amaçlı, sadece bir örnek nesne oluşturuyoruz (kullanılmıyor).
    DepositWithdrawEventRequestDto dummy = new DepositWithdrawEventRequestDto();

    // null güvenliği ile logla
    String text = (requestDto != null) ? requestDto.toString() : "null";
    logger.info(text);
  }
}


package com.garantibbva.depositwithdrawalmngt.depositwithdrawalevent.service.impl;

import com.garanti.ark.base.logging.Logger;
import com.garantibbva.depositwithdrawalmngt.depositwithdrawalevent.service.contract.model.DepositWithdrawEventRequestDto;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class DepositWithdrawEventServiceImplTest {

  @Mock
  Logger logger;

  @InjectMocks
  DepositWithdrawEventServiceImpl service; // package-private ctor ile enjekte edilir

  @Test
  void consumeMessage_logsDtoString_once_andDoesNotThrow() {
    // dto'yu mock'layıp toString sonucunu sabitliyoruz
    DepositWithdrawEventRequestDto dto = mock(DepositWithdrawEventRequestDto.class);
    when(dto.toString()).thenReturn("DTO_STRING");

    assertDoesNotThrow(() -> service.consumeMessage(dto));

    verify(logger, times(1)).info("DTO_STRING");
    verifyNoMoreInteractions(logger);
  }

  @Test
  void consumeMessage_withNull_logsNullSafely() {
    assertDoesNotThrow(() -> service.consumeMessage(null));

    verify(logger, times(1)).info("null");
    verifyNoMoreInteractions(logger);
  }
}

