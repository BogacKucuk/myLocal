package com.ykb.corebanking.vault.money.deposit.withdraw.service.impl;

import com.ykb.architecture.micro.error.exception.MicroException;
import com.ykb.corebanking.vault.money.deposit.withdraw.constant.AccountConstant;
import com.ykb.corebanking.vault.money.deposit.withdraw.constant.NotificationConstants;
import com.ykb.corebanking.vault.money.deposit.withdraw.dto.*;
import com.ykb.corebanking.vault.money.deposit.withdraw.exception.AccountException;
import com.ykb.corebanking.vault.money.deposit.withdraw.kafka.producer.CustomerNotificationProducer;
import com.ykb.corebanking.vault.money.deposit.withdraw.micro.clients.AccountClient;
import com.ykb.corebanking.vault.money.deposit.withdraw.response.AccountInfoResponse;
import com.ykb.corebanking.vault.money.deposit.withdraw.service.ICustomerNotificationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

@Service
public class CustomerNotificationService implements ICustomerNotificationService {
    private AccountClient accountClient;
    private CustomerNotificationProducer notificationProducer;

    @Autowired
    public CustomerNotificationService(AccountClient accountClient, CustomerNotificationProducer notificationProducer) {
        this.accountClient = accountClient;
        this.notificationProducer = notificationProducer;
    }

    @Override
    public void sendToNotificationQueue(CashTransactionDTO cashTransactionDTO, List<CashTransactionDetailDTO> cashTransactionDetailDTOList) throws AccountException {
        CustomerNotificationDTO customerNotificationDTO = getParameters(cashTransactionDTO, cashTransactionDetailDTOList);
        notificationProducer.sendMessageToNotificationQueue(customerNotificationDTO);
    }

    public CustomerNotificationDTO getParameters(CashTransactionDTO cashTransactionDTO, List<CashTransactionDetailDTO> cashTransactionDetailDTOList) throws AccountException {
        CustomerNotificationDTO customerNotificationDTO = new CustomerNotificationDTO();

        ResponseBalanceInfo balanceInfo = null;

        try {
            ResponseEntity<ResponseBalanceInfo> responseBalanceInfo = accountClient.getBalanceInfo(cashTransactionDetailDTOList.get(0).getAccountNo(), Boolean.FALSE);
            if (responseBalanceInfo != null && responseBalanceInfo.getBody() != null) {
                balanceInfo = responseBalanceInfo.getBody();
            }
        }
        catch (MicroException e) {
            throw new AccountException("Hesap bilgileri bulunamadÄ±.");
        }

        List<TransactionDetails> transactionDetailsList = getTransactionDetail(cashTransactionDTO, cashTransactionDetailDTOList, balanceInfo);
        TransactionHeader transactionHeader = getTransactionHeaders(cashTransactionDTO, cashTransactionDetailDTOList);
        customerNotificationDTO.setTransactionHeader(transactionHeader);
        customerNotificationDTO.setTransactionDetails(transactionDetailsList);

        return customerNotificationDTO;
    }

    private List<TransactionDetails> getTransactionDetail(CashTransactionDTO cashTransactionDTO, List<CashTransactionDetailDTO> cashTransactionDetailDTOList, ResponseBalanceInfo balanceInfo) throws AccountException {
        List<TransactionDetails> transactionDetailsList = new ArrayList<>();

        String iban = "";
        try {
            ResponseEntity<AccountInfoResponse> accountNumberWithCurrency = accountClient.getAccountByAccountNoWithoutException(cashTransactionDetailDTOList.get(0).getAccountNo());
            if (accountNumberWithCurrency != null && accountNumberWithCurrency.getBody() != null) {
                AccountInfoResponse accountInfoResponse = accountNumberWithCurrency.getBody();
                if(accountInfoResponse != null) {
                    iban = accountInfoResponse.getIban();
                }
                else {
                    throw new AccountException(AccountConstant.ACCOUNT_NOT_FOUND_ERROR_MESSAGE);
                }
            }
            else {
                throw new AccountException(AccountConstant.ACCOUNT_NOT_FOUND_ERROR_MESSAGE);
            }
        }
        catch (Exception e) {
            throw new AccountException(AccountConstant.ACCOUNT_NOT_FOUND_ERROR_MESSAGE);
        }

        // Add fixed transaction details
        addFixedTransactionDetails(transactionDetailsList, cashTransactionDTO, cashTransactionDetailDTOList, iban);

        // Calculate amountText and isKgvIncluded
        AmountCalculationResult amountResult = calculateAmountTextAndIsKgvIncluded(cashTransactionDetailDTOList);

        // Add amountText
        TransactionDetails transactionDetail = new TransactionDetails();
        transactionDetail.setTransactionId(cashTransactionDetailDTOList.get(0).getTransactionId());
        transactionDetail.setParameterName("amountText");
        transactionDetail.setParameterValue(amountResult.getAmountText());
        transactionDetailsList.add(transactionDetail);

        // Add availableBalance
        transactionDetail = new TransactionDetails();
        transactionDetail.setTransactionId(cashTransactionDetailDTOList.get(0).getTransactionId());
        transactionDetail.setParameterName("availableBalance");
        transactionDetail.setParameterValue(balanceInfo.getBalanceDTO().getAvailableBalance().toString());
        transactionDetailsList.add(transactionDetail);

        // Add totalBalance
        transactionDetail = new TransactionDetails();
        transactionDetail.setTransactionId(cashTransactionDetailDTOList.get(0).getTransactionId());
        transactionDetail.setParameterName("totalBalance");
        transactionDetail.setParameterValue(balanceInfo.getBalanceDTO().getValueBalance().toString());
        transactionDetailsList.add(transactionDetail);

        // Add IsTaxIncluded
        transactionDetail = new TransactionDetails();
        transactionDetail.setTransactionId(cashTransactionDetailDTOList.get(0).getTransactionId());
        transactionDetail.setParameterName("IsTaxIncluded");
        transactionDetail.setParameterValue(amountResult.getIsKgvIncluded().toString());
        transactionDetailsList.add(transactionDetail);

        return transactionDetailsList;
    }

    private void addFixedTransactionDetails(List<TransactionDetails> transactionDetailsList,
                                            CashTransactionDTO cashTransactionDTO,
                                            List<CashTransactionDetailDTO> cashTransactionDetailDTOList,
                                            String iban) {
        TransactionDetails transactionDetail;

        transactionDetail = createTransactionDetail(cashTransactionDetailDTOList.get(0).getTransactionId(),
                "IsFlexibleAccount",
                cashTransactionDetailDTOList.get(0).getCashTransactionStoredRequest().getCheckedFlexibleAccount());
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail(cashTransactionDetailDTOList.get(0).getTransactionId(),
                "customerName", null);
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail(cashTransactionDetailDTOList.get(0).getTransactionId(),
                "accountCurrency", cashTransactionDetailDTOList.get(0).getAccountCurrency());
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail(cashTransactionDetailDTOList.get(0).getTransactionId(), "iban", iban);
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail(cashTransactionDetailDTOList.get(0).getTransactionId(),
                "transactionDate", cashTransactionDTO.getCreateDate());
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail(cashTransactionDetailDTOList.get(0).getTransactionId(),
                "transactionTime", formatDate(cashTransactionDTO.getCreateDate()));
        transactionDetailsList.add(transactionDetail);

        transactionDetail = createTransactionDetail(cashTransactionDetailDTOList.get(0).getTransactionId(),
                "branchCode", cashTransactionDTO.getBranchCode());
        transactionDetailsList.add(transactionDetail);
    }

    private TransactionDetails createTransactionDetail(String transactionId, String parameterName,
                                                       Object parameterValue) {
        TransactionDetails transactionDetail = new TransactionDetails();
        transactionDetail.setTransactionId(transactionId);
        transactionDetail.setParameterName(parameterName);
        if(parameterValue != null) {
            transactionDetail.setParameterValue(parameterValue.toString());
        }
        else {
            transactionDetail.setParameterValue(null);
        }

        return transactionDetail;
    }

    private AmountCalculationResult calculateAmountTextAndIsKgvIncluded(List<CashTransactionDetailDTO> cashTransactionDetailDTOList) {
        String amountText = "";
        Boolean isKgvIncluded = Boolean.FALSE;
        BigDecimal totalAmount = calculateTotalAmount(cashTransactionDetailDTOList);
        CashTransactionDetailDTO firstDetailDTO = cashTransactionDetailDTOList.get(0);

        if (shouldCalculateAmountText(firstDetailDTO)) {
            BigDecimal commissionAmount = calculateCommissionAmount(cashTransactionDetailDTOList);

            if (isCurrencyEqualToAccountCurrency(firstDetailDTO)) {
                amountText = calculateAmountTextForEqualCurrency(totalAmount, commissionAmount, firstDetailDTO);
            }
            else if (hasKmvAmountGreaterThanZero(firstDetailDTO)) {
                isKgvIncluded = Boolean.TRUE;
                amountText = calculateAmountTextForKmvAmount(totalAmount, firstDetailDTO);
            }
            else {
                amountText = calculateDefaultAmountText(totalAmount);

                if (isCurrencyEqualToAccountCurrency(firstDetailDTO)) {
                    amountText += " " + firstDetailDTO.getAccountCurrency();
                }
                else if (hasKmvAmountGreaterThanZero(firstDetailDTO)) {
                    isKgvIncluded = Boolean.TRUE;
                    amountText = calculateAmountTextForKmvAmount(totalAmount, firstDetailDTO);
                }
            }
        }

        return new AmountCalculationResult(amountText, isKgvIncluded);
    }

    private boolean shouldCalculateAmountText(CashTransactionDetailDTO detailDTO) {
        return hasCommissionAmount(detailDTO) && isCommissionNotTakenFromTransactionAmount(detailDTO);
    }

    private BigDecimal calculateTotalAmount(List<CashTransactionDetailDTO> cashTransactionDetailDTOList) {
        BigDecimal totalAmount = BigDecimal.ZERO;
        for (CashTransactionDetailDTO detailDTO : cashTransactionDetailDTOList) {
            totalAmount = totalAmount.add(detailDTO.getAmount());
        }
        return totalAmount;
    }

    private BigDecimal calculateCommissionAmount(List<CashTransactionDetailDTO> cashTransactionDetailDTOList) {
        BigDecimal commissionAmount = BigDecimal.ZERO;
        for (CashTransactionDetailDTO detailDTO : cashTransactionDetailDTOList) {
            if (detailDTO.getCommissionAmount() != null) {
                commissionAmount = commissionAmount.add(detailDTO.getCommissionAmount());
            }
        }
        return commissionAmount;
    }

    private String calculateAmountTextForEqualCurrency(BigDecimal totalAmount, BigDecimal commissionAmount,
                                                       CashTransactionDetailDTO detailDTO) {
        String amountText = formatCurrency(totalAmount, "#,##") + " " + detailDTO.getCurrency();
        amountText += " " + formatCurrency(commissionAmount, "#,##") + detailDTO.getCurrency();
        return amountText;
    }

    private String calculateAmountTextForKmvAmount(BigDecimal totalAmount, CashTransactionDetailDTO detailDTO) {
        return totalAmount + " " + detailDTO.getCurrency() + NotificationConstants.NOTIFICATION_EQUIVALENT
                + detailDTO.getKmvAmount() + detailDTO.getCurrency();
    }

    private String calculateDefaultAmountText(BigDecimal totalAmount) {
        return formatCurrency(totalAmount, "#,##");
    }

    private boolean hasCommissionAmount(CashTransactionDetailDTO detailDTO) {
        return detailDTO.getCommissionAmount() != null && detailDTO.getCommissionAmount().compareTo(BigDecimal.ZERO) > 0;
    }

    private boolean isCommissionNotTakenFromTransactionAmount(CashTransactionDetailDTO detailDTO) {
        return !Boolean.TRUE
                .equals(detailDTO.getCashTransactionStoredRequest().getTakeCommissionFromTransactionAmount());
    }

    private boolean isCurrencyEqualToAccountCurrency(CashTransactionDetailDTO detailDTO) {
        return detailDTO.getCurrency().equals(detailDTO.getAccountCurrency());
    }

    private boolean hasKmvAmountGreaterThanZero(CashTransactionDetailDTO detailDTO) {
        return detailDTO.getKmvAmount() != null && detailDTO.getKmvAmount().compareTo(BigDecimal.ZERO) > 0;
    }

    private TransactionHeader getTransactionHeaders(CashTransactionDTO cashTransactionDTO,
                                                    List<CashTransactionDetailDTO> cashTransactionDetailDTOList) {
        TransactionHeader transactionHeader = new TransactionHeader();
        transactionHeader.setClientNo(cashTransactionDetailDTOList.get(0).getCashTransactionStoredRequest()
                .getClientInfo().getClientNo());
        transactionHeader.setCreatedBy(cashTransactionDTO.getCreatedBy());
        transactionHeader.setCreateDate(cashTransactionDTO.getCreateDate());
        transactionHeader.setUpdateDate(cashTransactionDTO.getUpdateDate());
        transactionHeader.setUpdatedBy(cashTransactionDTO.getUpdatedBy());
        transactionHeader.setJobCode(NotificationConstants.PARCEK_NOTIFICATION_SHORTNAME);
        return transactionHeader;
    }

    private String formatCurrency(BigDecimal number, String format) {
        Locale currentLocale = new Locale("en", "US");
        DecimalFormatSymbols unusualSymbols = new DecimalFormatSymbols(currentLocale);
        DecimalFormat formatter = new DecimalFormat(format, unusualSymbols);
        return formatter.format(number).replace(".", "#").replace(",", ".").replace("#", ",");
    }

    private String formatDate (Date date) {
        SimpleDateFormat formatter = new SimpleDateFormat("HH:mm");
        return formatter.format(date);
    }

    static class AmountCalculationResult {
        private String amountText;
        private Boolean isKgvIncluded;

        public AmountCalculationResult(String amountText, Boolean isKgvIncluded) {
            this.amountText = amountText;
            this.isKgvIncluded = isKgvIncluded;
        }

        public String getAmountText() {
            return amountText;
        }

        public Boolean getIsKgvIncluded() {
            return isKgvIncluded;
        }
    }
}



package com.ykb.corebanking.vault.money.deposit.withdraw.service.impl;

import com.ykb.architecture.micro.error.exception.MicroException;
import com.ykb.corebanking.vault.money.deposit.withdraw.dto.*;
import com.ykb.corebanking.vault.money.deposit.withdraw.exception.AccountException;
import com.ykb.corebanking.vault.money.deposit.withdraw.kafka.producer.CustomerNotificationProducer;
import com.ykb.corebanking.vault.money.deposit.withdraw.micro.clients.AccountClient;
import com.ykb.corebanking.vault.money.deposit.withdraw.micro.clients.response.ResponseAccountNumberWithCurrencyClient;
import com.ykb.corebanking.vault.money.deposit.withdraw.request.CashTransactionStoredRequest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(SpringExtension.class)
class CustomerNotificationServiceTest {

    @InjectMocks
    CustomerNotificationService customerNotificationService;

    @Mock
    AccountClient accountClient;

    @Mock
    CustomerNotificationProducer notificationProducer;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }


    @Test
    void testSendToNotificationQueue_Success() throws MicroException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setCreateDate(new Date());
        cashTransactionDTO.setBranchCode("326");
        cashTransactionDTO.setCreatedBy("U058408");
        cashTransactionDTO.setUpdatedBy("U058408");

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setCheckedFlexibleAccount(Boolean.TRUE);
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        storedRequest.setClientInfo(new ClientDTO());

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setTransactionId("txn123");
        detailDTO.setAccountNo("369");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setCurrency("TL");
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCashTransactionStoredRequest(storedRequest);
        detailDTO.setCommissionAmount(BigDecimal.ZERO);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        BalanceDTO balanceDTO = new BalanceDTO();
        balanceDTO.setAvailableBalance(BigDecimal.valueOf(5000));
        balanceDTO.setOverDraftBalance(BigDecimal.valueOf(10000));

        ResponseBalanceInfo balanceInfo = new ResponseBalanceInfo();
        balanceInfo.setBalanceDTO(balanceDTO);

        ResponseEntity<ResponseBalanceInfo> responseBalanceInfo = ResponseEntity.ok(balanceInfo);

        ResponseAccountNumberWithCurrencyClient accountNumberResponse = new ResponseAccountNumberWithCurrencyClient();
        accountNumberResponse.setIban("TRXXXXXX");

        ResponseEntity<ResponseAccountNumberWithCurrencyClient> accountNumberEntity = ResponseEntity.ok(accountNumberResponse);

        // Mocking AccountClient methods
        when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenReturn(responseBalanceInfo);
        when(accountClient.accountNumberWithCurrency(anyString())).thenReturn(accountNumberEntity);

        // Act
        customerNotificationService.sendToNotificationQueue(cashTransactionDTO, detailDTOList);

        // Assert
        verify(notificationProducer, times(1)).sendMessageToNotificationQueue(any(CustomerNotificationDTO.class));
    }





    @Test
    void testGetParameters_Success() throws MicroException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setCreateDate(new Date());
        cashTransactionDTO.setBranchCode("326");
        cashTransactionDTO.setCreatedBy("U058408");
        cashTransactionDTO.setUpdatedBy("U058408");

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setCheckedFlexibleAccount(Boolean.TRUE);
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        storedRequest.setClientInfo(new ClientDTO());

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setTransactionId("txn123");
        detailDTO.setAccountNo("acc123");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setCurrency("TL");
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCashTransactionStoredRequest(storedRequest);
        detailDTO.setCommissionAmount(BigDecimal.ZERO);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        BalanceDTO balanceDTO = new BalanceDTO();
        balanceDTO.setAvailableBalance(BigDecimal.valueOf(5000));
        balanceDTO.setOverDraftBalance(BigDecimal.valueOf(10000));

        ResponseBalanceInfo balanceInfo = new ResponseBalanceInfo();
        balanceInfo.setBalanceDTO(balanceDTO);

        ResponseEntity<ResponseBalanceInfo> responseBalanceInfo = ResponseEntity.ok(balanceInfo);

        ResponseAccountNumberWithCurrencyClient accountNumberResponse = new ResponseAccountNumberWithCurrencyClient();
        accountNumberResponse.setIban("TRXXXXXX");

        ResponseEntity<ResponseAccountNumberWithCurrencyClient> accountNumberEntity = ResponseEntity.ok(accountNumberResponse);

        // Mocking AccountClient methods
        when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenReturn(responseBalanceInfo);
        when(accountClient.accountNumberWithCurrency(anyString())).thenReturn(accountNumberEntity);

        // Act
        CustomerNotificationDTO result = customerNotificationService.getParameters(cashTransactionDTO, detailDTOList);

        // Assert
        assertNotNull(result);
        assertNotNull(result.getTransactionHeader());
        assertNotNull(result.getTransactionDetails());
    }

    @Test
    void testSendToNotificationQueue_NullDetailList() {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();

        // Act & Assert
        assertThrows(NullPointerException.class, () -> {
            customerNotificationService.sendToNotificationQueue(cashTransactionDTO, null);
        });
    }

    @Test
    void testSendToNotificationQueue_AccountException() throws MicroException {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        List<CashTransactionDetailDTO> detailDTOList = new ArrayList<>();

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setCheckedFlexibleAccount(Boolean.TRUE);
        storedRequest.setClientInfo(new ClientDTO());

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAccountNo("acc123");
        detailDTO.setCashTransactionStoredRequest(storedRequest);
        detailDTOList.add(detailDTO);

        // Mocking AccountClient to throw AccountException instead of MicroException
        when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenThrow(new AccountException("Error"));

        // Act & Assert
        assertThrows(AccountException.class, () -> {
            customerNotificationService.sendToNotificationQueue(cashTransactionDTO, detailDTOList);
        });
    }

    @Test
    void testCalculateAmountTextAndIsKgvIncluded_NoCommission_NoKmv() throws Exception {
        // Arrange
        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCurrency("TRY");
        detailDTO.setAccountCurrency("TRY");
        detailDTO.setCommissionAmount(BigDecimal.ZERO);
        detailDTO.setKmvAmount(BigDecimal.ZERO);

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        // Act
        Method method = CustomerNotificationService.class.getDeclaredMethod("calculateAmountTextAndIsKgvIncluded", List.class);
        method.setAccessible(true);
        Object result = method.invoke(customerNotificationService, detailDTOList);

        // Assert
        assertNotNull(result);
        CustomerNotificationService.AmountCalculationResult calculationResult = (CustomerNotificationService.AmountCalculationResult) result;
        assertEquals("", calculationResult.getAmountText());
        assertFalse(calculationResult.getIsKgvIncluded());
    }


    @Test
    void testCalculateTotalAmount() throws Exception {
        // Arrange
        CashTransactionDetailDTO detail1 = new CashTransactionDetailDTO();
        detail1.setAmount(BigDecimal.valueOf(1000));

        CashTransactionDetailDTO detail2 = new CashTransactionDetailDTO();
        detail2.setAmount(BigDecimal.valueOf(500));

        List<CashTransactionDetailDTO> detailDTOList = Arrays.asList(detail1, detail2);

        // Act
        Method method = CustomerNotificationService.class.getDeclaredMethod("calculateTotalAmount", List.class);
        method.setAccessible(true);
        Object result = method.invoke(customerNotificationService, detailDTOList);

        // Assert
        assertEquals(BigDecimal.valueOf(1500), result);
    }


    @Test
    void testGetTransactionDetail_NullBody() throws Exception {
        // Arrange
        CashTransactionDTO cashTransactionDTO = new CashTransactionDTO();
        cashTransactionDTO.setCreateDate(new Date());

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setCheckedFlexibleAccount(Boolean.TRUE);
        storedRequest.setClientInfo(new ClientDTO());

        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setTransactionId("txn123");
        detailDTO.setAccountNo("369");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setCurrency("TL");
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        // Mocking AccountClient methods to return ResponseEntity with null body
        ResponseEntity<ResponseAccountNumberWithCurrencyClient> responseEntity = ResponseEntity.ok(null);
        when(accountClient.accountNumberWithCurrency(anyString())).thenReturn(responseEntity);

        // Mocking getBalanceInfo
        BalanceDTO balanceDTO = new BalanceDTO();
        balanceDTO.setAvailableBalance(BigDecimal.valueOf(5000));
        balanceDTO.setOverDraftBalance(BigDecimal.valueOf(10000));

        ResponseBalanceInfo balanceInfo = new ResponseBalanceInfo();
        balanceInfo.setBalanceDTO(balanceDTO);

        ResponseEntity<ResponseBalanceInfo> responseBalanceInfo = ResponseEntity.ok(balanceInfo);
        when(accountClient.getBalanceInfo(anyString(), anyBoolean())).thenReturn(responseBalanceInfo);

        // Act & Assert
        AccountException exception = assertThrows(AccountException.class, () -> {
            customerNotificationService.getParameters(cashTransactionDTO, detailDTOList);
        });

        assertEquals("Hesap iban bilgileri bulunamadÄ±.", exception.getMessage());
    }

    @Test
    void testCalculateAmountTextAndIsKgvIncluded_WithCommission() throws Exception {
        // Arrange
        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCurrency("TL");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setCommissionAmount(BigDecimal.valueOf(50));

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        // Act
        Method method = CustomerNotificationService.class.getDeclaredMethod("calculateAmountTextAndIsKgvIncluded", List.class);
        method.setAccessible(true);
        Object result = method.invoke(customerNotificationService, detailDTOList);

        // Assert
        CustomerNotificationService.AmountCalculationResult calculationResult = (CustomerNotificationService.AmountCalculationResult) result;
        assertNotNull(calculationResult.getAmountText());

        assertFalse(calculationResult.getIsKgvIncluded());
    }


    @Test
    void testCalculateAmountTextAndIsKgvIncluded_WithKgv() throws Exception {
        // Arrange
        CashTransactionDetailDTO detailDTO = new CashTransactionDetailDTO();
        detailDTO.setAmount(BigDecimal.valueOf(1000));
        detailDTO.setCurrency("TL");
        detailDTO.setAccountCurrency("TL");
        detailDTO.setKmvAmount(BigDecimal.valueOf(100));

        CashTransactionStoredRequest storedRequest = new CashTransactionStoredRequest();
        storedRequest.setTakeCommissionFromTransactionAmount(Boolean.FALSE);
        detailDTO.setCashTransactionStoredRequest(storedRequest);

        List<CashTransactionDetailDTO> detailDTOList = Collections.singletonList(detailDTO);

        Method method = CustomerNotificationService.class.getDeclaredMethod("calculateAmountTextAndIsKgvIncluded", List.class);
        method.setAccessible(true);
        Object result = method.invoke(customerNotificationService, detailDTOList);


        CustomerNotificationService.AmountCalculationResult calculationResult = (CustomerNotificationService.AmountCalculationResult) result;
        assertNotNull(calculationResult.getAmountText());
    }

}
