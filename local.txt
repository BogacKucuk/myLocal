@Getter
@Setter
public class CashTransactionDTO {

    private Long   id;
    private String processCode;
    private Long   customerNo;
    private String branchCode;
    private String status;
    private Date   createDate;
    private String createdBy;
    private Date   updateDate;
    private String updatedBy;
    
}

@Getter
@Setter
public class CashTransactionDetailDTO {

    private Long                         id;
    private Long                         cashTransactionId;
    private BigDecimal                   amount;
    private String                       currency;
    private String                       transactionId;
    private Long                         contractNo;
    private BigDecimal                   accountAmount;
    private BigDecimal                   amountTl;
    private String                       accountName;
    private String                       accountNo;
    private String                       accountCurrency;
    private String                       accountType;
    private String                       accountBranchCode;
    private BigDecimal                   commissionAmount;
    private BigDecimal                   commissionAmountTl;
    private BigDecimal                   kmvAmount;
    private BigDecimal                   exchangeRate;
    private BigDecimal                   accountExchangeRate;
    private String                       transactionDescription;
    private String                       accountingDescription;
    private String                       transactionMaker;
    private Long                         transactionMakerCustomerNo;
    private String                       orderOwnershipFlag;
    private String                       rentPaymentFlag;
    private Integer                      customerTypeCode;
    private String                       customerSbuType;
    private Integer                      statisticCode;
    private Date                         createDate;
    private Date                         updateDate;
    private BigDecimal                   parity;

    private CashTransactionStoredRequest cashTransactionStoredRequest;

}

@Getter
@Setter
public class CashTransactionStoredRequest {

    private ResponseCommissionInformation responseCommissionInformation;
    private List<Long>                    vaultProvisionIdList;
    private Boolean                       takeCommissionFromTransactionAmount;
    private ClientDTO                     clientInfo;
    private Integer                       legalStatus;
    private MoneyDepositModalDetailDTO    rentPaymentModalDetail;
    private MoneyDepositModalDetailDTO    otherPersonModalDetail;
    private BigDecimal                    kgvAmountTl;
    private Boolean                       takeTaxFromAccount;
    private Boolean                       masakApprovalNeeded;
    private Boolean                       existsOnlyLimitApproval;
    private Boolean                       existsApproval;
    private String                        mainReceiptId;
    private Boolean                       checkedFlexibleAccount;
    private Boolean                       flexibleAccountVisible;
    private Long                          clientTicketId;
}

@Component
public class CustomerNotificationProducer {

    private final KafkaTemplate<String, String> kafkaTemplate;
    private final String notificationTopic;

    @Autowired
    public CustomerNotificationProducer(
            @Qualifier("customerNotificationKafkaTemplate") KafkaTemplate<String, String> kafkaTemplate,
            @Value("${kafka.customerNotification.address}") String notificationTopic,
            @Value("${kafka.customerNotification.postfix}") String notificationTopicPostfix) {
        this.kafkaTemplate = kafkaTemplate;
        this.notificationTopic = notificationTopic + notificationTopicPostfix;
    }

    public void sendMessageToNotificationQueue(Object messageObject) {
        if (messageObject == null) {
            throw new IllegalArgumentException("Notification message null olamaz");
        }
        String message = ObjectUtils.convertObjectToJSON(messageObject);
        kafkaTemplate.send(notificationTopic, message);
    }
}


@FeignClient(name = "COREBANKING.ACCOUNT.account", configuration = { MicroErrorDecoder.class })
public interface AccountClient {


    @GetMapping(path = "/acc/findbyaccountccy/{accountNumberWithCurrency}")
    ResponseEntity<ResponseAccountNumberWithCurrencyClient> accountNumberWithCurrency(@PathVariable("accountNumberWithCurrency") @Validated String accountNumberWithCurrency);

    @GetMapping(path = "/balance/balanceinfo")
    public ResponseEntity<ResponseBalanceInfo> getBalanceInfo(@RequestParam String accountNumber, @RequestParam Boolean lockRequired) throws MicroException;

}

@Getter
@Setter
public class ResponseAccountNumberWithCurrencyClient {
	 private String accountNoWithCurrency;
	    private String accountNo;
	    private int clientNo;
	    private int accountDate;
	    private String accountType;
	    private String accessInd;
	    private String advice;
	    private String blockCode;
	    private int blockLimit;
	    private String branch;
	    private String branchAc;
	    private String brnBlock;
	    private String brnOd;
	    private String cType;
	    private String ccyCopy;
	    private String ccyx;
	    private String chInd;
	    private String channel;
	    private int closeDate;
	    private int crBaseId;
	    private String department;
	    private int drBaseId;
	    private String fccaRule;
	    private String glaccCr;
	    private String glaccDr;
	    private String gmBloke;
	    private String iban;
	    private int luc;
	    private String maint;
	    private int masterNo;
	    private int openDate;
	    private int reviewDate;
	    private String screen;
	    private String sgkind;
	    private int sharedAccNo;
	    private int softlock;
	    private int statusCode;
	    private String taxInd;
	    private String toFrom;
	    private String usageAuth;
	    private String userCls;
	    private String userOpn;
	    private String usercode;
	    private String ykbhesap;
	    private String workingTimedAccount;
	    private String accountName;
	    private String accountHintName;
	    private Object limitStartDate;
	    private Object reviewDateStr;
}

@Getter
@Setter
public class ResponseBalanceInfo {
    private BalanceDTO balanceDTO;
}

@Getter
@Setter
public class BalanceDTO {
    private BigDecimal balance;
    private BigDecimal transferAmount;
    private Boolean isBalanceAvailableForTransfer;
    private BigDecimal bookBalance;
    private BigDecimal valueBalance;
    private BigDecimal blockedAmount;
    private BigDecimal overDraftLimit;
    private BigDecimal fundBalance;
    private String accountType;
    private String availableBalance;
    private BigDecimal overdraftBalance;
    private String currency;
    private String accountNumberKwCaac;
    private BigDecimal blockedOverdraft;
    private BigDecimal availableOverDraft;
    private BigDecimal workingTimedBalance;
}

@Getter
@Setter
public class TransactionDetails {
    private String transactionId;
    private String parameterName;
    private String parameterValue;
}

public class AccountException extends MicroException {
    private static final long serialVersionUID = -3585253702308801485L;

    public AccountException() {
        super(serialVersionUID);
    }

    public AccountException(String message) {
        super(serialVersionUID, message);
    }

    public AccountException(String message, Exception e) {
        super(serialVersionUID, message, e);
    }

    public AccountException(ExceptionData data, Exception exception) {
        super(data, exception);
    }

    public AccountException(ExceptionData data, Map<String, String> parameters) {
        super(data, parameters);
    }

    public AccountException(ExceptionData data) {
        super(data);
    }

    public AccountException(Long errorCode, String errorMessage, Exception exception) {
        super(errorCode, errorMessage, exception);
    }

    public AccountException(Long errorCode, String errorMessage) {
        super(errorCode, errorMessage);
    }

    public AccountException(Long errorCode) {
        super(errorCode);
    }
}
