import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(SpringExtension.class)
class CashTrxnInfoParameterServiceTest {

    @InjectMocks
    private CashTrxnInfoParameterService cashTrxnInfoParameterService;

    @Mock
    private ICashTrxnInfoParameterRepository cashTrxnInfoParameterRepository;

    // Mapper'ı mock'lamaya gerek yok, çünkü servis sınıfı statik INSTANCE üzerinden erişiyor.

    @Test
    void when_getCashTrxnInfoParameter_shouldReturnParameter() {
        when(cashTrxnInfoParameterRepository.findById(Mockito.anyString())).thenReturn(Optional.of(createCashTrxnInfoParameterEntity()));
        RequestCashTrxnInfoParameter request = new RequestCashTrxnInfoParameter();
        request.setParameterName("NAME");
        ResponseCashTrxnInfoParameter response = cashTrxnInfoParameterService.getCashTrxnInfoParameter(request);
        assertNotNull(response);
        assertNotNull(response.getCashTrxnParameterDTO());
        assertEquals("Y", response.getCashTrxnParameterDTO().getValue());
    }

    @Test
    void when_getCashTrxnInfoParametersContaining_withValidRequest_shouldReturnParameters() {
        RequestCashTrxnInfoParameter request = new RequestCashTrxnInfoParameter();
        request.setParameterName("testParam");

        List<CashTrxnInfoParameterEntity> entities = Arrays.asList(createCashTrxnInfoParameterEntity());

        when(cashTrxnInfoParameterRepository.findByParameterNameContaining("testParam")).thenReturn(entities);

        ResponseCashTrxnInfoParameterList response = cashTrxnInfoParameterService.getCashTrxnInfoParametersContaining(request);

        assertNotNull(response);
        assertNotNull(response.getCashTrxnParameterDTOList());
        assertEquals(1, response.getCashTrxnParameterDTOList().size());
        assertEquals("Y", response.getCashTrxnParameterDTOList().get(0).getValue());

        verify(cashTrxnInfoParameterRepository, times(1)).findByParameterNameContaining("testParam");
    }

    @Test
    void when_getCashTrxnInfoParametersContaining_withNullRequest_shouldReturnEmptyResponse() {
        ResponseCashTrxnInfoParameterList response = cashTrxnInfoParameterService.getCashTrxnInfoParametersContaining(null);

        assertNotNull(response);
        assertNull(response.getCashTrxnParameterDTOList());

        verifyNoInteractions(cashTrxnInfoParameterRepository);
    }

    @Test
    void when_getCashTrxnInfoParametersContaining_withNullParameterName_shouldReturnEmptyResponse() {
        RequestCashTrxnInfoParameter request = new RequestCashTrxnInfoParameter();
        request.setParameterName(null);

        ResponseCashTrxnInfoParameterList response = cashTrxnInfoParameterService.getCashTrxnInfoParametersContaining(request);

        assertNotNull(response);
        assertNull(response.getCashTrxnParameterDTOList());

        verifyNoInteractions(cashTrxnInfoParameterRepository);
    }

    @Test
    void when_getCashTrxnInfoParametersContaining_noEntitiesFound_shouldReturnEmptyList() {
        RequestCashTrxnInfoParameter request = new RequestCashTrxnInfoParameter();
        request.setParameterName("testParam");

        when(cashTrxnInfoParameterRepository.findByParameterNameContaining("testParam")).thenReturn(Collections.emptyList());

        ResponseCashTrxnInfoParameterList response = cashTrxnInfoParameterService.getCashTrxnInfoParametersContaining(request);

        assertNotNull(response);
        assertNull(response.getCashTrxnParameterDTOList());

        verify(cashTrxnInfoParameterRepository, times(1)).findByParameterNameContaining("testParam");
    }

    private CashTrxnInfoParameterEntity createCashTrxnInfoParameterEntity() {
        CashTrxnInfoParameterEntity entity = new CashTrxnInfoParameterEntity();
        entity.setParameterName("NAME");
        entity.setValue("Y");
        return entity;
    }
}
