package com.ykb.corebanking.vault.money.deposit.withdraw.bff.controller;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.ykb.corebanking.vault.money.deposit.withdraw.bff.dto.CashTrxnParameterDTO;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.request.RequestCashTrxnDeleteParameter;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.request.RequestCashTrxnSearchParameter;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.response.ResponseCashTrxnSearchParameter;
import com.ykb.corebanking.vault.money.deposit.withdraw.bff.service.impl.CashTrxnParameterService;

@ExtendWith(SpringExtension.class)
class CashTrxnParameterControllerTest {
    
    @InjectMocks
    CashTrxnParameterController controller;
    
    @Mock
    CashTrxnParameterService service;

    @Test
    void whenCall_getCashTrxnInfoParameterWithCache_success() {
        when(service.getCashTrxnInfoParameterWithCache(Mockito.anyString())).thenReturn(new CashTrxnParameterDTO());
        CashTrxnParameterDTO response = controller.getCashTrxnInfoParameterWithCache("testParameter");
        assertNotNull(response);
    }

    @Test
    void whenCall_getCashTrxnSystemParameterWithCache_success() {
        when(service.getCashTrxnSystemParameterWithCache(Mockito.anyString())).thenReturn(new CashTrxnParameterDTO());
        CashTrxnParameterDTO response = controller.getCashTrxnSystemParameterWithCache("testParameter");
        assertNotNull(response);
    }
    
    // Yeni eklenen test metodu
    @Test
    void whenCall_searchCashTrxnParameters_success() {
        // Mock the service response
        ResponseCashTrxnSearchParameter mockResponse = new ResponseCashTrxnSearchParameter();
        when(service.searchCashTrxnParameter(Mockito.any(RequestCashTrxnSearchParameter.class)))
            .thenReturn(mockResponse);
        
        // Create a mock request
        RequestCashTrxnSearchParameter request = new RequestCashTrxnSearchParameter();
        // Set necessary fields in request if needed
        
        // Call the controller method
        ResponseEntity<ResponseCashTrxnSearchParameter> responseEntity = controller.searchCashTrxnParameters(request);
        
        // Assert the response
        assertNotNull(responseEntity);
        assertNotNull(responseEntity.getBody());
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
    }
    
    // Yeni eklenen test metodu
    @Test
    void whenCall_deleteCashTrxnParameter_success() {
        // Mock the service method to do nothing
        doNothing().when(service).deleteCashTrxnParameter(Mockito.any(RequestCashTrxnDeleteParameter.class));
        
        // Create a mock request
        RequestCashTrxnDeleteParameter request = new RequestCashTrxnDeleteParameter();
        // Set necessary fields in request if needed
        
        // Call the controller method
        ResponseEntity<Void> responseEntity = controller.deleteCashTrxnParameter(request);
        
        // Assert the response
        assertNotNull(responseEntity);
        assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());
    }
}
