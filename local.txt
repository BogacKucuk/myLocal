import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit.jupiter.SpringExtension;

@ExtendWith(SpringExtension.class)
class SmartControlControllerTest {

    @InjectMocks
    SmartControlController smartControlController;

    @Mock
    ISmartControlService smartControlService;

    @Test
    void getSmartControlDocuments_ShouldReturnExpectedResponse() throws SmartControlException {
        // Arrange
        RequestSmartControlDocuments request = new RequestSmartControlDocuments();
        request.setParameterName("testParameter");
        request.setGroupId("testGroupId");

        SmartControlDataDTO expectedResponse = new SmartControlDataDTO();
        expectedResponse.setBbtDocuments(new ArrayList<>());
        expectedResponse.setNotExistsDocs(new ArrayList<>());

        when(smartControlService.getSmartControlDocuments(any(RequestSmartControlDocuments.class)))
            .thenReturn(expectedResponse);

        // Act
        ResponseEntity<SmartControlDataDTO> response = smartControlController.getSmartControlDocuments(request);

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(expectedResponse, response.getBody());
    }

    @Test
    void getSmartControlDocuments_ShouldThrowSmartControlException() throws SmartControlException {
        // Arrange
        RequestSmartControlDocuments request = new RequestSmartControlDocuments();
        request.setParameterName("testParameter");
        request.setGroupId("testGroupId");

        when(smartControlService.getSmartControlDocuments(any(RequestSmartControlDocuments.class)))
            .thenThrow(new SmartControlException("Test Exception"));

        // Act & Assert
        assertThrows(SmartControlException.class, () -> {
            smartControlController.getSmartControlDocuments(request);
        });
    }
}
