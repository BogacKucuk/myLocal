package com.ykb.corebanking.vault.money.deposit.withdraw.service.impl;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.ykb.corebanking.vault.money.deposit.withdraw.dto.CashTrxnParameterDTO;
import com.ykb.corebanking.vault.money.deposit.withdraw.exception.CashTrxnParameterException;
import com.ykb.corebanking.vault.money.deposit.withdraw.request.*;
import com.ykb.corebanking.vault.money.deposit.withdraw.response.*;
import com.ykb.corebanking.vault.money.deposit.withdraw.service.ICashTrxnInfoParameterService;
import com.ykb.corebanking.vault.money.deposit.withdraw.service.ICashTrxnSystemParameterService;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.util.Arrays;
import java.util.Collections;

@ExtendWith(SpringExtension.class)
class CashTrxnParameterServiceTest {

    @InjectMocks
    private CashTrxnParameterService cashTrxnParameterService;

    @Mock
    private ICashTrxnInfoParameterService cashTrxnInfoParameterService;

    @Mock
    private ICashTrxnSystemParameterService cashTrxnSystemParameterService;


    @Test
    void when_getCashTrxnInfoParametersContainingWithCache_withValidName_shouldReturnList() {
        ResponseCashTrxnInfoParameterList infoList = new ResponseCashTrxnInfoParameterList();
        CashTrxnParameterDTO dto = new CashTrxnParameterDTO();
        dto.setParameterName("INFO_PARAM");
        dto.setValue("VAL");
        infoList.setCashTrxnParameterDTOList(Arrays.asList(dto));

        when(cashTrxnInfoParameterService.getCashTrxnInfoParametersContaining(any(RequestCashTrxnInfoParameter.class)))
                .thenReturn(infoList);

        var result = cashTrxnParameterService.getCashTrxnInfoParametersContainingWithCache("INFO_PARAM");
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals("VAL", result.get(0).getValue());
    }

    @Test
    void when_getCashTrxnInfoParametersContainingWithCache_noResults_shouldReturnNull() {
        ResponseCashTrxnInfoParameterList emptyList = new ResponseCashTrxnInfoParameterList();
        when(cashTrxnInfoParameterService.getCashTrxnInfoParametersContaining(any(RequestCashTrxnInfoParameter.class)))
                .thenReturn(emptyList);

        var result = cashTrxnParameterService.getCashTrxnInfoParametersContainingWithCache("NON_EXISTING");
        assertNull(result);
    }

    @Test
    void when_getCashTrxnSystemParametersContainingWithCache_withValidName_shouldReturnList() {
        ResponseCashTrxnSystemParameterList systemList = new ResponseCashTrxnSystemParameterList();
        CashTrxnParameterDTO dto = new CashTrxnParameterDTO();
        dto.setParameterName("SYSTEM_PARAM");
        dto.setValue("SYS_VAL");
        systemList.setCashTrxnParameterDTOList(Arrays.asList(dto));

        when(cashTrxnSystemParameterService.getCashTrxnSystemParametersContaining(any(RequestCashTrxnSystemParameter.class)))
                .thenReturn(systemList);

        var result = cashTrxnParameterService.getCashTrxnSystemParametersContainingWithCache("SYSTEM_PARAM");
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals("SYS_VAL", result.get(0).getValue());
    }

    @Test
    void when_getCashTrxnSystemParametersContainingWithCache_noResults_shouldReturnEmptyList() {
        ResponseCashTrxnSystemParameterList emptyList = new ResponseCashTrxnSystemParameterList();
        when(cashTrxnSystemParameterService.getCashTrxnSystemParametersContaining(any(RequestCashTrxnSystemParameter.class)))
                .thenReturn(emptyList);

        var result = cashTrxnParameterService.getCashTrxnSystemParametersContainingWithCache("NON_EXISTING");
        assertNotNull(result);
        assertTrue(result.isEmpty());
    }

    @Test
    void when_createCashTrxnParameter_withInfoTable_shouldCallInfoServiceAndReturnResponse() throws CashTrxnParameterException {
        ResponseCashTrxnCreateParameter mockResponse = new ResponseCashTrxnCreateParameter();
        mockResponse.setParameterName("INFO_PARAM");
        when(cashTrxnInfoParameterService.createInfoParameter(any(RequestCashTrxnCreateParameter.class)))
                .thenReturn(mockResponse);

        RequestCashTrxnCreateParameter request = new RequestCashTrxnCreateParameter();
        request.setTable("INFO");

        ResponseCashTrxnCreateParameter response = cashTrxnParameterService.createCashTrxnParameter(request);
        assertNotNull(response);
        assertEquals("INFO_PARAM", response.getParameterName());
        verify(cashTrxnInfoParameterService, times(1)).createInfoParameter(request);
        verifyNoInteractions(cashTrxnSystemParameterService);
    }

    @Test
    void when_createCashTrxnParameter_withSystemTable_shouldCallSystemServiceAndReturnResponse() throws CashTrxnParameterException {
        ResponseCashTrxnCreateParameter mockResponse = new ResponseCashTrxnCreateParameter();
        mockResponse.setParameterName("SYSTEM_PARAM");
        when(cashTrxnSystemParameterService.createSystemParameter(any(RequestCashTrxnCreateParameter.class)))
                .thenReturn(mockResponse);

        RequestCashTrxnCreateParameter request = new RequestCashTrxnCreateParameter();
        request.setTable("SYSTEM");

        ResponseCashTrxnCreateParameter response = cashTrxnParameterService.createCashTrxnParameter(request);
        assertNotNull(response);
        assertEquals("SYSTEM_PARAM", response.getParameterName());
        verify(cashTrxnSystemParameterService, times(1)).createSystemParameter(request);
        verifyNoInteractions(cashTrxnInfoParameterService);
    }

    @Test
    void when_updateCashTrxnParameter_withInfoTable_shouldCallInfoServiceAndReturnResponse() throws CashTrxnParameterException {
        ResponseCashTrxnUpdateParameter mockResponse = new ResponseCashTrxnUpdateParameter();
        mockResponse.setParameterName("INFO_UPDATED");
        when(cashTrxnInfoParameterService.updateCashTrxnInfoParameter(any(RequestCashTrxnUpdateParameter.class)))
                .thenReturn(mockResponse);

        RequestCashTrxnUpdateParameter request = new RequestCashTrxnUpdateParameter();
        request.setTable("INFO");

        ResponseCashTrxnUpdateParameter response = cashTrxnParameterService.updateCashTrxnParameter(request);
        assertNotNull(response);
        assertEquals("INFO_UPDATED", response.getParameterName());
        verify(cashTrxnInfoParameterService, times(1)).updateCashTrxnInfoParameter(request);
        verifyNoInteractions(cashTrxnSystemParameterService);
    }

    @Test
    void when_updateCashTrxnParameter_withSystemTable_shouldCallSystemServiceAndReturnResponse() throws CashTrxnParameterException {
        ResponseCashTrxnUpdateParameter mockResponse = new ResponseCashTrxnUpdateParameter();
        mockResponse.setParameterName("SYSTEM_UPDATED");
        when(cashTrxnSystemParameterService.updateCashTrxnSystemParameter(any(RequestCashTrxnUpdateParameter.class)))
                .thenReturn(mockResponse);

        RequestCashTrxnUpdateParameter request = new RequestCashTrxnUpdateParameter();
        request.setTable("SYSTEM");

        ResponseCashTrxnUpdateParameter response = cashTrxnParameterService.updateCashTrxnParameter(request);
        assertNotNull(response);
        assertEquals("SYSTEM_UPDATED", response.getParameterName());
        verify(cashTrxnSystemParameterService, times(1)).updateCashTrxnSystemParameter(request);
        verifyNoInteractions(cashTrxnInfoParameterService);
    }

}
